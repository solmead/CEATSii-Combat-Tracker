'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18408
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Imports System.Runtime.Serialization


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="RMSS")>  _
Partial Public Class RMSSDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertActionGroup(instance As ActionGroup)
    End Sub
  Partial Private Sub UpdateActionGroup(instance As ActionGroup)
    End Sub
  Partial Private Sub DeleteActionGroup(instance As ActionGroup)
    End Sub
  Partial Private Sub InsertBaseAction(instance As BaseAction)
    End Sub
  Partial Private Sub UpdateBaseAction(instance As BaseAction)
    End Sub
  Partial Private Sub DeleteBaseAction(instance As BaseAction)
    End Sub
  Partial Private Sub InsertAttack(instance As Attack)
    End Sub
  Partial Private Sub UpdateAttack(instance As Attack)
    End Sub
  Partial Private Sub DeleteAttack(instance As Attack)
    End Sub
  Partial Private Sub InsertAttacksAddCrit(instance As AttacksAddCrit)
    End Sub
  Partial Private Sub UpdateAttacksAddCrit(instance As AttacksAddCrit)
    End Sub
  Partial Private Sub DeleteAttacksAddCrit(instance As AttacksAddCrit)
    End Sub
  Partial Private Sub InsertBook(instance As Book)
    End Sub
  Partial Private Sub UpdateBook(instance As Book)
    End Sub
  Partial Private Sub DeleteBook(instance As Book)
    End Sub
  Partial Private Sub InsertCharacter(instance As Character)
    End Sub
  Partial Private Sub UpdateCharacter(instance As Character)
    End Sub
  Partial Private Sub DeleteCharacter(instance As Character)
    End Sub
  Partial Private Sub InsertPsychicRefractoryPeriodChart(instance As PsychicRefractoryPeriodChart)
    End Sub
  Partial Private Sub UpdatePsychicRefractoryPeriodChart(instance As PsychicRefractoryPeriodChart)
    End Sub
  Partial Private Sub DeletePsychicRefractoryPeriodChart(instance As PsychicRefractoryPeriodChart)
    End Sub
  Partial Private Sub InsertWeapon(instance As Weapon)
    End Sub
  Partial Private Sub UpdateWeapon(instance As Weapon)
    End Sub
  Partial Private Sub DeleteWeapon(instance As Weapon)
    End Sub
  Partial Private Sub InsertArmor(instance As Armor)
    End Sub
  Partial Private Sub UpdateArmor(instance As Armor)
    End Sub
  Partial Private Sub DeleteArmor(instance As Armor)
    End Sub
  Partial Private Sub InsertSystemUser(instance As SystemUser)
    End Sub
  Partial Private Sub UpdateSystemUser(instance As SystemUser)
    End Sub
  Partial Private Sub DeleteSystemUser(instance As SystemUser)
    End Sub
  Partial Private Sub InsertPace(instance As Pace)
    End Sub
  Partial Private Sub UpdatePace(instance As Pace)
    End Sub
  Partial Private Sub DeletePace(instance As Pace)
    End Sub
  Partial Private Sub InsertSpeedChart(instance As SpeedChart)
    End Sub
  Partial Private Sub UpdateSpeedChart(instance As SpeedChart)
    End Sub
  Partial Private Sub DeleteSpeedChart(instance As SpeedChart)
    End Sub
  Partial Private Sub InsertSizeRating(instance As SizeRating)
    End Sub
  Partial Private Sub UpdateSizeRating(instance As SizeRating)
    End Sub
  Partial Private Sub DeleteSizeRating(instance As SizeRating)
    End Sub
  Partial Private Sub InsertCriticalCode(instance As CriticalCode)
    End Sub
  Partial Private Sub UpdateCriticalCode(instance As CriticalCode)
    End Sub
  Partial Private Sub DeleteCriticalCode(instance As CriticalCode)
    End Sub
  Partial Private Sub InsertCriticalIgnore(instance As CriticalIgnore)
    End Sub
  Partial Private Sub UpdateCriticalIgnore(instance As CriticalIgnore)
    End Sub
  Partial Private Sub DeleteCriticalIgnore(instance As CriticalIgnore)
    End Sub
  Partial Private Sub InsertLevelChart(instance As LevelChart)
    End Sub
  Partial Private Sub UpdateLevelChart(instance As LevelChart)
    End Sub
  Partial Private Sub DeleteLevelChart(instance As LevelChart)
    End Sub
  Partial Private Sub InsertLevelChartValue(instance As LevelChartValue)
    End Sub
  Partial Private Sub UpdateLevelChartValue(instance As LevelChartValue)
    End Sub
  Partial Private Sub DeleteLevelChartValue(instance As LevelChartValue)
    End Sub
  Partial Private Sub InsertConstitutionBonusChart(instance As ConstitutionBonusChart)
    End Sub
  Partial Private Sub UpdateConstitutionBonusChart(instance As ConstitutionBonusChart)
    End Sub
  Partial Private Sub DeleteConstitutionBonusChart(instance As ConstitutionBonusChart)
    End Sub
  Partial Private Sub InsertConstitutionBonusChartValue(instance As ConstitutionBonusChartValue)
    End Sub
  Partial Private Sub UpdateConstitutionBonusChartValue(instance As ConstitutionBonusChartValue)
    End Sub
  Partial Private Sub DeleteConstitutionBonusChartValue(instance As ConstitutionBonusChartValue)
    End Sub
  Partial Private Sub InsertIQ(instance As IQ)
    End Sub
  Partial Private Sub UpdateIQ(instance As IQ)
    End Sub
  Partial Private Sub DeleteIQ(instance As IQ)
    End Sub
  Partial Private Sub InsertOutlook(instance As Outlook)
    End Sub
  Partial Private Sub UpdateOutlook(instance As Outlook)
    End Sub
  Partial Private Sub DeleteOutlook(instance As Outlook)
    End Sub
  Partial Private Sub InsertCreature(instance As Creature)
    End Sub
  Partial Private Sub UpdateCreature(instance As Creature)
    End Sub
  Partial Private Sub DeleteCreature(instance As Creature)
    End Sub
  Partial Private Sub InsertCriticalType(instance As CriticalType)
    End Sub
  Partial Private Sub UpdateCriticalType(instance As CriticalType)
    End Sub
  Partial Private Sub DeleteCriticalType(instance As CriticalType)
    End Sub
  Partial Private Sub InsertAttackType(instance As AttackType)
    End Sub
  Partial Private Sub UpdateAttackType(instance As AttackType)
    End Sub
  Partial Private Sub DeleteAttackType(instance As AttackType)
    End Sub
  Partial Private Sub InsertGame(instance As Game)
    End Sub
  Partial Private Sub UpdateGame(instance As Game)
    End Sub
  Partial Private Sub DeleteGame(instance As Game)
    End Sub
  Partial Private Sub InsertGamesPlayer(instance As GamesPlayer)
    End Sub
  Partial Private Sub UpdateGamesPlayer(instance As GamesPlayer)
    End Sub
  Partial Private Sub DeleteGamesPlayer(instance As GamesPlayer)
    End Sub
  Partial Private Sub InsertActor(instance As Actor)
    End Sub
  Partial Private Sub UpdateActor(instance As Actor)
    End Sub
  Partial Private Sub DeleteActor(instance As Actor)
    End Sub
  Partial Private Sub InsertCriticalAffect(instance As CriticalAffect)
    End Sub
  Partial Private Sub UpdateCriticalAffect(instance As CriticalAffect)
    End Sub
  Partial Private Sub DeleteCriticalAffect(instance As CriticalAffect)
    End Sub
  Partial Private Sub InsertAction(instance As Action)
    End Sub
  Partial Private Sub UpdateAction(instance As Action)
    End Sub
  Partial Private Sub DeleteAction(instance As Action)
    End Sub
  Partial Private Sub InsertActorsAttack(instance As ActorsAttack)
    End Sub
  Partial Private Sub UpdateActorsAttack(instance As ActorsAttack)
    End Sub
  Partial Private Sub DeleteActorsAttack(instance As ActorsAttack)
    End Sub
  Partial Private Sub InsertWeaponType(instance As WeaponType)
    End Sub
  Partial Private Sub UpdateWeaponType(instance As WeaponType)
    End Sub
  Partial Private Sub DeleteWeaponType(instance As WeaponType)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CombatTrackerData.My.MySettings.Default.MainDBConnString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ActionGroups() As System.Data.Linq.Table(Of ActionGroup)
		Get
			Return Me.GetTable(Of ActionGroup)
		End Get
	End Property
	
	Public ReadOnly Property BaseActions() As System.Data.Linq.Table(Of BaseAction)
		Get
			Return Me.GetTable(Of BaseAction)
		End Get
	End Property
	
	Public ReadOnly Property Attacks() As System.Data.Linq.Table(Of Attack)
		Get
			Return Me.GetTable(Of Attack)
		End Get
	End Property
	
	Public ReadOnly Property AttacksAddCrits() As System.Data.Linq.Table(Of AttacksAddCrit)
		Get
			Return Me.GetTable(Of AttacksAddCrit)
		End Get
	End Property
	
	Public ReadOnly Property Books() As System.Data.Linq.Table(Of Book)
		Get
			Return Me.GetTable(Of Book)
		End Get
	End Property
	
	Public ReadOnly Property Characters() As System.Data.Linq.Table(Of Character)
		Get
			Return Me.GetTable(Of Character)
		End Get
	End Property
	
	Public ReadOnly Property PsychicRefractoryPeriodCharts() As System.Data.Linq.Table(Of PsychicRefractoryPeriodChart)
		Get
			Return Me.GetTable(Of PsychicRefractoryPeriodChart)
		End Get
	End Property
	
	Public ReadOnly Property Weapons() As System.Data.Linq.Table(Of Weapon)
		Get
			Return Me.GetTable(Of Weapon)
		End Get
	End Property
	
	Public ReadOnly Property Armors() As System.Data.Linq.Table(Of Armor)
		Get
			Return Me.GetTable(Of Armor)
		End Get
	End Property
	
	Public ReadOnly Property SystemUsers() As System.Data.Linq.Table(Of SystemUser)
		Get
			Return Me.GetTable(Of SystemUser)
		End Get
	End Property
	
	Public ReadOnly Property Paces() As System.Data.Linq.Table(Of Pace)
		Get
			Return Me.GetTable(Of Pace)
		End Get
	End Property
	
	Public ReadOnly Property SpeedCharts() As System.Data.Linq.Table(Of SpeedChart)
		Get
			Return Me.GetTable(Of SpeedChart)
		End Get
	End Property
	
	Public ReadOnly Property SizeRatings() As System.Data.Linq.Table(Of SizeRating)
		Get
			Return Me.GetTable(Of SizeRating)
		End Get
	End Property
	
	Public ReadOnly Property CriticalCodes() As System.Data.Linq.Table(Of CriticalCode)
		Get
			Return Me.GetTable(Of CriticalCode)
		End Get
	End Property
	
	Public ReadOnly Property CriticalIgnores() As System.Data.Linq.Table(Of CriticalIgnore)
		Get
			Return Me.GetTable(Of CriticalIgnore)
		End Get
	End Property
	
	Public ReadOnly Property LevelCharts() As System.Data.Linq.Table(Of LevelChart)
		Get
			Return Me.GetTable(Of LevelChart)
		End Get
	End Property
	
	Public ReadOnly Property LevelChartValues() As System.Data.Linq.Table(Of LevelChartValue)
		Get
			Return Me.GetTable(Of LevelChartValue)
		End Get
	End Property
	
	Public ReadOnly Property ConstitutionBonusCharts() As System.Data.Linq.Table(Of ConstitutionBonusChart)
		Get
			Return Me.GetTable(Of ConstitutionBonusChart)
		End Get
	End Property
	
	Public ReadOnly Property ConstitutionBonusChartValues() As System.Data.Linq.Table(Of ConstitutionBonusChartValue)
		Get
			Return Me.GetTable(Of ConstitutionBonusChartValue)
		End Get
	End Property
	
	Public ReadOnly Property IQs() As System.Data.Linq.Table(Of IQ)
		Get
			Return Me.GetTable(Of IQ)
		End Get
	End Property
	
	Public ReadOnly Property Outlooks() As System.Data.Linq.Table(Of Outlook)
		Get
			Return Me.GetTable(Of Outlook)
		End Get
	End Property
	
	Public ReadOnly Property Creatures() As System.Data.Linq.Table(Of Creature)
		Get
			Return Me.GetTable(Of Creature)
		End Get
	End Property
	
	Public ReadOnly Property CriticalTypes() As System.Data.Linq.Table(Of CriticalType)
		Get
			Return Me.GetTable(Of CriticalType)
		End Get
	End Property
	
	Public ReadOnly Property AttackTypes() As System.Data.Linq.Table(Of AttackType)
		Get
			Return Me.GetTable(Of AttackType)
		End Get
	End Property
	
	Public ReadOnly Property Games() As System.Data.Linq.Table(Of Game)
		Get
			Return Me.GetTable(Of Game)
		End Get
	End Property
	
	Public ReadOnly Property GamesPlayers() As System.Data.Linq.Table(Of GamesPlayer)
		Get
			Return Me.GetTable(Of GamesPlayer)
		End Get
	End Property
	
	Public ReadOnly Property Actors() As System.Data.Linq.Table(Of Actor)
		Get
			Return Me.GetTable(Of Actor)
		End Get
	End Property
	
	Public ReadOnly Property CriticalAffects() As System.Data.Linq.Table(Of CriticalAffect)
		Get
			Return Me.GetTable(Of CriticalAffect)
		End Get
	End Property
	
	Public ReadOnly Property Actions() As System.Data.Linq.Table(Of Action)
		Get
			Return Me.GetTable(Of Action)
		End Get
	End Property
	
	Public ReadOnly Property ActorsAttacks() As System.Data.Linq.Table(Of ActorsAttack)
		Get
			Return Me.GetTable(Of ActorsAttack)
		End Get
	End Property
	
	Public ReadOnly Property WeaponTypes() As System.Data.Linq.Table(Of WeaponType)
		Get
			Return Me.GetTable(Of WeaponType)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActionGroups"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ActionGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Actions As EntitySet(Of BaseAction)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActionGroup_BaseAction", Storage:="_Actions", ThisKey:="ID", OtherKey:="ActionGroup_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property Actions() As EntitySet(Of BaseAction)
		Get
			If (Me.serializing  _
						AndAlso (Me._Actions.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Actions
		End Get
		Set
			Me._Actions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Actions(ByVal entity As BaseAction)
		Me.SendPropertyChanging
		entity.[Group] = Me
	End Sub
	
	Private Sub detach_Actions(ByVal entity As BaseAction)
		Me.SendPropertyChanging
		entity.[Group] = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Actions = New EntitySet(Of BaseAction)(AddressOf Me.attach_Actions, AddressOf Me.detach_Actions)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Actions"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BaseAction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ActionGroup_ID As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _BasePercent As Double
	
	Private _NextAction_ID As System.Nullable(Of Integer)
	
	Private _Type As BaseActionType
	
	Private _ParentActions As EntitySet(Of BaseAction)
	
	Private _Actions As EntitySet(Of Action)
	
	Private _Group As EntityRef(Of ActionGroup)
	
	Private _NextAction As EntityRef(Of BaseAction)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnActionGroup_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnActionGroup_IDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnBasePercentChanging(value As Double)
    End Sub
    Partial Private Sub OnBasePercentChanged()
    End Sub
    Partial Private Sub OnNextAction_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNextAction_IDChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As BaseActionType)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionGroup_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ActionGroup_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ActionGroup_ID
		End Get
		Set
			If (Me._ActionGroup_ID.Equals(value) = false) Then
				If Me._Group.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnActionGroup_IDChanging(value)
				Me.SendPropertyChanging
				Me._ActionGroup_ID = value
				Me.SendPropertyChanged("ActionGroup_ID")
				Me.OnActionGroup_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BasePercent", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property BasePercent() As Double
		Get
			Return Me._BasePercent
		End Get
		Set
			If ((Me._BasePercent = value)  _
						= false) Then
				Me.OnBasePercentChanging(value)
				Me.SendPropertyChanging
				Me._BasePercent = value
				Me.SendPropertyChanged("BasePercent")
				Me.OnBasePercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NextAction_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property NextAction_ID() As System.Nullable(Of Integer)
		Get
			Return Me._NextAction_ID
		End Get
		Set
			If (Me._NextAction_ID.Equals(value) = false) Then
				If Me._NextAction.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNextAction_IDChanging(value)
				Me.SendPropertyChanging
				Me._NextAction_ID = value
				Me.SendPropertyChanged("NextAction_ID")
				Me.OnNextAction_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property Type() As BaseActionType
		Get
			Return Me._Type
		End Get
		Set
			If (Object.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BaseAction_BaseAction", Storage:="_ParentActions", ThisKey:="ID", OtherKey:="NextAction_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property ParentActions() As EntitySet(Of BaseAction)
		Get
			If (Me.serializing  _
						AndAlso (Me._ParentActions.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ParentActions
		End Get
		Set
			Me._ParentActions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BaseAction_Action", Storage:="_Actions", ThisKey:="ID", OtherKey:="BaseAction_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8, EmitDefaultValue:=false)>  _
	Public Property Actions() As EntitySet(Of Action)
		Get
			If (Me.serializing  _
						AndAlso (Me._Actions.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Actions
		End Get
		Set
			Me._Actions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActionGroup_BaseAction", Storage:="_Group", ThisKey:="ActionGroup_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property [Group]() As ActionGroup
		Get
			Return Me._Group.Entity
		End Get
		Set
			Dim previousValue As ActionGroup = Me._Group.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Group.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Group.Entity = Nothing
					previousValue.Actions.Remove(Me)
				End If
				Me._Group.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actions.Add(Me)
					Me._ActionGroup_ID = value.ID
				Else
					Me._ActionGroup_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("[Group]")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BaseAction_BaseAction", Storage:="_NextAction", ThisKey:="NextAction_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property NextAction() As BaseAction
		Get
			Return Me._NextAction.Entity
		End Get
		Set
			Dim previousValue As BaseAction = Me._NextAction.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NextAction.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NextAction.Entity = Nothing
					previousValue.ParentActions.Remove(Me)
				End If
				Me._NextAction.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ParentActions.Add(Me)
					Me._NextAction_ID = value.ID
				Else
					Me._NextAction_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NextAction")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ParentActions(ByVal entity As BaseAction)
		Me.SendPropertyChanging
		entity.NextAction = Me
	End Sub
	
	Private Sub detach_ParentActions(ByVal entity As BaseAction)
		Me.SendPropertyChanging
		entity.NextAction = Nothing
	End Sub
	
	Private Sub attach_Actions(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.Base = Me
	End Sub
	
	Private Sub detach_Actions(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.Base = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ParentActions = New EntitySet(Of BaseAction)(AddressOf Me.attach_ParentActions, AddressOf Me.detach_ParentActions)
		Me._Actions = New EntitySet(Of Action)(AddressOf Me.attach_Actions, AddressOf Me.detach_Actions)
		Me._Group = CType(Nothing, EntityRef(Of ActionGroup))
		Me._NextAction = CType(Nothing, EntityRef(Of BaseAction))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Attacks"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Attack
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _PercentChance As Double
	
	Private _OB As Integer
	
	Private _MaxOB As Integer
	
	Private _Type As System.Nullable(Of Integer)
	
	Private _Size As System.Nullable(Of Integer)
	
	Private _Number As Integer
	
	Private _DamageMultiplier As Integer
	
	Private _CriticalLevel As CriticalLevels
	
	Private _AdditionalCritsIsOr As Boolean
	
	Private _UseCriticalInstead As System.Nullable(Of Integer)
	
	Private _ThisRoundSuccess_ID As System.Nullable(Of Integer)
	
	Private _NextRoundSuccess_ID As System.Nullable(Of Integer)
	
	Private _CreatureOn_ID As System.Nullable(Of Integer)
	
	Private _WeaponUsed_ID As System.Nullable(Of Integer)
	
	Private _ParentAttacks As EntitySet(Of Attack)
	
	Private _ParentAttacks2 As EntitySet(Of Attack)
	
	Private _AdditionalCrits As EntitySet(Of AttacksAddCrit)
	
	Private _Actions As EntitySet(Of Action)
	
	Private _ActorsAttacks As EntitySet(Of ActorsAttack)
	
	Private _NextRoundSuccess As EntityRef(Of Attack)
	
	Private _ThisRoundSuccess As EntityRef(Of Attack)
	
	Private _WeaponUsed As EntityRef(Of Weapon)
	
	Private _Creature As EntityRef(Of Creature)
	
	Private _SizeRating As EntityRef(Of SizeRating)
	
	Private _CriticalUseInstead As EntityRef(Of CriticalType)
	
	Private _AttackType As EntityRef(Of AttackType)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnPercentChanceChanging(value As Double)
    End Sub
    Partial Private Sub OnPercentChanceChanged()
    End Sub
    Partial Private Sub OnOBChanging(value As Integer)
    End Sub
    Partial Private Sub OnOBChanged()
    End Sub
    Partial Private Sub OnMaxOBChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaxOBChanged()
    End Sub
    Partial Private Sub OnType_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnType_IDChanged()
    End Sub
    Partial Private Sub OnSize_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSize_IDChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    Partial Private Sub OnDamageMultiplierChanging(value As Integer)
    End Sub
    Partial Private Sub OnDamageMultiplierChanged()
    End Sub
    Partial Private Sub OnCriticalLevelChanging(value As CriticalLevels)
    End Sub
    Partial Private Sub OnCriticalLevelChanged()
    End Sub
    Partial Private Sub OnAdditionalCritsIsOrChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAdditionalCritsIsOrChanged()
    End Sub
    Partial Private Sub OnUseCriticalInstead_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUseCriticalInstead_IDChanged()
    End Sub
    Partial Private Sub OnThisRoundSuccess_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnThisRoundSuccess_IDChanged()
    End Sub
    Partial Private Sub OnNextRoundSuccess_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNextRoundSuccess_IDChanged()
    End Sub
    Partial Private Sub OnCreatureOn_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCreatureOn_IDChanged()
    End Sub
    Partial Private Sub OnWeaponUsed_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnWeaponUsed_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PercentChance", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property PercentChance() As Double
		Get
			Return Me._PercentChance
		End Get
		Set
			If ((Me._PercentChance = value)  _
						= false) Then
				Me.OnPercentChanceChanging(value)
				Me.SendPropertyChanging
				Me._PercentChance = value
				Me.SendPropertyChanged("PercentChance")
				Me.OnPercentChanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OB", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property OB() As Integer
		Get
			Return Me._OB
		End Get
		Set
			If ((Me._OB = value)  _
						= false) Then
				Me.OnOBChanging(value)
				Me.SendPropertyChanging
				Me._OB = value
				Me.SendPropertyChanged("OB")
				Me.OnOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxOB", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property MaxOB() As Integer
		Get
			Return Me._MaxOB
		End Get
		Set
			If ((Me._MaxOB = value)  _
						= false) Then
				Me.OnMaxOBChanging(value)
				Me.SendPropertyChanging
				Me._MaxOB = value
				Me.SendPropertyChanged("MaxOB")
				Me.OnMaxOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property Type_ID() As System.Nullable(Of Integer)
		Get
			Return Me._Type
		End Get
		Set
			If (Me._Type.Equals(value) = false) Then
				If Me._AttackType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnType_IDChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type_ID")
				Me.OnType_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Size", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property Size_ID() As System.Nullable(Of Integer)
		Get
			Return Me._Size
		End Get
		Set
			If (Me._Size.Equals(value) = false) Then
				If Me._SizeRating.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSize_IDChanging(value)
				Me.SendPropertyChanging
				Me._Size = value
				Me.SendPropertyChanged("Size_ID")
				Me.OnSize_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property Number() As Integer
		Get
			Return Me._Number
		End Get
		Set
			If ((Me._Number = value)  _
						= false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DamageMultiplier", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property DamageMultiplier() As Integer
		Get
			Return Me._DamageMultiplier
		End Get
		Set
			If ((Me._DamageMultiplier = value)  _
						= false) Then
				Me.OnDamageMultiplierChanging(value)
				Me.SendPropertyChanging
				Me._DamageMultiplier = value
				Me.SendPropertyChanged("DamageMultiplier")
				Me.OnDamageMultiplierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CriticalLevel", DbType:="NVarChar(50)", CanBeNull:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property CriticalLevel() As CriticalLevels
		Get
			Return Me._CriticalLevel
		End Get
		Set
			If (Object.Equals(Me._CriticalLevel, value) = false) Then
				Me.OnCriticalLevelChanging(value)
				Me.SendPropertyChanging
				Me._CriticalLevel = value
				Me.SendPropertyChanged("CriticalLevel")
				Me.OnCriticalLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdditionalCritsIsOr", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property AdditionalCritsIsOr() As Boolean
		Get
			Return Me._AdditionalCritsIsOr
		End Get
		Set
			If ((Me._AdditionalCritsIsOr = value)  _
						= false) Then
				Me.OnAdditionalCritsIsOrChanging(value)
				Me.SendPropertyChanging
				Me._AdditionalCritsIsOr = value
				Me.SendPropertyChanged("AdditionalCritsIsOr")
				Me.OnAdditionalCritsIsOrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UseCriticalInstead", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property UseCriticalInstead_ID() As System.Nullable(Of Integer)
		Get
			Return Me._UseCriticalInstead
		End Get
		Set
			If (Me._UseCriticalInstead.Equals(value) = false) Then
				If Me._CriticalUseInstead.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUseCriticalInstead_IDChanging(value)
				Me.SendPropertyChanging
				Me._UseCriticalInstead = value
				Me.SendPropertyChanged("UseCriticalInstead_ID")
				Me.OnUseCriticalInstead_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThisRoundSuccess_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property ThisRoundSuccess_ID() As System.Nullable(Of Integer)
		Get
			Return Me._ThisRoundSuccess_ID
		End Get
		Set
			If (Me._ThisRoundSuccess_ID.Equals(value) = false) Then
				If Me._ThisRoundSuccess.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnThisRoundSuccess_IDChanging(value)
				Me.SendPropertyChanging
				Me._ThisRoundSuccess_ID = value
				Me.SendPropertyChanged("ThisRoundSuccess_ID")
				Me.OnThisRoundSuccess_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NextRoundSuccess_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property NextRoundSuccess_ID() As System.Nullable(Of Integer)
		Get
			Return Me._NextRoundSuccess_ID
		End Get
		Set
			If (Me._NextRoundSuccess_ID.Equals(value) = false) Then
				If Me._NextRoundSuccess.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNextRoundSuccess_IDChanging(value)
				Me.SendPropertyChanging
				Me._NextRoundSuccess_ID = value
				Me.SendPropertyChanged("NextRoundSuccess_ID")
				Me.OnNextRoundSuccess_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatureOn_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property CreatureOn_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CreatureOn_ID
		End Get
		Set
			If (Me._CreatureOn_ID.Equals(value) = false) Then
				If Me._Creature.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatureOn_IDChanging(value)
				Me.SendPropertyChanging
				Me._CreatureOn_ID = value
				Me.SendPropertyChanged("CreatureOn_ID")
				Me.OnCreatureOn_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeaponUsed_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property WeaponUsed_ID() As System.Nullable(Of Integer)
		Get
			Return Me._WeaponUsed_ID
		End Get
		Set
			If (Me._WeaponUsed_ID.Equals(value) = false) Then
				If Me._WeaponUsed.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWeaponUsed_IDChanging(value)
				Me.SendPropertyChanging
				Me._WeaponUsed_ID = value
				Me.SendPropertyChanged("WeaponUsed_ID")
				Me.OnWeaponUsed_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Attack_Attack", Storage:="_ParentAttacks", ThisKey:="ID", OtherKey:="NextRoundSuccess_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16, EmitDefaultValue:=false)>  _
	Public Property ParentAttacks() As EntitySet(Of Attack)
		Get
			If (Me.serializing  _
						AndAlso (Me._ParentAttacks.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ParentAttacks
		End Get
		Set
			Me._ParentAttacks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Attack_Attack1", Storage:="_ParentAttacks2", ThisKey:="ID", OtherKey:="ThisRoundSuccess_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17, EmitDefaultValue:=false)>  _
	Public Property ParentAttacks2() As EntitySet(Of Attack)
		Get
			If (Me.serializing  _
						AndAlso (Me._ParentAttacks2.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ParentAttacks2
		End Get
		Set
			Me._ParentAttacks2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Attack_AttacksAddCrit", Storage:="_AdditionalCrits", ThisKey:="ID", OtherKey:="AttackID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18, EmitDefaultValue:=false)>  _
	Public Property AdditionalCrits() As EntitySet(Of AttacksAddCrit)
		Get
			If (Me.serializing  _
						AndAlso (Me._AdditionalCrits.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._AdditionalCrits
		End Get
		Set
			Me._AdditionalCrits.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Attack_Action", Storage:="_Actions", ThisKey:="ID", OtherKey:="CurrentAttack_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19, EmitDefaultValue:=false)>  _
	Public Property Actions() As EntitySet(Of Action)
		Get
			If (Me.serializing  _
						AndAlso (Me._Actions.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Actions
		End Get
		Set
			Me._Actions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Attack_ActorsAttack", Storage:="_ActorsAttacks", ThisKey:="ID", OtherKey:="Attack_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20, EmitDefaultValue:=false)>  _
	Public Property ActorsAttacks() As EntitySet(Of ActorsAttack)
		Get
			If (Me.serializing  _
						AndAlso (Me._ActorsAttacks.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ActorsAttacks
		End Get
		Set
			Me._ActorsAttacks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Attack_Attack", Storage:="_NextRoundSuccess", ThisKey:="NextRoundSuccess_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property NextRoundSuccess() As Attack
		Get
			Return Me._NextRoundSuccess.Entity
		End Get
		Set
			Dim previousValue As Attack = Me._NextRoundSuccess.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NextRoundSuccess.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NextRoundSuccess.Entity = Nothing
					previousValue.ParentAttacks.Remove(Me)
				End If
				Me._NextRoundSuccess.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ParentAttacks.Add(Me)
					Me._NextRoundSuccess_ID = value.ID
				Else
					Me._NextRoundSuccess_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NextRoundSuccess")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Attack_Attack1", Storage:="_ThisRoundSuccess", ThisKey:="ThisRoundSuccess_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property ThisRoundSuccess() As Attack
		Get
			Return Me._ThisRoundSuccess.Entity
		End Get
		Set
			Dim previousValue As Attack = Me._ThisRoundSuccess.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ThisRoundSuccess.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ThisRoundSuccess.Entity = Nothing
					previousValue.ParentAttacks2.Remove(Me)
				End If
				Me._ThisRoundSuccess.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ParentAttacks2.Add(Me)
					Me._ThisRoundSuccess_ID = value.ID
				Else
					Me._ThisRoundSuccess_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ThisRoundSuccess")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Weapon_Attack", Storage:="_WeaponUsed", ThisKey:="WeaponUsed_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property WeaponUsed() As Weapon
		Get
			Return Me._WeaponUsed.Entity
		End Get
		Set
			Dim previousValue As Weapon = Me._WeaponUsed.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WeaponUsed.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WeaponUsed.Entity = Nothing
					previousValue.Attacks.Remove(Me)
				End If
				Me._WeaponUsed.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Attacks.Add(Me)
					Me._WeaponUsed_ID = value.ID
				Else
					Me._WeaponUsed_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("WeaponUsed")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Creature_Attack", Storage:="_Creature", ThisKey:="CreatureOn_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Creature() As Creature
		Get
			Return Me._Creature.Entity
		End Get
		Set
			Dim previousValue As Creature = Me._Creature.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Creature.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Creature.Entity = Nothing
					previousValue.Attacks.Remove(Me)
				End If
				Me._Creature.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Attacks.Add(Me)
					Me._CreatureOn_ID = value.ID
				Else
					Me._CreatureOn_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Creature")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SizeRating_Attack", Storage:="_SizeRating", ThisKey:="Size_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property SizeRating() As SizeRating
		Get
			Return Me._SizeRating.Entity
		End Get
		Set
			Dim previousValue As SizeRating = Me._SizeRating.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SizeRating.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SizeRating.Entity = Nothing
					previousValue.Attacks.Remove(Me)
				End If
				Me._SizeRating.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Attacks.Add(Me)
					Me._Size = value.ID
				Else
					Me._Size = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SizeRating")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CriticalType_Attack", Storage:="_CriticalUseInstead", ThisKey:="UseCriticalInstead_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property CriticalUseInstead() As CriticalType
		Get
			Return Me._CriticalUseInstead.Entity
		End Get
		Set
			Dim previousValue As CriticalType = Me._CriticalUseInstead.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CriticalUseInstead.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CriticalUseInstead.Entity = Nothing
					previousValue.Attacks.Remove(Me)
				End If
				Me._CriticalUseInstead.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Attacks.Add(Me)
					Me._UseCriticalInstead = value.ID
				Else
					Me._UseCriticalInstead = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CriticalUseInstead")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AttackType_Attack", Storage:="_AttackType", ThisKey:="Type_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AttackType() As AttackType
		Get
			Return Me._AttackType.Entity
		End Get
		Set
			Dim previousValue As AttackType = Me._AttackType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AttackType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AttackType.Entity = Nothing
					previousValue.Attacks.Remove(Me)
				End If
				Me._AttackType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Attacks.Add(Me)
					Me._Type = value.ID
				Else
					Me._Type = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("AttackType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ParentAttacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.NextRoundSuccess = Me
	End Sub
	
	Private Sub detach_ParentAttacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.NextRoundSuccess = Nothing
	End Sub
	
	Private Sub attach_ParentAttacks2(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.ThisRoundSuccess = Me
	End Sub
	
	Private Sub detach_ParentAttacks2(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.ThisRoundSuccess = Nothing
	End Sub
	
	Private Sub attach_AdditionalCrits(ByVal entity As AttacksAddCrit)
		Me.SendPropertyChanging
		entity.Attack = Me
	End Sub
	
	Private Sub detach_AdditionalCrits(ByVal entity As AttacksAddCrit)
		Me.SendPropertyChanging
		entity.Attack = Nothing
	End Sub
	
	Private Sub attach_Actions(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.CurrentAttack = Me
	End Sub
	
	Private Sub detach_Actions(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.CurrentAttack = Nothing
	End Sub
	
	Private Sub attach_ActorsAttacks(ByVal entity As ActorsAttack)
		Me.SendPropertyChanging
		entity.Attack = Me
	End Sub
	
	Private Sub detach_ActorsAttacks(ByVal entity As ActorsAttack)
		Me.SendPropertyChanging
		entity.Attack = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ParentAttacks = New EntitySet(Of Attack)(AddressOf Me.attach_ParentAttacks, AddressOf Me.detach_ParentAttacks)
		Me._ParentAttacks2 = New EntitySet(Of Attack)(AddressOf Me.attach_ParentAttacks2, AddressOf Me.detach_ParentAttacks2)
		Me._AdditionalCrits = New EntitySet(Of AttacksAddCrit)(AddressOf Me.attach_AdditionalCrits, AddressOf Me.detach_AdditionalCrits)
		Me._Actions = New EntitySet(Of Action)(AddressOf Me.attach_Actions, AddressOf Me.detach_Actions)
		Me._ActorsAttacks = New EntitySet(Of ActorsAttack)(AddressOf Me.attach_ActorsAttacks, AddressOf Me.detach_ActorsAttacks)
		Me._NextRoundSuccess = CType(Nothing, EntityRef(Of Attack))
		Me._ThisRoundSuccess = CType(Nothing, EntityRef(Of Attack))
		Me._WeaponUsed = CType(Nothing, EntityRef(Of Weapon))
		Me._Creature = CType(Nothing, EntityRef(Of Creature))
		Me._SizeRating = CType(Nothing, EntityRef(Of SizeRating))
		Me._CriticalUseInstead = CType(Nothing, EntityRef(Of CriticalType))
		Me._AttackType = CType(Nothing, EntityRef(Of AttackType))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AttacksAddCrits"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class AttacksAddCrit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _AttackID As System.Nullable(Of Integer)
	
	Private _Critical As System.Nullable(Of Integer)
	
	Private _Attack As EntityRef(Of Attack)
	
	Private _CriticalType As EntityRef(Of CriticalType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnAttackIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAttackIDChanged()
    End Sub
    Partial Private Sub OnCritical_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCritical_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AttackID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property AttackID() As System.Nullable(Of Integer)
		Get
			Return Me._AttackID
		End Get
		Set
			If (Me._AttackID.Equals(value) = false) Then
				If Me._Attack.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAttackIDChanging(value)
				Me.SendPropertyChanging
				Me._AttackID = value
				Me.SendPropertyChanged("AttackID")
				Me.OnAttackIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Critical", DbType:="int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Critical_ID() As System.Nullable(Of Integer)
		Get
			Return Me._Critical
		End Get
		Set
			If (Me._Critical.Equals(value) = false) Then
				If Me._CriticalType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCritical_IDChanging(value)
				Me.SendPropertyChanging
				Me._Critical = value
				Me.SendPropertyChanged("Critical_ID")
				Me.OnCritical_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Attack_AttacksAddCrit", Storage:="_Attack", ThisKey:="AttackID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Attack() As Attack
		Get
			Return Me._Attack.Entity
		End Get
		Set
			Dim previousValue As Attack = Me._Attack.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Attack.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Attack.Entity = Nothing
					previousValue.AdditionalCrits.Remove(Me)
				End If
				Me._Attack.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AdditionalCrits.Add(Me)
					Me._AttackID = value.ID
				Else
					Me._AttackID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Attack")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CriticalType_AttacksAddCrit", Storage:="_CriticalType", ThisKey:="Critical_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property CriticalType() As CriticalType
		Get
			Return Me._CriticalType.Entity
		End Get
		Set
			Dim previousValue As CriticalType = Me._CriticalType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CriticalType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CriticalType.Entity = Nothing
					previousValue.AttacksAddCrits.Remove(Me)
				End If
				Me._CriticalType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AttacksAddCrits.Add(Me)
					Me._Critical = value.ID
				Else
					Me._Critical = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CriticalType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Attack = CType(Nothing, EntityRef(Of Attack))
		Me._CriticalType = CType(Nothing, EntityRef(Of CriticalType))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Books"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Book
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Creatures As EntitySet(Of Creature)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Book_Creature", Storage:="_Creatures", ThisKey:="ID", OtherKey:="Book_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property Creatures() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures
		End Get
		Set
			Me._Creatures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.Book = Me
	End Sub
	
	Private Sub detach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.Book = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Creatures = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures, AddressOf Me.detach_Creatures)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Characters"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Character
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Level As Integer
	
	Private _BaseInititive As Integer
	
	Private _HitPoints As Integer
	
	Private _ExhaustionPoints As Integer
	
	Private _PowerPoints As Integer
	
	Private _Type As CharacterType
	
	Private _StrengthBonus As Integer
	
	Private _PercentRequiredAdrenalDB As Double
	
	Private _WalkSpeed As Double
	
	Private _Weapons As EntitySet(Of Weapon)
	
	Private _Armors As EntitySet(Of Armor)
	
	Private _Actors As EntitySet(Of Actor)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnLevelChanging(value As Integer)
    End Sub
    Partial Private Sub OnLevelChanged()
    End Sub
    Partial Private Sub OnBaseInititiveChanging(value As Integer)
    End Sub
    Partial Private Sub OnBaseInititiveChanged()
    End Sub
    Partial Private Sub OnHitPointsChanging(value As Integer)
    End Sub
    Partial Private Sub OnHitPointsChanged()
    End Sub
    Partial Private Sub OnExhaustionPointsChanging(value As Integer)
    End Sub
    Partial Private Sub OnExhaustionPointsChanged()
    End Sub
    Partial Private Sub OnPowerPointsChanging(value As Integer)
    End Sub
    Partial Private Sub OnPowerPointsChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As CharacterType)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnStrengthBonusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStrengthBonusChanged()
    End Sub
    Partial Private Sub OnPercentRequiredAdrenalDBChanging(value As Double)
    End Sub
    Partial Private Sub OnPercentRequiredAdrenalDBChanged()
    End Sub
    Partial Private Sub OnWalkSpeedChanging(value As Double)
    End Sub
    Partial Private Sub OnWalkSpeedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Level]", Storage:="_Level", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Level() As Integer
		Get
			Return Me._Level
		End Get
		Set
			If ((Me._Level = value)  _
						= false) Then
				Me.OnLevelChanging(value)
				Me.SendPropertyChanging
				Me._Level = value
				Me.SendPropertyChanged("Level")
				Me.OnLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseInititive", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property BaseInititive() As Integer
		Get
			Return Me._BaseInititive
		End Get
		Set
			If ((Me._BaseInititive = value)  _
						= false) Then
				Me.OnBaseInititiveChanging(value)
				Me.SendPropertyChanging
				Me._BaseInititive = value
				Me.SendPropertyChanged("BaseInititive")
				Me.OnBaseInititiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HitPoints", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property HitPoints() As Integer
		Get
			Return Me._HitPoints
		End Get
		Set
			If ((Me._HitPoints = value)  _
						= false) Then
				Me.OnHitPointsChanging(value)
				Me.SendPropertyChanging
				Me._HitPoints = value
				Me.SendPropertyChanged("HitPoints")
				Me.OnHitPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExhaustionPoints", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property ExhaustionPoints() As Integer
		Get
			Return Me._ExhaustionPoints
		End Get
		Set
			If ((Me._ExhaustionPoints = value)  _
						= false) Then
				Me.OnExhaustionPointsChanging(value)
				Me.SendPropertyChanging
				Me._ExhaustionPoints = value
				Me.SendPropertyChanged("ExhaustionPoints")
				Me.OnExhaustionPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PowerPoints", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property PowerPoints() As Integer
		Get
			Return Me._PowerPoints
		End Get
		Set
			If ((Me._PowerPoints = value)  _
						= false) Then
				Me.OnPowerPointsChanging(value)
				Me.SendPropertyChanging
				Me._PowerPoints = value
				Me.SendPropertyChanged("PowerPoints")
				Me.OnPowerPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property Type() As CharacterType
		Get
			Return Me._Type
		End Get
		Set
			If (Object.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StrengthBonus", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property StrengthBonus() As Integer
		Get
			Return Me._StrengthBonus
		End Get
		Set
			If ((Me._StrengthBonus = value)  _
						= false) Then
				Me.OnStrengthBonusChanging(value)
				Me.SendPropertyChanging
				Me._StrengthBonus = value
				Me.SendPropertyChanged("StrengthBonus")
				Me.OnStrengthBonusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PercentRequiredAdrenalDB", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property PercentRequiredAdrenalDB() As Double
		Get
			Return Me._PercentRequiredAdrenalDB
		End Get
		Set
			If ((Me._PercentRequiredAdrenalDB = value)  _
						= false) Then
				Me.OnPercentRequiredAdrenalDBChanging(value)
				Me.SendPropertyChanging
				Me._PercentRequiredAdrenalDB = value
				Me.SendPropertyChanged("PercentRequiredAdrenalDB")
				Me.OnPercentRequiredAdrenalDBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkSpeed", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property WalkSpeed() As Double
		Get
			Return Me._WalkSpeed
		End Get
		Set
			If ((Me._WalkSpeed = value)  _
						= false) Then
				Me.OnWalkSpeedChanging(value)
				Me.SendPropertyChanging
				Me._WalkSpeed = value
				Me.SendPropertyChanged("WalkSpeed")
				Me.OnWalkSpeedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Character_Weapon", Storage:="_Weapons", ThisKey:="ID", OtherKey:="TiedToID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12, EmitDefaultValue:=false)>  _
	Public Property Weapons() As EntitySet(Of Weapon)
		Get
			If (Me.serializing  _
						AndAlso (Me._Weapons.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Weapons
		End Get
		Set
			Me._Weapons.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Character_Armor", Storage:="_Armors", ThisKey:="ID", OtherKey:="TiedToID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13, EmitDefaultValue:=false)>  _
	Public Property Armors() As EntitySet(Of Armor)
		Get
			If (Me.serializing  _
						AndAlso (Me._Armors.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Armors
		End Get
		Set
			Me._Armors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Character_Actor", Storage:="_Actors", ThisKey:="ID", OtherKey:="BaseCharacter_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14, EmitDefaultValue:=false)>  _
	Public Property Actors() As EntitySet(Of Actor)
		Get
			If (Me.serializing  _
						AndAlso (Me._Actors.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Actors
		End Get
		Set
			Me._Actors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Weapons(ByVal entity As Weapon)
		Me.SendPropertyChanging
		entity.Character = Me
	End Sub
	
	Private Sub detach_Weapons(ByVal entity As Weapon)
		Me.SendPropertyChanging
		entity.Character = Nothing
	End Sub
	
	Private Sub attach_Armors(ByVal entity As Armor)
		Me.SendPropertyChanging
		entity.Character = Me
	End Sub
	
	Private Sub detach_Armors(ByVal entity As Armor)
		Me.SendPropertyChanging
		entity.Character = Nothing
	End Sub
	
	Private Sub attach_Actors(ByVal entity As Actor)
		Me.SendPropertyChanging
		entity.Character = Me
	End Sub
	
	Private Sub detach_Actors(ByVal entity As Actor)
		Me.SendPropertyChanging
		entity.Character = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Weapons = New EntitySet(Of Weapon)(AddressOf Me.attach_Weapons, AddressOf Me.detach_Weapons)
		Me._Armors = New EntitySet(Of Armor)(AddressOf Me.attach_Armors, AddressOf Me.detach_Armors)
		Me._Actors = New EntitySet(Of Actor)(AddressOf Me.attach_Actors, AddressOf Me.detach_Actors)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PsychicRefractoryPeriodMod"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class PsychicRefractoryPeriodChart
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _RoundNumber As System.Nullable(Of Integer)
	
	Private _LevelMin As System.Nullable(Of Integer)
	
	Private _LevelMax As System.Nullable(Of Integer)
	
	Private _Mod As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnRoundNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRoundNumberChanged()
    End Sub
    Partial Private Sub OnLevelMinChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLevelMinChanged()
    End Sub
    Partial Private Sub OnLevelMaxChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLevelMaxChanged()
    End Sub
    Partial Private Sub OnModChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoundNumber", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property RoundNumber() As System.Nullable(Of Integer)
		Get
			Return Me._RoundNumber
		End Get
		Set
			If (Me._RoundNumber.Equals(value) = false) Then
				Me.OnRoundNumberChanging(value)
				Me.SendPropertyChanging
				Me._RoundNumber = value
				Me.SendPropertyChanged("RoundNumber")
				Me.OnRoundNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LevelMin", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property LevelMin() As System.Nullable(Of Integer)
		Get
			Return Me._LevelMin
		End Get
		Set
			If (Me._LevelMin.Equals(value) = false) Then
				Me.OnLevelMinChanging(value)
				Me.SendPropertyChanging
				Me._LevelMin = value
				Me.SendPropertyChanged("LevelMin")
				Me.OnLevelMinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LevelMax", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property LevelMax() As System.Nullable(Of Integer)
		Get
			Return Me._LevelMax
		End Get
		Set
			If (Me._LevelMax.Equals(value) = false) Then
				Me.OnLevelMaxChanging(value)
				Me.SendPropertyChanging
				Me._LevelMax = value
				Me.SendPropertyChanged("LevelMax")
				Me.OnLevelMaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Mod", Storage:="_Mod", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property [Mod]() As System.Nullable(Of Integer)
		Get
			Return Me._Mod
		End Get
		Set
			If (Me._Mod.Equals(value) = false) Then
				Me.OnModChanging(value)
				Me.SendPropertyChanging
				Me._Mod = value
				Me.SendPropertyChanged("[Mod]")
				Me.OnModChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Weapons"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Weapon
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _MinWeight As Integer
	
	Private _MaxWeight As Integer
	
	Private _Weight As Integer
	
	Private _Bonus As Integer
	
	Private _Is2Handed As Boolean
	
	Private _OB As Integer
	
	Private _TiedToID As System.Nullable(Of Integer)
	
	Private _Attacks As EntitySet(Of Attack)
	
	Private _Character As EntityRef(Of Character)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnMinWeightChanging(value As Integer)
    End Sub
    Partial Private Sub OnMinWeightChanged()
    End Sub
    Partial Private Sub OnMaxWeightChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaxWeightChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    Partial Private Sub OnBonusChanging(value As Integer)
    End Sub
    Partial Private Sub OnBonusChanged()
    End Sub
    Partial Private Sub OnIs2HandedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIs2HandedChanged()
    End Sub
    Partial Private Sub OnOBChanging(value As Integer)
    End Sub
    Partial Private Sub OnOBChanged()
    End Sub
    Partial Private Sub OnTiedToIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTiedToIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(500)", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinWeight", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property MinWeight() As Integer
		Get
			Return Me._MinWeight
		End Get
		Set
			If ((Me._MinWeight = value)  _
						= false) Then
				Me.OnMinWeightChanging(value)
				Me.SendPropertyChanging
				Me._MinWeight = value
				Me.SendPropertyChanged("MinWeight")
				Me.OnMinWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxWeight", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property MaxWeight() As Integer
		Get
			Return Me._MaxWeight
		End Get
		Set
			If ((Me._MaxWeight = value)  _
						= false) Then
				Me.OnMaxWeightChanging(value)
				Me.SendPropertyChanging
				Me._MaxWeight = value
				Me.SendPropertyChanged("MaxWeight")
				Me.OnMaxWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property Weight() As Integer
		Get
			Return Me._Weight
		End Get
		Set
			If ((Me._Weight = value)  _
						= false) Then
				Me.OnWeightChanging(value)
				Me.SendPropertyChanging
				Me._Weight = value
				Me.SendPropertyChanged("Weight")
				Me.OnWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bonus", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property Bonus() As Integer
		Get
			Return Me._Bonus
		End Get
		Set
			If ((Me._Bonus = value)  _
						= false) Then
				Me.OnBonusChanging(value)
				Me.SendPropertyChanging
				Me._Bonus = value
				Me.SendPropertyChanged("Bonus")
				Me.OnBonusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Is2Handed", DbType:="Bit"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property Is2Handed() As Boolean
		Get
			Return Me._Is2Handed
		End Get
		Set
			If ((Me._Is2Handed = value)  _
						= false) Then
				Me.OnIs2HandedChanging(value)
				Me.SendPropertyChanging
				Me._Is2Handed = value
				Me.SendPropertyChanged("Is2Handed")
				Me.OnIs2HandedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OB", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property OB() As Integer
		Get
			Return Me._OB
		End Get
		Set
			If ((Me._OB = value)  _
						= false) Then
				Me.OnOBChanging(value)
				Me.SendPropertyChanging
				Me._OB = value
				Me.SendPropertyChanged("OB")
				Me.OnOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TiedToID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property TiedToID() As System.Nullable(Of Integer)
		Get
			Return Me._TiedToID
		End Get
		Set
			If (Me._TiedToID.Equals(value) = false) Then
				If Me._Character.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTiedToIDChanging(value)
				Me.SendPropertyChanging
				Me._TiedToID = value
				Me.SendPropertyChanged("TiedToID")
				Me.OnTiedToIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Weapon_Attack", Storage:="_Attacks", ThisKey:="ID", OtherKey:="WeaponUsed_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10, EmitDefaultValue:=false)>  _
	Public Property Attacks() As EntitySet(Of Attack)
		Get
			If (Me.serializing  _
						AndAlso (Me._Attacks.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Attacks
		End Get
		Set
			Me._Attacks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Character_Weapon", Storage:="_Character", ThisKey:="TiedToID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Character() As Character
		Get
			Return Me._Character.Entity
		End Get
		Set
			Dim previousValue As Character = Me._Character.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Character.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Character.Entity = Nothing
					previousValue.Weapons.Remove(Me)
				End If
				Me._Character.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Weapons.Add(Me)
					Me._TiedToID = value.ID
				Else
					Me._TiedToID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Character")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Attacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.WeaponUsed = Me
	End Sub
	
	Private Sub detach_Attacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.WeaponUsed = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Attacks = New EntitySet(Of Attack)(AddressOf Me.attach_Attacks, AddressOf Me.detach_Attacks)
		Me._Character = CType(Nothing, EntityRef(Of Character))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Armors"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Armor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Type As Integer
	
	Private _Description As String
	
	Private _MovingManeuverMod As Integer
	
	Private _DB As Integer
	
	Private _BaseArmor_ID As System.Nullable(Of Integer)
	
	Private _TiedToID As System.Nullable(Of Integer)
	
	Private _Actors As EntitySet(Of Actor)
	
	Private _Character As EntityRef(Of Character)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnMovingManeuverModChanging(value As Integer)
    End Sub
    Partial Private Sub OnMovingManeuverModChanged()
    End Sub
    Partial Private Sub OnDBChanging(value As Integer)
    End Sub
    Partial Private Sub OnDBChanged()
    End Sub
    Partial Private Sub OnBaseArmor_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBaseArmor_IDChanged()
    End Sub
    Partial Private Sub OnTiedToIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTiedToIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Type() As Integer
		Get
			Return Me._Type
		End Get
		Set
			If ((Me._Type = value)  _
						= false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MovingManeuverMod", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property MovingManeuverMod() As Integer
		Get
			Return Me._MovingManeuverMod
		End Get
		Set
			If ((Me._MovingManeuverMod = value)  _
						= false) Then
				Me.OnMovingManeuverModChanging(value)
				Me.SendPropertyChanging
				Me._MovingManeuverMod = value
				Me.SendPropertyChanged("MovingManeuverMod")
				Me.OnMovingManeuverModChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property DB() As Integer
		Get
			Return Me._DB
		End Get
		Set
			If ((Me._DB = value)  _
						= false) Then
				Me.OnDBChanging(value)
				Me.SendPropertyChanging
				Me._DB = value
				Me.SendPropertyChanged("DB")
				Me.OnDBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseArmor_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property BaseArmor_ID() As System.Nullable(Of Integer)
		Get
			Return Me._BaseArmor_ID
		End Get
		Set
			If (Me._BaseArmor_ID.Equals(value) = false) Then
				Me.OnBaseArmor_IDChanging(value)
				Me.SendPropertyChanging
				Me._BaseArmor_ID = value
				Me.SendPropertyChanged("BaseArmor_ID")
				Me.OnBaseArmor_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TiedToID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property TiedToID() As System.Nullable(Of Integer)
		Get
			Return Me._TiedToID
		End Get
		Set
			If (Me._TiedToID.Equals(value) = false) Then
				If Me._Character.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTiedToIDChanging(value)
				Me.SendPropertyChanging
				Me._TiedToID = value
				Me.SendPropertyChanged("TiedToID")
				Me.OnTiedToIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Armor_Actor", Storage:="_Actors", ThisKey:="ID", OtherKey:="CurrentArmor_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8, EmitDefaultValue:=false)>  _
	Public Property Actors() As EntitySet(Of Actor)
		Get
			If (Me.serializing  _
						AndAlso (Me._Actors.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Actors
		End Get
		Set
			Me._Actors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Character_Armor", Storage:="_Character", ThisKey:="TiedToID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Character() As Character
		Get
			Return Me._Character.Entity
		End Get
		Set
			Dim previousValue As Character = Me._Character.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Character.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Character.Entity = Nothing
					previousValue.Armors.Remove(Me)
				End If
				Me._Character.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Armors.Add(Me)
					Me._TiedToID = value.ID
				Else
					Me._TiedToID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Character")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Actors(ByVal entity As Actor)
		Me.SendPropertyChanging
		entity.CurrentArmor = Me
	End Sub
	
	Private Sub detach_Actors(ByVal entity As Actor)
		Me.SendPropertyChanging
		entity.CurrentArmor = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Actors = New EntitySet(Of Actor)(AddressOf Me.attach_Actors, AddressOf Me.detach_Actors)
		Me._Character = CType(Nothing, EntityRef(Of Character))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Users"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class SystemUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _UserName As String
	
	Private _Games As EntitySet(Of Game)
	
	Private _GamesPlayers As EntitySet(Of GamesPlayer)
	
	Private _Actors As EntitySet(Of Actor)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SystemUser_Game", Storage:="_Games", ThisKey:="UserId", OtherKey:="GM_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property Games() As EntitySet(Of Game)
		Get
			If (Me.serializing  _
						AndAlso (Me._Games.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Games
		End Get
		Set
			Me._Games.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SystemUser_GamesPlayer", Storage:="_GamesPlayers", ThisKey:="UserId", OtherKey:="Player_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property GamesPlayers() As EntitySet(Of GamesPlayer)
		Get
			If (Me.serializing  _
						AndAlso (Me._GamesPlayers.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._GamesPlayers
		End Get
		Set
			Me._GamesPlayers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SystemUser_Actor", Storage:="_Actors", ThisKey:="UserId", OtherKey:="Player_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property Actors() As EntitySet(Of Actor)
		Get
			If (Me.serializing  _
						AndAlso (Me._Actors.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Actors
		End Get
		Set
			Me._Actors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Games(ByVal entity As Game)
		Me.SendPropertyChanging
		entity.GM = Me
	End Sub
	
	Private Sub detach_Games(ByVal entity As Game)
		Me.SendPropertyChanging
		entity.GM = Nothing
	End Sub
	
	Private Sub attach_GamesPlayers(ByVal entity As GamesPlayer)
		Me.SendPropertyChanging
		entity.Player = Me
	End Sub
	
	Private Sub detach_GamesPlayers(ByVal entity As GamesPlayer)
		Me.SendPropertyChanging
		entity.Player = Nothing
	End Sub
	
	Private Sub attach_Actors(ByVal entity As Actor)
		Me.SendPropertyChanging
		entity.Player = Me
	End Sub
	
	Private Sub detach_Actors(ByVal entity As Actor)
		Me.SendPropertyChanging
		entity.Player = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Games = New EntitySet(Of Game)(AddressOf Me.attach_Games, AddressOf Me.detach_Games)
		Me._GamesPlayers = New EntitySet(Of GamesPlayer)(AddressOf Me.attach_GamesPlayers, AddressOf Me.detach_GamesPlayers)
		Me._Actors = New EntitySet(Of Actor)(AddressOf Me.attach_Actors, AddressOf Me.detach_Actors)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_Pace"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Pace
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Abbreviation As String
	
	Private _Creatures As EntitySet(Of Creature)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbbreviationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abbreviation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Abbreviation() As String
		Get
			Return Me._Abbreviation
		End Get
		Set
			If (String.Equals(Me._Abbreviation, value) = false) Then
				Me.OnAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._Abbreviation = value
				Me.SendPropertyChanged("Abbreviation")
				Me.OnAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pace_Creature", Storage:="_Creatures", ThisKey:="ID", OtherKey:="MaxPace_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property Creatures() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures
		End Get
		Set
			Me._Creatures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.MaxPace = Me
	End Sub
	
	Private Sub detach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.MaxPace = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Creatures = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures, AddressOf Me.detach_Creatures)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_SpeedChart"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class SpeedChart
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Abbreviation As String
	
	Private _Name As String
	
	Private _MSBaseDB As Integer
	
	Private _MSFleeEvade As Integer
	
	Private _AQChargeLunge As Integer
	
	Private _AQInitiative As Integer
	
	Private _Creatures As EntitySet(Of Creature)
	
	Private _Creatures1 As EntitySet(Of Creature)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbbreviationChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnMSBaseDBChanging(value As Integer)
    End Sub
    Partial Private Sub OnMSBaseDBChanged()
    End Sub
    Partial Private Sub OnMSFleeEvadeChanging(value As Integer)
    End Sub
    Partial Private Sub OnMSFleeEvadeChanged()
    End Sub
    Partial Private Sub OnAQChargeLungeChanging(value As Integer)
    End Sub
    Partial Private Sub OnAQChargeLungeChanged()
    End Sub
    Partial Private Sub OnAQInitiativeChanging(value As Integer)
    End Sub
    Partial Private Sub OnAQInitiativeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abbreviation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Abbreviation() As String
		Get
			Return Me._Abbreviation
		End Get
		Set
			If (String.Equals(Me._Abbreviation, value) = false) Then
				Me.OnAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._Abbreviation = value
				Me.SendPropertyChanged("Abbreviation")
				Me.OnAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MSBaseDB", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property MSBaseDB() As Integer
		Get
			Return Me._MSBaseDB
		End Get
		Set
			If ((Me._MSBaseDB = value)  _
						= false) Then
				Me.OnMSBaseDBChanging(value)
				Me.SendPropertyChanging
				Me._MSBaseDB = value
				Me.SendPropertyChanged("MSBaseDB")
				Me.OnMSBaseDBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MSFleeEvade", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property MSFleeEvade() As Integer
		Get
			Return Me._MSFleeEvade
		End Get
		Set
			If ((Me._MSFleeEvade = value)  _
						= false) Then
				Me.OnMSFleeEvadeChanging(value)
				Me.SendPropertyChanging
				Me._MSFleeEvade = value
				Me.SendPropertyChanged("MSFleeEvade")
				Me.OnMSFleeEvadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AQChargeLunge", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property AQChargeLunge() As Integer
		Get
			Return Me._AQChargeLunge
		End Get
		Set
			If ((Me._AQChargeLunge = value)  _
						= false) Then
				Me.OnAQChargeLungeChanging(value)
				Me.SendPropertyChanging
				Me._AQChargeLunge = value
				Me.SendPropertyChanged("AQChargeLunge")
				Me.OnAQChargeLungeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AQInitiative", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property AQInitiative() As Integer
		Get
			Return Me._AQInitiative
		End Get
		Set
			If ((Me._AQInitiative = value)  _
						= false) Then
				Me.OnAQInitiativeChanging(value)
				Me.SendPropertyChanging
				Me._AQInitiative = value
				Me.SendPropertyChanged("AQInitiative")
				Me.OnAQInitiativeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SpeedChart_Creature", Storage:="_Creatures", ThisKey:="ID", OtherKey:="MSRating_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8, EmitDefaultValue:=false)>  _
	Public Property Creatures() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures
		End Get
		Set
			Me._Creatures.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SpeedChart_Creature1", Storage:="_Creatures1", ThisKey:="ID", OtherKey:="AQRating_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9, EmitDefaultValue:=false)>  _
	Public Property Creatures1() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures1.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures1
		End Get
		Set
			Me._Creatures1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.MSRating = Me
	End Sub
	
	Private Sub detach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.MSRating = Nothing
	End Sub
	
	Private Sub attach_Creatures1(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.AQRating = Me
	End Sub
	
	Private Sub detach_Creatures1(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.AQRating = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Creatures = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures, AddressOf Me.detach_Creatures)
		Me._Creatures1 = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures1, AddressOf Me.detach_Creatures1)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_Sizes"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class SizeRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Abbreviation As String
	
	Private _Attacks As EntitySet(Of Attack)
	
	Private _Creatures As EntitySet(Of Creature)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbbreviationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abbreviation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Abbreviation() As String
		Get
			Return Me._Abbreviation
		End Get
		Set
			If (String.Equals(Me._Abbreviation, value) = false) Then
				Me.OnAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._Abbreviation = value
				Me.SendPropertyChanged("Abbreviation")
				Me.OnAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SizeRating_Attack", Storage:="_Attacks", ThisKey:="ID", OtherKey:="Size_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property Attacks() As EntitySet(Of Attack)
		Get
			If (Me.serializing  _
						AndAlso (Me._Attacks.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Attacks
		End Get
		Set
			Me._Attacks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SizeRating_Creature", Storage:="_Creatures", ThisKey:="ID", OtherKey:="Size_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property Creatures() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures
		End Get
		Set
			Me._Creatures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Attacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.SizeRating = Me
	End Sub
	
	Private Sub detach_Attacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.SizeRating = Nothing
	End Sub
	
	Private Sub attach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.Size = Me
	End Sub
	
	Private Sub detach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.Size = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Attacks = New EntitySet(Of Attack)(AddressOf Me.attach_Attacks, AddressOf Me.detach_Attacks)
		Me._Creatures = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures, AddressOf Me.detach_Creatures)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_CriticalCodes"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class CriticalCode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Abbreviation As String
	
	Private _Creatures As EntitySet(Of Creature)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbbreviationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abbreviation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Abbreviation() As String
		Get
			Return Me._Abbreviation
		End Get
		Set
			If (String.Equals(Me._Abbreviation, value) = false) Then
				Me.OnAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._Abbreviation = value
				Me.SendPropertyChanged("Abbreviation")
				Me.OnAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CriticalCode_Creature", Storage:="_Creatures", ThisKey:="ID", OtherKey:="Criticals_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property Creatures() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures
		End Get
		Set
			Me._Creatures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.Criticals = Me
	End Sub
	
	Private Sub detach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.Criticals = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Creatures = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures, AddressOf Me.detach_Creatures)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_CriticalIgnores"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class CriticalIgnore
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Abbreviation As String
	
	Private _Creatures As EntitySet(Of Creature)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbbreviationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abbreviation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Abbreviation() As String
		Get
			Return Me._Abbreviation
		End Get
		Set
			If (String.Equals(Me._Abbreviation, value) = false) Then
				Me.OnAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._Abbreviation = value
				Me.SendPropertyChanged("Abbreviation")
				Me.OnAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CriticalIgnore_Creature", Storage:="_Creatures", ThisKey:="ID", OtherKey:="CriticalsIgnore_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property Creatures() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures
		End Get
		Set
			Me._Creatures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.CriticalIgnore = Me
	End Sub
	
	Private Sub detach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.CriticalIgnore = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Creatures = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures, AddressOf Me.detach_Creatures)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_LevelChart"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class LevelChart
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As Char
	
	Private _LevelChartValues As EntitySet(Of LevelChartValue)
	
	Private _Creatures As EntitySet(Of Creature)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As Char)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(1) NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As Char
		Get
			Return Me._Name
		End Get
		Set
			If ((Me._Name = value)  _
						= false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LevelChart_LevelChartValue", Storage:="_LevelChartValues", ThisKey:="ID", OtherKey:="Level_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property LevelChartValues() As EntitySet(Of LevelChartValue)
		Get
			If (Me.serializing  _
						AndAlso (Me._LevelChartValues.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._LevelChartValues
		End Get
		Set
			Me._LevelChartValues.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LevelChart_Creature", Storage:="_Creatures", ThisKey:="ID", OtherKey:="LevelMod_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property Creatures() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures
		End Get
		Set
			Me._Creatures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LevelChartValues(ByVal entity As LevelChartValue)
		Me.SendPropertyChanging
		entity.LevelChart = Me
	End Sub
	
	Private Sub detach_LevelChartValues(ByVal entity As LevelChartValue)
		Me.SendPropertyChanging
		entity.LevelChart = Nothing
	End Sub
	
	Private Sub attach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.LevelMod = Me
	End Sub
	
	Private Sub detach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.LevelMod = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._LevelChartValues = New EntitySet(Of LevelChartValue)(AddressOf Me.attach_LevelChartValues, AddressOf Me.detach_LevelChartValues)
		Me._Creatures = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures, AddressOf Me.detach_Creatures)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_LevelChartValues"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class LevelChartValue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Level_ID As Integer
	
	Private _Min As Integer
	
	Private _Max As Integer
	
	Private _Mod As Integer
	
	Private _LevelChart As EntityRef(Of LevelChart)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnLevel_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLevel_IDChanged()
    End Sub
    Partial Private Sub OnMinChanging(value As Integer)
    End Sub
    Partial Private Sub OnMinChanged()
    End Sub
    Partial Private Sub OnMaxChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaxChanged()
    End Sub
    Partial Private Sub OnModChanging(value As Integer)
    End Sub
    Partial Private Sub OnModChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Level_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Level_ID() As Integer
		Get
			Return Me._Level_ID
		End Get
		Set
			If ((Me._Level_ID = value)  _
						= false) Then
				If Me._LevelChart.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLevel_IDChanging(value)
				Me.SendPropertyChanging
				Me._Level_ID = value
				Me.SendPropertyChanged("Level_ID")
				Me.OnLevel_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Min", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Min() As Integer
		Get
			Return Me._Min
		End Get
		Set
			If ((Me._Min = value)  _
						= false) Then
				Me.OnMinChanging(value)
				Me.SendPropertyChanging
				Me._Min = value
				Me.SendPropertyChanged("Min")
				Me.OnMinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Max", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property Max() As Integer
		Get
			Return Me._Max
		End Get
		Set
			If ((Me._Max = value)  _
						= false) Then
				Me.OnMaxChanging(value)
				Me.SendPropertyChanging
				Me._Max = value
				Me.SendPropertyChanged("Max")
				Me.OnMaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Mod", Storage:="_Mod", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property [Mod]() As Integer
		Get
			Return Me._Mod
		End Get
		Set
			If ((Me._Mod = value)  _
						= false) Then
				Me.OnModChanging(value)
				Me.SendPropertyChanging
				Me._Mod = value
				Me.SendPropertyChanged("[Mod]")
				Me.OnModChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LevelChart_LevelChartValue", Storage:="_LevelChart", ThisKey:="Level_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property LevelChart() As LevelChart
		Get
			Return Me._LevelChart.Entity
		End Get
		Set
			Dim previousValue As LevelChart = Me._LevelChart.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LevelChart.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LevelChart.Entity = Nothing
					previousValue.LevelChartValues.Remove(Me)
				End If
				Me._LevelChart.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LevelChartValues.Add(Me)
					Me._Level_ID = value.ID
				Else
					Me._Level_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("LevelChart")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._LevelChart = CType(Nothing, EntityRef(Of LevelChart))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_ConsitutionBonusChart"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ConstitutionBonusChart
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Code As System.Nullable(Of Char)
	
	Private _PerLevelDifference As Integer
	
	Private _BonusExhaustion As Integer
	
	Private _ConstitutionBonusChartValues As EntitySet(Of ConstitutionBonusChartValue)
	
	Private _Creatures As EntitySet(Of Creature)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnPerLevelDifferenceChanging(value As Integer)
    End Sub
    Partial Private Sub OnPerLevelDifferenceChanged()
    End Sub
    Partial Private Sub OnBonusExhaustionChanging(value As Integer)
    End Sub
    Partial Private Sub OnBonusExhaustionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(1)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Code() As System.Nullable(Of Char)
		Get
			Return Me._Code
		End Get
		Set
			If (Me._Code.Equals(value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerLevelDifference", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property PerLevelDifference() As Integer
		Get
			Return Me._PerLevelDifference
		End Get
		Set
			If ((Me._PerLevelDifference = value)  _
						= false) Then
				Me.OnPerLevelDifferenceChanging(value)
				Me.SendPropertyChanging
				Me._PerLevelDifference = value
				Me.SendPropertyChanged("PerLevelDifference")
				Me.OnPerLevelDifferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BonusExhaustion", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property BonusExhaustion() As Integer
		Get
			Return Me._BonusExhaustion
		End Get
		Set
			If ((Me._BonusExhaustion = value)  _
						= false) Then
				Me.OnBonusExhaustionChanging(value)
				Me.SendPropertyChanging
				Me._BonusExhaustion = value
				Me.SendPropertyChanged("BonusExhaustion")
				Me.OnBonusExhaustionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ConstitutionBonusChart_ConstitutionBonusChartValue", Storage:="_ConstitutionBonusChartValues", ThisKey:="ID", OtherKey:="Chart_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property ConstitutionBonusChartValues() As EntitySet(Of ConstitutionBonusChartValue)
		Get
			If (Me.serializing  _
						AndAlso (Me._ConstitutionBonusChartValues.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ConstitutionBonusChartValues
		End Get
		Set
			Me._ConstitutionBonusChartValues.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ConstitutionBonusChart_Creature", Storage:="_Creatures", ThisKey:="ID", OtherKey:="HitMod_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property Creatures() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures
		End Get
		Set
			Me._Creatures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ConstitutionBonusChartValues(ByVal entity As ConstitutionBonusChartValue)
		Me.SendPropertyChanging
		entity.ConstitutionBonusChart = Me
	End Sub
	
	Private Sub detach_ConstitutionBonusChartValues(ByVal entity As ConstitutionBonusChartValue)
		Me.SendPropertyChanging
		entity.ConstitutionBonusChart = Nothing
	End Sub
	
	Private Sub attach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.HitMod = Me
	End Sub
	
	Private Sub detach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.HitMod = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ConstitutionBonusChartValues = New EntitySet(Of ConstitutionBonusChartValue)(AddressOf Me.attach_ConstitutionBonusChartValues, AddressOf Me.detach_ConstitutionBonusChartValues)
		Me._Creatures = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures, AddressOf Me.detach_Creatures)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_ConstitutionBonusChartValues"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ConstitutionBonusChartValue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Chart_ID As Integer
	
	Private _Min As Integer
	
	Private _Max As Integer
	
	Private _Mod As Integer
	
	Private _ConstitutionBonusChart As EntityRef(Of ConstitutionBonusChart)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnChart_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnChart_IDChanged()
    End Sub
    Partial Private Sub OnMinChanging(value As Integer)
    End Sub
    Partial Private Sub OnMinChanged()
    End Sub
    Partial Private Sub OnMaxChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaxChanged()
    End Sub
    Partial Private Sub OnModChanging(value As Integer)
    End Sub
    Partial Private Sub OnModChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Chart_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Chart_ID() As Integer
		Get
			Return Me._Chart_ID
		End Get
		Set
			If ((Me._Chart_ID = value)  _
						= false) Then
				If Me._ConstitutionBonusChart.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChart_IDChanging(value)
				Me.SendPropertyChanging
				Me._Chart_ID = value
				Me.SendPropertyChanged("Chart_ID")
				Me.OnChart_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Min", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Min() As Integer
		Get
			Return Me._Min
		End Get
		Set
			If ((Me._Min = value)  _
						= false) Then
				Me.OnMinChanging(value)
				Me.SendPropertyChanging
				Me._Min = value
				Me.SendPropertyChanged("Min")
				Me.OnMinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Max", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property Max() As Integer
		Get
			Return Me._Max
		End Get
		Set
			If ((Me._Max = value)  _
						= false) Then
				Me.OnMaxChanging(value)
				Me.SendPropertyChanging
				Me._Max = value
				Me.SendPropertyChanged("Max")
				Me.OnMaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Mod", Storage:="_Mod", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property [Mod]() As Integer
		Get
			Return Me._Mod
		End Get
		Set
			If ((Me._Mod = value)  _
						= false) Then
				Me.OnModChanging(value)
				Me.SendPropertyChanging
				Me._Mod = value
				Me.SendPropertyChanged("[Mod]")
				Me.OnModChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ConstitutionBonusChart_ConstitutionBonusChartValue", Storage:="_ConstitutionBonusChart", ThisKey:="Chart_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property ConstitutionBonusChart() As ConstitutionBonusChart
		Get
			Return Me._ConstitutionBonusChart.Entity
		End Get
		Set
			Dim previousValue As ConstitutionBonusChart = Me._ConstitutionBonusChart.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ConstitutionBonusChart.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ConstitutionBonusChart.Entity = Nothing
					previousValue.ConstitutionBonusChartValues.Remove(Me)
				End If
				Me._ConstitutionBonusChart.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConstitutionBonusChartValues.Add(Me)
					Me._Chart_ID = value.ID
				Else
					Me._Chart_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ConstitutionBonusChart")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._ConstitutionBonusChart = CType(Nothing, EntityRef(Of ConstitutionBonusChart))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_IQs"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class IQ
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Abbreviation As String
	
	Private _Creatures As EntitySet(Of Creature)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbbreviationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abbreviation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Abbreviation() As String
		Get
			Return Me._Abbreviation
		End Get
		Set
			If (String.Equals(Me._Abbreviation, value) = false) Then
				Me.OnAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._Abbreviation = value
				Me.SendPropertyChanged("Abbreviation")
				Me.OnAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IQ_Creature", Storage:="_Creatures", ThisKey:="ID", OtherKey:="IQ_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property Creatures() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures
		End Get
		Set
			Me._Creatures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.IQ = Me
	End Sub
	
	Private Sub detach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.IQ = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Creatures = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures, AddressOf Me.detach_Creatures)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creature_Outlook"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Outlook
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Abbreviation As String
	
	Private _Creatures As EntitySet(Of Creature)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbbreviationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abbreviation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Abbreviation() As String
		Get
			Return Me._Abbreviation
		End Get
		Set
			If (String.Equals(Me._Abbreviation, value) = false) Then
				Me.OnAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._Abbreviation = value
				Me.SendPropertyChanged("Abbreviation")
				Me.OnAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Outlook_Creature", Storage:="_Creatures", ThisKey:="ID", OtherKey:="Outlook_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property Creatures() As EntitySet(Of Creature)
		Get
			If (Me.serializing  _
						AndAlso (Me._Creatures.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Creatures
		End Get
		Set
			Me._Creatures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.Outlook = Me
	End Sub
	
	Private Sub detach_Creatures(ByVal entity As Creature)
		Me.SendPropertyChanging
		entity.Outlook = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Creatures = New EntitySet(Of Creature)(AddressOf Me.attach_Creatures, AddressOf Me.detach_Creatures)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Creatures"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Creature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _TypeName As String
	
	Private _BaseLevel As Integer
	
	Private _LevelMod_ID As Integer
	
	Private _Size_ID As Integer
	
	Private _MSRating_ID As Integer
	
	Private _AQRating_ID As Integer
	
	Private _BaseMove As Integer
	
	Private _MaxPace_ID As Integer
	
	Private _MMBonus As Integer
	
	Private _MinEncountered As Integer
	
	Private _MaxEncountered As Integer
	
	Private _BaseHits As Integer
	
	Private _HitMod_ID As Integer
	
	Private _Criticals_ID As Integer
	
	Private _CriticalsIgnore_ID As Integer
	
	Private _AT As Integer
	
	Private _DB As Integer
	
	Private _Outlook_ID As Integer
	
	Private _IQ_ID As Integer
	
	Private _PageNumber As Integer
	
	Private _Book_ID As Integer
	
	Private _Description As String
	
	Private _Habitat As String
	
	Private _Attacks As EntitySet(Of Attack)
	
	Private _Actors As EntitySet(Of Actor)
	
	Private _Book As EntityRef(Of Book)
	
	Private _Criticals As EntityRef(Of CriticalCode)
	
	Private _CriticalIgnore As EntityRef(Of CriticalIgnore)
	
	Private _HitMod As EntityRef(Of ConstitutionBonusChart)
	
	Private _IQ As EntityRef(Of IQ)
	
	Private _LevelMod As EntityRef(Of LevelChart)
	
	Private _Outlook As EntityRef(Of Outlook)
	
	Private _MaxPace As EntityRef(Of Pace)
	
	Private _Size As EntityRef(Of SizeRating)
	
	Private _MSRating As EntityRef(Of SpeedChart)
	
	Private _AQRating As EntityRef(Of SpeedChart)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnTypeNameChanged()
    End Sub
    Partial Private Sub OnBaseLevelChanging(value As Integer)
    End Sub
    Partial Private Sub OnBaseLevelChanged()
    End Sub
    Partial Private Sub OnLevelMod_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLevelMod_IDChanged()
    End Sub
    Partial Private Sub OnSize_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSize_IDChanged()
    End Sub
    Partial Private Sub OnMSRating_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMSRating_IDChanged()
    End Sub
    Partial Private Sub OnAQRating_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAQRating_IDChanged()
    End Sub
    Partial Private Sub OnBaseMoveChanging(value As Integer)
    End Sub
    Partial Private Sub OnBaseMoveChanged()
    End Sub
    Partial Private Sub OnMaxPace_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaxPace_IDChanged()
    End Sub
    Partial Private Sub OnMMBonusChanging(value As Integer)
    End Sub
    Partial Private Sub OnMMBonusChanged()
    End Sub
    Partial Private Sub OnMinEncounteredChanging(value As Integer)
    End Sub
    Partial Private Sub OnMinEncounteredChanged()
    End Sub
    Partial Private Sub OnMaxEncounteredChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaxEncounteredChanged()
    End Sub
    Partial Private Sub OnBaseHitsChanging(value As Integer)
    End Sub
    Partial Private Sub OnBaseHitsChanged()
    End Sub
    Partial Private Sub OnHitMod_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnHitMod_IDChanged()
    End Sub
    Partial Private Sub OnCriticals_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCriticals_IDChanged()
    End Sub
    Partial Private Sub OnCriticalsIgnore_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCriticalsIgnore_IDChanged()
    End Sub
    Partial Private Sub OnATChanging(value As Integer)
    End Sub
    Partial Private Sub OnATChanged()
    End Sub
    Partial Private Sub OnDBChanging(value As Integer)
    End Sub
    Partial Private Sub OnDBChanged()
    End Sub
    Partial Private Sub OnOutlook_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOutlook_IDChanged()
    End Sub
    Partial Private Sub OnIQ_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIQ_IDChanged()
    End Sub
    Partial Private Sub OnPageNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageNumberChanged()
    End Sub
    Partial Private Sub OnBook_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBook_IDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnHabitatChanging(value As String)
    End Sub
    Partial Private Sub OnHabitatChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeName", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property TypeName() As String
		Get
			Return Me._TypeName
		End Get
		Set
			If (String.Equals(Me._TypeName, value) = false) Then
				Me.OnTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._TypeName = value
				Me.SendPropertyChanged("TypeName")
				Me.OnTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseLevel", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property BaseLevel() As Integer
		Get
			Return Me._BaseLevel
		End Get
		Set
			If ((Me._BaseLevel = value)  _
						= false) Then
				Me.OnBaseLevelChanging(value)
				Me.SendPropertyChanging
				Me._BaseLevel = value
				Me.SendPropertyChanged("BaseLevel")
				Me.OnBaseLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LevelMod_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property LevelMod_ID() As Integer
		Get
			Return Me._LevelMod_ID
		End Get
		Set
			If ((Me._LevelMod_ID = value)  _
						= false) Then
				If Me._LevelMod.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLevelMod_IDChanging(value)
				Me.SendPropertyChanging
				Me._LevelMod_ID = value
				Me.SendPropertyChanged("LevelMod_ID")
				Me.OnLevelMod_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Size_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property Size_ID() As Integer
		Get
			Return Me._Size_ID
		End Get
		Set
			If ((Me._Size_ID = value)  _
						= false) Then
				If Me._Size.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSize_IDChanging(value)
				Me.SendPropertyChanging
				Me._Size_ID = value
				Me.SendPropertyChanged("Size_ID")
				Me.OnSize_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MSRating_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property MSRating_ID() As Integer
		Get
			Return Me._MSRating_ID
		End Get
		Set
			If ((Me._MSRating_ID = value)  _
						= false) Then
				If Me._MSRating.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMSRating_IDChanging(value)
				Me.SendPropertyChanging
				Me._MSRating_ID = value
				Me.SendPropertyChanged("MSRating_ID")
				Me.OnMSRating_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AQRating_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property AQRating_ID() As Integer
		Get
			Return Me._AQRating_ID
		End Get
		Set
			If ((Me._AQRating_ID = value)  _
						= false) Then
				If Me._AQRating.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAQRating_IDChanging(value)
				Me.SendPropertyChanging
				Me._AQRating_ID = value
				Me.SendPropertyChanged("AQRating_ID")
				Me.OnAQRating_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseMove", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property BaseMove() As Integer
		Get
			Return Me._BaseMove
		End Get
		Set
			If ((Me._BaseMove = value)  _
						= false) Then
				Me.OnBaseMoveChanging(value)
				Me.SendPropertyChanging
				Me._BaseMove = value
				Me.SendPropertyChanged("BaseMove")
				Me.OnBaseMoveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxPace_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property MaxPace_ID() As Integer
		Get
			Return Me._MaxPace_ID
		End Get
		Set
			If ((Me._MaxPace_ID = value)  _
						= false) Then
				If Me._MaxPace.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaxPace_IDChanging(value)
				Me.SendPropertyChanging
				Me._MaxPace_ID = value
				Me.SendPropertyChanged("MaxPace_ID")
				Me.OnMaxPace_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MMBonus", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property MMBonus() As Integer
		Get
			Return Me._MMBonus
		End Get
		Set
			If ((Me._MMBonus = value)  _
						= false) Then
				Me.OnMMBonusChanging(value)
				Me.SendPropertyChanging
				Me._MMBonus = value
				Me.SendPropertyChanged("MMBonus")
				Me.OnMMBonusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinEncountered", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property MinEncountered() As Integer
		Get
			Return Me._MinEncountered
		End Get
		Set
			If ((Me._MinEncountered = value)  _
						= false) Then
				Me.OnMinEncounteredChanging(value)
				Me.SendPropertyChanging
				Me._MinEncountered = value
				Me.SendPropertyChanged("MinEncountered")
				Me.OnMinEncounteredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxEncountered", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property MaxEncountered() As Integer
		Get
			Return Me._MaxEncountered
		End Get
		Set
			If ((Me._MaxEncountered = value)  _
						= false) Then
				Me.OnMaxEncounteredChanging(value)
				Me.SendPropertyChanging
				Me._MaxEncountered = value
				Me.SendPropertyChanged("MaxEncountered")
				Me.OnMaxEncounteredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseHits", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property BaseHits() As Integer
		Get
			Return Me._BaseHits
		End Get
		Set
			If ((Me._BaseHits = value)  _
						= false) Then
				Me.OnBaseHitsChanging(value)
				Me.SendPropertyChanging
				Me._BaseHits = value
				Me.SendPropertyChanged("BaseHits")
				Me.OnBaseHitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HitMod_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property HitMod_ID() As Integer
		Get
			Return Me._HitMod_ID
		End Get
		Set
			If ((Me._HitMod_ID = value)  _
						= false) Then
				If Me._HitMod.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnHitMod_IDChanging(value)
				Me.SendPropertyChanging
				Me._HitMod_ID = value
				Me.SendPropertyChanged("HitMod_ID")
				Me.OnHitMod_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Criticals_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property Criticals_ID() As Integer
		Get
			Return Me._Criticals_ID
		End Get
		Set
			If ((Me._Criticals_ID = value)  _
						= false) Then
				If Me._Criticals.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCriticals_IDChanging(value)
				Me.SendPropertyChanging
				Me._Criticals_ID = value
				Me.SendPropertyChanged("Criticals_ID")
				Me.OnCriticals_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CriticalsIgnore_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property CriticalsIgnore_ID() As Integer
		Get
			Return Me._CriticalsIgnore_ID
		End Get
		Set
			If ((Me._CriticalsIgnore_ID = value)  _
						= false) Then
				If Me._CriticalIgnore.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCriticalsIgnore_IDChanging(value)
				Me.SendPropertyChanging
				Me._CriticalsIgnore_ID = value
				Me.SendPropertyChanged("CriticalsIgnore_ID")
				Me.OnCriticalsIgnore_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AT", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17)>  _
	Public Property AT() As Integer
		Get
			Return Me._AT
		End Get
		Set
			If ((Me._AT = value)  _
						= false) Then
				Me.OnATChanging(value)
				Me.SendPropertyChanging
				Me._AT = value
				Me.SendPropertyChanged("AT")
				Me.OnATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18)>  _
	Public Property DB() As Integer
		Get
			Return Me._DB
		End Get
		Set
			If ((Me._DB = value)  _
						= false) Then
				Me.OnDBChanging(value)
				Me.SendPropertyChanging
				Me._DB = value
				Me.SendPropertyChanged("DB")
				Me.OnDBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Outlook_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19)>  _
	Public Property Outlook_ID() As Integer
		Get
			Return Me._Outlook_ID
		End Get
		Set
			If ((Me._Outlook_ID = value)  _
						= false) Then
				If Me._Outlook.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOutlook_IDChanging(value)
				Me.SendPropertyChanging
				Me._Outlook_ID = value
				Me.SendPropertyChanged("Outlook_ID")
				Me.OnOutlook_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IQ_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20)>  _
	Public Property IQ_ID() As Integer
		Get
			Return Me._IQ_ID
		End Get
		Set
			If ((Me._IQ_ID = value)  _
						= false) Then
				If Me._IQ.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIQ_IDChanging(value)
				Me.SendPropertyChanging
				Me._IQ_ID = value
				Me.SendPropertyChanged("IQ_ID")
				Me.OnIQ_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageNumber", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=21)>  _
	Public Property PageNumber() As Integer
		Get
			Return Me._PageNumber
		End Get
		Set
			If ((Me._PageNumber = value)  _
						= false) Then
				Me.OnPageNumberChanging(value)
				Me.SendPropertyChanging
				Me._PageNumber = value
				Me.SendPropertyChanged("PageNumber")
				Me.OnPageNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Book_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=22)>  _
	Public Property Book_ID() As Integer
		Get
			Return Me._Book_ID
		End Get
		Set
			If ((Me._Book_ID = value)  _
						= false) Then
				If Me._Book.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBook_IDChanging(value)
				Me.SendPropertyChanging
				Me._Book_ID = value
				Me.SendPropertyChanged("Book_ID")
				Me.OnBook_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=23)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Habitat", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=24)>  _
	Public Property Habitat() As String
		Get
			Return Me._Habitat
		End Get
		Set
			If (String.Equals(Me._Habitat, value) = false) Then
				Me.OnHabitatChanging(value)
				Me.SendPropertyChanging
				Me._Habitat = value
				Me.SendPropertyChanged("Habitat")
				Me.OnHabitatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Creature_Attack", Storage:="_Attacks", ThisKey:="ID", OtherKey:="CreatureOn_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=25, EmitDefaultValue:=false)>  _
	Public Property Attacks() As EntitySet(Of Attack)
		Get
			If (Me.serializing  _
						AndAlso (Me._Attacks.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Attacks
		End Get
		Set
			Me._Attacks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Creature_Actor", Storage:="_Actors", ThisKey:="ID", OtherKey:="BaseCreature_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=26, EmitDefaultValue:=false)>  _
	Public Property Actors() As EntitySet(Of Actor)
		Get
			If (Me.serializing  _
						AndAlso (Me._Actors.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Actors
		End Get
		Set
			Me._Actors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Book_Creature", Storage:="_Book", ThisKey:="Book_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Book() As Book
		Get
			Return Me._Book.Entity
		End Get
		Set
			Dim previousValue As Book = Me._Book.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Book.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Book.Entity = Nothing
					previousValue.Creatures.Remove(Me)
				End If
				Me._Book.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures.Add(Me)
					Me._Book_ID = value.ID
				Else
					Me._Book_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Book")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CriticalCode_Creature", Storage:="_Criticals", ThisKey:="Criticals_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Criticals() As CriticalCode
		Get
			Return Me._Criticals.Entity
		End Get
		Set
			Dim previousValue As CriticalCode = Me._Criticals.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Criticals.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Criticals.Entity = Nothing
					previousValue.Creatures.Remove(Me)
				End If
				Me._Criticals.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures.Add(Me)
					Me._Criticals_ID = value.ID
				Else
					Me._Criticals_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Criticals")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CriticalIgnore_Creature", Storage:="_CriticalIgnore", ThisKey:="CriticalsIgnore_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property CriticalIgnore() As CriticalIgnore
		Get
			Return Me._CriticalIgnore.Entity
		End Get
		Set
			Dim previousValue As CriticalIgnore = Me._CriticalIgnore.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CriticalIgnore.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CriticalIgnore.Entity = Nothing
					previousValue.Creatures.Remove(Me)
				End If
				Me._CriticalIgnore.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures.Add(Me)
					Me._CriticalsIgnore_ID = value.ID
				Else
					Me._CriticalsIgnore_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CriticalIgnore")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ConstitutionBonusChart_Creature", Storage:="_HitMod", ThisKey:="HitMod_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property HitMod() As ConstitutionBonusChart
		Get
			Return Me._HitMod.Entity
		End Get
		Set
			Dim previousValue As ConstitutionBonusChart = Me._HitMod.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HitMod.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HitMod.Entity = Nothing
					previousValue.Creatures.Remove(Me)
				End If
				Me._HitMod.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures.Add(Me)
					Me._HitMod_ID = value.ID
				Else
					Me._HitMod_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("HitMod")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IQ_Creature", Storage:="_IQ", ThisKey:="IQ_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IQ() As IQ
		Get
			Return Me._IQ.Entity
		End Get
		Set
			Dim previousValue As IQ = Me._IQ.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IQ.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IQ.Entity = Nothing
					previousValue.Creatures.Remove(Me)
				End If
				Me._IQ.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures.Add(Me)
					Me._IQ_ID = value.ID
				Else
					Me._IQ_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IQ")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LevelChart_Creature", Storage:="_LevelMod", ThisKey:="LevelMod_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property LevelMod() As LevelChart
		Get
			Return Me._LevelMod.Entity
		End Get
		Set
			Dim previousValue As LevelChart = Me._LevelMod.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LevelMod.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LevelMod.Entity = Nothing
					previousValue.Creatures.Remove(Me)
				End If
				Me._LevelMod.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures.Add(Me)
					Me._LevelMod_ID = value.ID
				Else
					Me._LevelMod_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("LevelMod")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Outlook_Creature", Storage:="_Outlook", ThisKey:="Outlook_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Outlook() As Outlook
		Get
			Return Me._Outlook.Entity
		End Get
		Set
			Dim previousValue As Outlook = Me._Outlook.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Outlook.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Outlook.Entity = Nothing
					previousValue.Creatures.Remove(Me)
				End If
				Me._Outlook.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures.Add(Me)
					Me._Outlook_ID = value.ID
				Else
					Me._Outlook_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Outlook")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pace_Creature", Storage:="_MaxPace", ThisKey:="MaxPace_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MaxPace() As Pace
		Get
			Return Me._MaxPace.Entity
		End Get
		Set
			Dim previousValue As Pace = Me._MaxPace.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MaxPace.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MaxPace.Entity = Nothing
					previousValue.Creatures.Remove(Me)
				End If
				Me._MaxPace.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures.Add(Me)
					Me._MaxPace_ID = value.ID
				Else
					Me._MaxPace_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MaxPace")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SizeRating_Creature", Storage:="_Size", ThisKey:="Size_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Size() As SizeRating
		Get
			Return Me._Size.Entity
		End Get
		Set
			Dim previousValue As SizeRating = Me._Size.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Size.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Size.Entity = Nothing
					previousValue.Creatures.Remove(Me)
				End If
				Me._Size.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures.Add(Me)
					Me._Size_ID = value.ID
				Else
					Me._Size_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Size")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SpeedChart_Creature", Storage:="_MSRating", ThisKey:="MSRating_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MSRating() As SpeedChart
		Get
			Return Me._MSRating.Entity
		End Get
		Set
			Dim previousValue As SpeedChart = Me._MSRating.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MSRating.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MSRating.Entity = Nothing
					previousValue.Creatures.Remove(Me)
				End If
				Me._MSRating.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures.Add(Me)
					Me._MSRating_ID = value.ID
				Else
					Me._MSRating_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MSRating")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SpeedChart_Creature1", Storage:="_AQRating", ThisKey:="AQRating_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AQRating() As SpeedChart
		Get
			Return Me._AQRating.Entity
		End Get
		Set
			Dim previousValue As SpeedChart = Me._AQRating.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AQRating.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AQRating.Entity = Nothing
					previousValue.Creatures1.Remove(Me)
				End If
				Me._AQRating.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Creatures1.Add(Me)
					Me._AQRating_ID = value.ID
				Else
					Me._AQRating_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AQRating")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Attacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.Creature = Me
	End Sub
	
	Private Sub detach_Attacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.Creature = Nothing
	End Sub
	
	Private Sub attach_Actors(ByVal entity As Actor)
		Me.SendPropertyChanging
		entity.Creature = Me
	End Sub
	
	Private Sub detach_Actors(ByVal entity As Actor)
		Me.SendPropertyChanging
		entity.Creature = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Attacks = New EntitySet(Of Attack)(AddressOf Me.attach_Attacks, AddressOf Me.detach_Attacks)
		Me._Actors = New EntitySet(Of Actor)(AddressOf Me.attach_Actors, AddressOf Me.detach_Actors)
		Me._Book = CType(Nothing, EntityRef(Of Book))
		Me._Criticals = CType(Nothing, EntityRef(Of CriticalCode))
		Me._CriticalIgnore = CType(Nothing, EntityRef(Of CriticalIgnore))
		Me._HitMod = CType(Nothing, EntityRef(Of ConstitutionBonusChart))
		Me._IQ = CType(Nothing, EntityRef(Of IQ))
		Me._LevelMod = CType(Nothing, EntityRef(Of LevelChart))
		Me._Outlook = CType(Nothing, EntityRef(Of Outlook))
		Me._MaxPace = CType(Nothing, EntityRef(Of Pace))
		Me._Size = CType(Nothing, EntityRef(Of SizeRating))
		Me._MSRating = CType(Nothing, EntityRef(Of SpeedChart))
		Me._AQRating = CType(Nothing, EntityRef(Of SpeedChart))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Attack_CriticalTypes"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class CriticalType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Abbreviation As String
	
	Private _Attacks As EntitySet(Of Attack)
	
	Private _AttacksAddCrits As EntitySet(Of AttacksAddCrit)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbbreviationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abbreviation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Abbreviation() As String
		Get
			Return Me._Abbreviation
		End Get
		Set
			If (String.Equals(Me._Abbreviation, value) = false) Then
				Me.OnAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._Abbreviation = value
				Me.SendPropertyChanged("Abbreviation")
				Me.OnAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CriticalType_Attack", Storage:="_Attacks", ThisKey:="ID", OtherKey:="UseCriticalInstead_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4, EmitDefaultValue:=false)>  _
	Public Property Attacks() As EntitySet(Of Attack)
		Get
			If (Me.serializing  _
						AndAlso (Me._Attacks.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Attacks
		End Get
		Set
			Me._Attacks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CriticalType_AttacksAddCrit", Storage:="_AttacksAddCrits", ThisKey:="ID", OtherKey:="Critical_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property AttacksAddCrits() As EntitySet(Of AttacksAddCrit)
		Get
			If (Me.serializing  _
						AndAlso (Me._AttacksAddCrits.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._AttacksAddCrits
		End Get
		Set
			Me._AttacksAddCrits.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Attacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.CriticalUseInstead = Me
	End Sub
	
	Private Sub detach_Attacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.CriticalUseInstead = Nothing
	End Sub
	
	Private Sub attach_AttacksAddCrits(ByVal entity As AttacksAddCrit)
		Me.SendPropertyChanging
		entity.CriticalType = Me
	End Sub
	
	Private Sub detach_AttacksAddCrits(ByVal entity As AttacksAddCrit)
		Me.SendPropertyChanging
		entity.CriticalType = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Attacks = New EntitySet(Of Attack)(AddressOf Me.attach_Attacks, AddressOf Me.detach_Attacks)
		Me._AttacksAddCrits = New EntitySet(Of AttacksAddCrit)(AddressOf Me.attach_AttacksAddCrits, AddressOf Me.detach_AttacksAddCrits)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Attack_Types"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class AttackType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Abbreviation As String
	
	Private _HasSize As Boolean
	
	Private _HasDB As Boolean
	
	Private _Attacks As EntitySet(Of Attack)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbbreviationChanged()
    End Sub
    Partial Private Sub OnHasSizeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnHasSizeChanged()
    End Sub
    Partial Private Sub OnHasDBChanging(value As Boolean)
    End Sub
    Partial Private Sub OnHasDBChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abbreviation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Abbreviation() As String
		Get
			Return Me._Abbreviation
		End Get
		Set
			If (String.Equals(Me._Abbreviation, value) = false) Then
				Me.OnAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._Abbreviation = value
				Me.SendPropertyChanged("Abbreviation")
				Me.OnAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HasSize"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property HasSize() As Boolean
		Get
			Return Me._HasSize
		End Get
		Set
			If ((Me._HasSize = value)  _
						= false) Then
				Me.OnHasSizeChanging(value)
				Me.SendPropertyChanging
				Me._HasSize = value
				Me.SendPropertyChanged("HasSize")
				Me.OnHasSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HasDB"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property HasDB() As Boolean
		Get
			Return Me._HasDB
		End Get
		Set
			If ((Me._HasDB = value)  _
						= false) Then
				Me.OnHasDBChanging(value)
				Me.SendPropertyChanging
				Me._HasDB = value
				Me.SendPropertyChanged("HasDB")
				Me.OnHasDBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AttackType_Attack", Storage:="_Attacks", ThisKey:="ID", OtherKey:="Type_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property Attacks() As EntitySet(Of Attack)
		Get
			If (Me.serializing  _
						AndAlso (Me._Attacks.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Attacks
		End Get
		Set
			Me._Attacks.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Attacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.AttackType = Me
	End Sub
	
	Private Sub detach_Attacks(ByVal entity As Attack)
		Me.SendPropertyChanging
		entity.AttackType = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Attacks = New EntitySet(Of Attack)(AddressOf Me.attach_Attacks, AddressOf Me.detach_Attacks)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Games"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Game
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _GM_ID As System.Nullable(Of System.Guid)
	
	Private _CurrentTime As Double
	
	Private _GamesPlayers As EntitySet(Of GamesPlayer)
	
	Private _Actors As EntitySet(Of Actor)
	
	Private _Actions As EntitySet(Of Action)
	
	Private _GM As EntityRef(Of SystemUser)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnGM_IDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnGM_IDChanged()
    End Sub
    Partial Private Sub OnCurrentTimeChanging(value As Double)
    End Sub
    Partial Private Sub OnCurrentTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GM_ID", DbType:="UniqueIdentifier"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property GM_ID() As System.Nullable(Of System.Guid)
		Get
			Return Me._GM_ID
		End Get
		Set
			If (Me._GM_ID.Equals(value) = false) Then
				If Me._GM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnGM_IDChanging(value)
				Me.SendPropertyChanging
				Me._GM_ID = value
				Me.SendPropertyChanged("GM_ID")
				Me.OnGM_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentTime", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property CurrentTime() As Double
		Get
			Return Me._CurrentTime
		End Get
		Set
			If ((Me._CurrentTime = value)  _
						= false) Then
				Me.OnCurrentTimeChanging(value)
				Me.SendPropertyChanging
				Me._CurrentTime = value
				Me.SendPropertyChanged("CurrentTime")
				Me.OnCurrentTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Game_GamesPlayer", Storage:="_GamesPlayers", ThisKey:="ID", OtherKey:="Game_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property GamesPlayers() As EntitySet(Of GamesPlayer)
		Get
			If (Me.serializing  _
						AndAlso (Me._GamesPlayers.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._GamesPlayers
		End Get
		Set
			Me._GamesPlayers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Game_Actor", Storage:="_Actors", ThisKey:="ID", OtherKey:="Game_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property Actors() As EntitySet(Of Actor)
		Get
			If (Me.serializing  _
						AndAlso (Me._Actors.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Actors
		End Get
		Set
			Me._Actors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Game_Action", Storage:="_Actions", ThisKey:="ID", OtherKey:="Game_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7, EmitDefaultValue:=false)>  _
	Public Property GameActions() As EntitySet(Of Action)
		Get
			If (Me.serializing  _
						AndAlso (Me._Actions.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Actions
		End Get
		Set
			Me._Actions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SystemUser_Game", Storage:="_GM", ThisKey:="GM_ID", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property GM() As SystemUser
		Get
			Return Me._GM.Entity
		End Get
		Set
			Dim previousValue As SystemUser = Me._GM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._GM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._GM.Entity = Nothing
					previousValue.Games.Remove(Me)
				End If
				Me._GM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Games.Add(Me)
					Me._GM_ID = value.UserId
				Else
					Me._GM_ID = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("GM")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_GamesPlayers(ByVal entity As GamesPlayer)
		Me.SendPropertyChanging
		entity.Game = Me
	End Sub
	
	Private Sub detach_GamesPlayers(ByVal entity As GamesPlayer)
		Me.SendPropertyChanging
		entity.Game = Nothing
	End Sub
	
	Private Sub attach_Actors(ByVal entity As Actor)
		Me.SendPropertyChanging
		entity.Game = Me
	End Sub
	
	Private Sub detach_Actors(ByVal entity As Actor)
		Me.SendPropertyChanging
		entity.Game = Nothing
	End Sub
	
	Private Sub attach_Actions(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.Game = Me
	End Sub
	
	Private Sub detach_Actions(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.Game = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._GamesPlayers = New EntitySet(Of GamesPlayer)(AddressOf Me.attach_GamesPlayers, AddressOf Me.detach_GamesPlayers)
		Me._Actors = New EntitySet(Of Actor)(AddressOf Me.attach_Actors, AddressOf Me.detach_Actors)
		Me._Actions = New EntitySet(Of Action)(AddressOf Me.attach_Actions, AddressOf Me.detach_Actions)
		Me._GM = CType(Nothing, EntityRef(Of SystemUser))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GamesPlayers"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class GamesPlayer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Game_ID As Integer
	
	Private _Player_ID As System.Guid
	
	Private _Game As EntityRef(Of Game)
	
	Private _Player As EntityRef(Of SystemUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnGame_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGame_IDChanged()
    End Sub
    Partial Private Sub OnPlayer_IDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPlayer_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Game_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Game_ID() As Integer
		Get
			Return Me._Game_ID
		End Get
		Set
			If ((Me._Game_ID = value)  _
						= false) Then
				If Me._Game.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnGame_IDChanging(value)
				Me.SendPropertyChanging
				Me._Game_ID = value
				Me.SendPropertyChanged("Game_ID")
				Me.OnGame_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Player_ID", DbType:="UniqueIdentifier NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Player_ID() As System.Guid
		Get
			Return Me._Player_ID
		End Get
		Set
			If ((Me._Player_ID = value)  _
						= false) Then
				If Me._Player.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPlayer_IDChanging(value)
				Me.SendPropertyChanging
				Me._Player_ID = value
				Me.SendPropertyChanged("Player_ID")
				Me.OnPlayer_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Game_GamesPlayer", Storage:="_Game", ThisKey:="Game_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Game() As Game
		Get
			Return Me._Game.Entity
		End Get
		Set
			Dim previousValue As Game = Me._Game.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Game.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Game.Entity = Nothing
					previousValue.GamesPlayers.Remove(Me)
				End If
				Me._Game.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.GamesPlayers.Add(Me)
					Me._Game_ID = value.ID
				Else
					Me._Game_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Game")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SystemUser_GamesPlayer", Storage:="_Player", ThisKey:="Player_ID", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property Player() As SystemUser
		Get
			Return Me._Player.Entity
		End Get
		Set
			Dim previousValue As SystemUser = Me._Player.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Player.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Player.Entity = Nothing
					previousValue.GamesPlayers.Remove(Me)
				End If
				Me._Player.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.GamesPlayers.Add(Me)
					Me._Player_ID = value.UserId
				Else
					Me._Player_ID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Player")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Game = CType(Nothing, EntityRef(Of Game))
		Me._Player = CType(Nothing, EntityRef(Of SystemUser))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Actors"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Actor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Game_ID As Integer
	
	Private _Player_ID As System.Nullable(Of System.Guid)
	
	Private _BaseCreature_ID As System.Nullable(Of Integer)
	
	Private _BaseCharacter_ID As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _Type As CharacterType
	
	Private _Level As Integer
	
	Private _HitsTotal As Integer
	
	Private _HitsRemaining As Integer
	
	Private _BaseInititive As Integer
	
	Private _RolledInititive As Integer
	
	Private _ExhaustionTotal As Integer
	
	Private _ExhaustionRemaining As Integer
	
	Private _PowerPointsTotal As Integer
	
	Private _PowerPointsRemaining As Integer
	
	Private _IsConcentrating As Boolean
	
	Private _IsMoving As Boolean
	
	Private _Suprised As Boolean
	
	Private _UsingAdrenalDB As Boolean
	
	Private _PercentRequiredAdrenalDB As Double
	
	Private _PercentAction As Double
	
	Private _StrengthBonus As Integer
	
	Private _CritNegatives As Integer
	
	Private _CurrentArmor_ID As System.Nullable(Of Integer)
	
	Private _NextSpellTime As Double
	
	Private _ConstitutionStat As Integer
	
	Private _Movement As Double
	
	Private _Color As String
	
	Private _CriticalAffects As EntitySet(Of CriticalAffect)
	
	Private _Actions As EntitySet(Of Action)
	
	Private _ActorsAttacks As EntitySet(Of ActorsAttack)
	
	Private _Character As EntityRef(Of Character)
	
	Private _Creature As EntityRef(Of Creature)
	
	Private _Game As EntityRef(Of Game)
	
	Private _Player As EntityRef(Of SystemUser)
	
	Private _CurrentArmor As EntityRef(Of Armor)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnGame_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGame_IDChanged()
    End Sub
    Partial Private Sub OnPlayer_IDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnPlayer_IDChanged()
    End Sub
    Partial Private Sub OnBaseCreature_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBaseCreature_IDChanged()
    End Sub
    Partial Private Sub OnBaseCharacter_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBaseCharacter_IDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As CharacterType)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnLevelChanging(value As Integer)
    End Sub
    Partial Private Sub OnLevelChanged()
    End Sub
    Partial Private Sub OnHitsTotalChanging(value As Integer)
    End Sub
    Partial Private Sub OnHitsTotalChanged()
    End Sub
    Partial Private Sub OnHitsRemainingChanging(value As Integer)
    End Sub
    Partial Private Sub OnHitsRemainingChanged()
    End Sub
    Partial Private Sub OnBaseInititiveChanging(value As Integer)
    End Sub
    Partial Private Sub OnBaseInititiveChanged()
    End Sub
    Partial Private Sub OnRolledInititiveChanging(value As Integer)
    End Sub
    Partial Private Sub OnRolledInititiveChanged()
    End Sub
    Partial Private Sub OnExhaustionTotalChanging(value As Integer)
    End Sub
    Partial Private Sub OnExhaustionTotalChanged()
    End Sub
    Partial Private Sub OnExhaustionRemainingChanging(value As Integer)
    End Sub
    Partial Private Sub OnExhaustionRemainingChanged()
    End Sub
    Partial Private Sub OnPowerPointsTotalChanging(value As Integer)
    End Sub
    Partial Private Sub OnPowerPointsTotalChanged()
    End Sub
    Partial Private Sub OnPowerPointsRemainingChanging(value As Integer)
    End Sub
    Partial Private Sub OnPowerPointsRemainingChanged()
    End Sub
    Partial Private Sub OnIsConcentratingChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsConcentratingChanged()
    End Sub
    Partial Private Sub OnIsMovingChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsMovingChanged()
    End Sub
    Partial Private Sub OnSuprisedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSuprisedChanged()
    End Sub
    Partial Private Sub OnUsingAdrenalDBChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUsingAdrenalDBChanged()
    End Sub
    Partial Private Sub OnPercentRequiredAdrenalDBChanging(value As Double)
    End Sub
    Partial Private Sub OnPercentRequiredAdrenalDBChanged()
    End Sub
    Partial Private Sub OnPercentActionChanging(value As Double)
    End Sub
    Partial Private Sub OnPercentActionChanged()
    End Sub
    Partial Private Sub OnStrengthBonusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStrengthBonusChanged()
    End Sub
    Partial Private Sub OnCritNegativesChanging(value As Integer)
    End Sub
    Partial Private Sub OnCritNegativesChanged()
    End Sub
    Partial Private Sub OnCurrentArmor_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCurrentArmor_IDChanged()
    End Sub
    Partial Private Sub OnNextSpellTimeChanging(value As Double)
    End Sub
    Partial Private Sub OnNextSpellTimeChanged()
    End Sub
    Partial Private Sub OnConstitutionStatChanging(value As Integer)
    End Sub
    Partial Private Sub OnConstitutionStatChanged()
    End Sub
    Partial Private Sub OnMovementChanging(value As Double)
    End Sub
    Partial Private Sub OnMovementChanged()
    End Sub
    Partial Private Sub OnColorChanging(value As String)
    End Sub
    Partial Private Sub OnColorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Game_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Game_ID() As Integer
		Get
			Return Me._Game_ID
		End Get
		Set
			If ((Me._Game_ID = value)  _
						= false) Then
				If Me._Game.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnGame_IDChanging(value)
				Me.SendPropertyChanging
				Me._Game_ID = value
				Me.SendPropertyChanged("Game_ID")
				Me.OnGame_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Player_ID", DbType:="UniqueIdentifier"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Player_ID() As System.Nullable(Of System.Guid)
		Get
			Return Me._Player_ID
		End Get
		Set
			If (Me._Player_ID.Equals(value) = false) Then
				If Me._Player.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPlayer_IDChanging(value)
				Me.SendPropertyChanging
				Me._Player_ID = value
				Me.SendPropertyChanged("Player_ID")
				Me.OnPlayer_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseCreature_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property BaseCreature_ID() As System.Nullable(Of Integer)
		Get
			Return Me._BaseCreature_ID
		End Get
		Set
			If (Me._BaseCreature_ID.Equals(value) = false) Then
				If Me._Creature.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBaseCreature_IDChanging(value)
				Me.SendPropertyChanging
				Me._BaseCreature_ID = value
				Me.SendPropertyChanged("BaseCreature_ID")
				Me.OnBaseCreature_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseCharacter_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property BaseCharacter_ID() As System.Nullable(Of Integer)
		Get
			Return Me._BaseCharacter_ID
		End Get
		Set
			If (Me._BaseCharacter_ID.Equals(value) = false) Then
				If Me._Character.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBaseCharacter_IDChanging(value)
				Me.SendPropertyChanging
				Me._BaseCharacter_ID = value
				Me.SendPropertyChanged("BaseCharacter_ID")
				Me.OnBaseCharacter_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property Type() As CharacterType
		Get
			Return Me._Type
		End Get
		Set
			If (Object.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Level]", Storage:="_Level", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property Level() As Integer
		Get
			Return Me._Level
		End Get
		Set
			If ((Me._Level = value)  _
						= false) Then
				Me.OnLevelChanging(value)
				Me.SendPropertyChanging
				Me._Level = value
				Me.SendPropertyChanged("Level")
				Me.OnLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HitsTotal", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property HitsTotal() As Integer
		Get
			Return Me._HitsTotal
		End Get
		Set
			If ((Me._HitsTotal = value)  _
						= false) Then
				Me.OnHitsTotalChanging(value)
				Me.SendPropertyChanging
				Me._HitsTotal = value
				Me.SendPropertyChanged("HitsTotal")
				Me.OnHitsTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HitsRemaining", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property HitsRemaining() As Integer
		Get
			Return Me._HitsRemaining
		End Get
		Set
			If ((Me._HitsRemaining = value)  _
						= false) Then
				Me.OnHitsRemainingChanging(value)
				Me.SendPropertyChanging
				Me._HitsRemaining = value
				Me.SendPropertyChanged("HitsRemaining")
				Me.OnHitsRemainingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseInititive", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property BaseInititive() As Integer
		Get
			Return Me._BaseInititive
		End Get
		Set
			If ((Me._BaseInititive = value)  _
						= false) Then
				Me.OnBaseInititiveChanging(value)
				Me.SendPropertyChanging
				Me._BaseInititive = value
				Me.SendPropertyChanged("BaseInititive")
				Me.OnBaseInititiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RolledInititive", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property RolledInititive() As Integer
		Get
			Return Me._RolledInititive
		End Get
		Set
			If ((Me._RolledInititive = value)  _
						= false) Then
				Me.OnRolledInititiveChanging(value)
				Me.SendPropertyChanging
				Me._RolledInititive = value
				Me.SendPropertyChanged("RolledInititive")
				Me.OnRolledInititiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExhaustionTotal", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property ExhaustionTotal() As Integer
		Get
			Return Me._ExhaustionTotal
		End Get
		Set
			If ((Me._ExhaustionTotal = value)  _
						= false) Then
				Me.OnExhaustionTotalChanging(value)
				Me.SendPropertyChanging
				Me._ExhaustionTotal = value
				Me.SendPropertyChanged("ExhaustionTotal")
				Me.OnExhaustionTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExhaustionRemaining", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property ExhaustionRemaining() As Integer
		Get
			Return Me._ExhaustionRemaining
		End Get
		Set
			If ((Me._ExhaustionRemaining = value)  _
						= false) Then
				Me.OnExhaustionRemainingChanging(value)
				Me.SendPropertyChanging
				Me._ExhaustionRemaining = value
				Me.SendPropertyChanged("ExhaustionRemaining")
				Me.OnExhaustionRemainingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PowerPointsTotal", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property PowerPointsTotal() As Integer
		Get
			Return Me._PowerPointsTotal
		End Get
		Set
			If ((Me._PowerPointsTotal = value)  _
						= false) Then
				Me.OnPowerPointsTotalChanging(value)
				Me.SendPropertyChanging
				Me._PowerPointsTotal = value
				Me.SendPropertyChanged("PowerPointsTotal")
				Me.OnPowerPointsTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PowerPointsRemaining", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property PowerPointsRemaining() As Integer
		Get
			Return Me._PowerPointsRemaining
		End Get
		Set
			If ((Me._PowerPointsRemaining = value)  _
						= false) Then
				Me.OnPowerPointsRemainingChanging(value)
				Me.SendPropertyChanging
				Me._PowerPointsRemaining = value
				Me.SendPropertyChanged("PowerPointsRemaining")
				Me.OnPowerPointsRemainingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsConcentrating", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17)>  _
	Public Property IsConcentrating() As Boolean
		Get
			Return Me._IsConcentrating
		End Get
		Set
			If ((Me._IsConcentrating = value)  _
						= false) Then
				Me.OnIsConcentratingChanging(value)
				Me.SendPropertyChanging
				Me._IsConcentrating = value
				Me.SendPropertyChanged("IsConcentrating")
				Me.OnIsConcentratingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMoving", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18)>  _
	Public Property IsMoving() As Boolean
		Get
			Return Me._IsMoving
		End Get
		Set
			If ((Me._IsMoving = value)  _
						= false) Then
				Me.OnIsMovingChanging(value)
				Me.SendPropertyChanging
				Me._IsMoving = value
				Me.SendPropertyChanged("IsMoving")
				Me.OnIsMovingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suprised", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19)>  _
	Public Property Suprised() As Boolean
		Get
			Return Me._Suprised
		End Get
		Set
			If ((Me._Suprised = value)  _
						= false) Then
				Me.OnSuprisedChanging(value)
				Me.SendPropertyChanging
				Me._Suprised = value
				Me.SendPropertyChanged("Suprised")
				Me.OnSuprisedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UsingAdrenalDB", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=20)>  _
	Public Property UsingAdrenalDB() As Boolean
		Get
			Return Me._UsingAdrenalDB
		End Get
		Set
			If ((Me._UsingAdrenalDB = value)  _
						= false) Then
				Me.OnUsingAdrenalDBChanging(value)
				Me.SendPropertyChanging
				Me._UsingAdrenalDB = value
				Me.SendPropertyChanged("UsingAdrenalDB")
				Me.OnUsingAdrenalDBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PercentRequiredAdrenalDB", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=21)>  _
	Public Property PercentRequiredAdrenalDB() As Double
		Get
			Return Me._PercentRequiredAdrenalDB
		End Get
		Set
			If ((Me._PercentRequiredAdrenalDB = value)  _
						= false) Then
				Me.OnPercentRequiredAdrenalDBChanging(value)
				Me.SendPropertyChanging
				Me._PercentRequiredAdrenalDB = value
				Me.SendPropertyChanged("PercentRequiredAdrenalDB")
				Me.OnPercentRequiredAdrenalDBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PercentAction", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=22)>  _
	Public Property PercentAction() As Double
		Get
			Return Me._PercentAction
		End Get
		Set
			If ((Me._PercentAction = value)  _
						= false) Then
				Me.OnPercentActionChanging(value)
				Me.SendPropertyChanging
				Me._PercentAction = value
				Me.SendPropertyChanged("PercentAction")
				Me.OnPercentActionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StrengthBonus", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=23)>  _
	Public Property StrengthBonus() As Integer
		Get
			Return Me._StrengthBonus
		End Get
		Set
			If ((Me._StrengthBonus = value)  _
						= false) Then
				Me.OnStrengthBonusChanging(value)
				Me.SendPropertyChanging
				Me._StrengthBonus = value
				Me.SendPropertyChanged("StrengthBonus")
				Me.OnStrengthBonusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CritNegatives", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=24)>  _
	Public Property CritNegatives() As Integer
		Get
			Return Me._CritNegatives
		End Get
		Set
			If ((Me._CritNegatives = value)  _
						= false) Then
				Me.OnCritNegativesChanging(value)
				Me.SendPropertyChanging
				Me._CritNegatives = value
				Me.SendPropertyChanged("CritNegatives")
				Me.OnCritNegativesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentArmor_ID", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=25)>  _
	Public Property CurrentArmor_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CurrentArmor_ID
		End Get
		Set
			If (Me._CurrentArmor_ID.Equals(value) = false) Then
				If Me._CurrentArmor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCurrentArmor_IDChanging(value)
				Me.SendPropertyChanging
				Me._CurrentArmor_ID = value
				Me.SendPropertyChanged("CurrentArmor_ID")
				Me.OnCurrentArmor_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NextSpellTime", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=26)>  _
	Public Property NextSpellTime() As Double
		Get
			Return Me._NextSpellTime
		End Get
		Set
			If ((Me._NextSpellTime = value)  _
						= false) Then
				Me.OnNextSpellTimeChanging(value)
				Me.SendPropertyChanging
				Me._NextSpellTime = value
				Me.SendPropertyChanged("NextSpellTime")
				Me.OnNextSpellTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConstitutionStat", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=27)>  _
	Public Property ConstitutionStat() As Integer
		Get
			Return Me._ConstitutionStat
		End Get
		Set
			If ((Me._ConstitutionStat = value)  _
						= false) Then
				Me.OnConstitutionStatChanging(value)
				Me.SendPropertyChanging
				Me._ConstitutionStat = value
				Me.SendPropertyChanged("ConstitutionStat")
				Me.OnConstitutionStatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movement", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=28)>  _
	Public Property Movement() As Double
		Get
			Return Me._Movement
		End Get
		Set
			If ((Me._Movement = value)  _
						= false) Then
				Me.OnMovementChanging(value)
				Me.SendPropertyChanging
				Me._Movement = value
				Me.SendPropertyChanged("Movement")
				Me.OnMovementChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=29)>  _
	Public Property Color() As String
		Get
			Return Me._Color
		End Get
		Set
			If (String.Equals(Me._Color, value) = false) Then
				Me.OnColorChanging(value)
				Me.SendPropertyChanging
				Me._Color = value
				Me.SendPropertyChanged("Color")
				Me.OnColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Actor_CriticalAffect", Storage:="_CriticalAffects", ThisKey:="ID", OtherKey:="Actor_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=30, EmitDefaultValue:=false)>  _
	Public Property CriticalAffects() As EntitySet(Of CriticalAffect)
		Get
			If (Me.serializing  _
						AndAlso (Me._CriticalAffects.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._CriticalAffects
		End Get
		Set
			Me._CriticalAffects.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Actor_Action", Storage:="_Actions", ThisKey:="ID", OtherKey:="WhoIsActing_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=31, EmitDefaultValue:=false)>  _
	Public Property Actions() As EntitySet(Of Action)
		Get
			If (Me.serializing  _
						AndAlso (Me._Actions.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Actions
		End Get
		Set
			Me._Actions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Actor_ActorsAttack", Storage:="_ActorsAttacks", ThisKey:="ID", OtherKey:="Actor_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=32, EmitDefaultValue:=false)>  _
	Public Property ActorsAttacks() As EntitySet(Of ActorsAttack)
		Get
			If (Me.serializing  _
						AndAlso (Me._ActorsAttacks.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ActorsAttacks
		End Get
		Set
			Me._ActorsAttacks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Character_Actor", Storage:="_Character", ThisKey:="BaseCharacter_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Character() As Character
		Get
			Return Me._Character.Entity
		End Get
		Set
			Dim previousValue As Character = Me._Character.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Character.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Character.Entity = Nothing
					previousValue.Actors.Remove(Me)
				End If
				Me._Character.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actors.Add(Me)
					Me._BaseCharacter_ID = value.ID
				Else
					Me._BaseCharacter_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Character")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Creature_Actor", Storage:="_Creature", ThisKey:="BaseCreature_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Creature() As Creature
		Get
			Return Me._Creature.Entity
		End Get
		Set
			Dim previousValue As Creature = Me._Creature.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Creature.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Creature.Entity = Nothing
					previousValue.Actors.Remove(Me)
				End If
				Me._Creature.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actors.Add(Me)
					Me._BaseCreature_ID = value.ID
				Else
					Me._BaseCreature_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Creature")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Game_Actor", Storage:="_Game", ThisKey:="Game_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Game() As Game
		Get
			Return Me._Game.Entity
		End Get
		Set
			Dim previousValue As Game = Me._Game.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Game.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Game.Entity = Nothing
					previousValue.Actors.Remove(Me)
				End If
				Me._Game.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actors.Add(Me)
					Me._Game_ID = value.ID
				Else
					Me._Game_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Game")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SystemUser_Actor", Storage:="_Player", ThisKey:="Player_ID", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property Player() As SystemUser
		Get
			Return Me._Player.Entity
		End Get
		Set
			Dim previousValue As SystemUser = Me._Player.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Player.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Player.Entity = Nothing
					previousValue.Actors.Remove(Me)
				End If
				Me._Player.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actors.Add(Me)
					Me._Player_ID = value.UserId
				Else
					Me._Player_ID = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("Player")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Armor_Actor", Storage:="_CurrentArmor", ThisKey:="CurrentArmor_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property CurrentArmor() As Armor
		Get
			Return Me._CurrentArmor.Entity
		End Get
		Set
			Dim previousValue As Armor = Me._CurrentArmor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CurrentArmor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CurrentArmor.Entity = Nothing
					previousValue.Actors.Remove(Me)
				End If
				Me._CurrentArmor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actors.Add(Me)
					Me._CurrentArmor_ID = value.ID
				Else
					Me._CurrentArmor_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CurrentArmor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CriticalAffects(ByVal entity As CriticalAffect)
		Me.SendPropertyChanging
		entity.Actor = Me
	End Sub
	
	Private Sub detach_CriticalAffects(ByVal entity As CriticalAffect)
		Me.SendPropertyChanging
		entity.Actor = Nothing
	End Sub
	
	Private Sub attach_Actions(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.WhoIsActing = Me
	End Sub
	
	Private Sub detach_Actions(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.WhoIsActing = Nothing
	End Sub
	
	Private Sub attach_ActorsAttacks(ByVal entity As ActorsAttack)
		Me.SendPropertyChanging
		entity.Actor = Me
	End Sub
	
	Private Sub detach_ActorsAttacks(ByVal entity As ActorsAttack)
		Me.SendPropertyChanging
		entity.Actor = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._CriticalAffects = New EntitySet(Of CriticalAffect)(AddressOf Me.attach_CriticalAffects, AddressOf Me.detach_CriticalAffects)
		Me._Actions = New EntitySet(Of Action)(AddressOf Me.attach_Actions, AddressOf Me.detach_Actions)
		Me._ActorsAttacks = New EntitySet(Of ActorsAttack)(AddressOf Me.attach_ActorsAttacks, AddressOf Me.detach_ActorsAttacks)
		Me._Character = CType(Nothing, EntityRef(Of Character))
		Me._Creature = CType(Nothing, EntityRef(Of Creature))
		Me._Game = CType(Nothing, EntityRef(Of Game))
		Me._Player = CType(Nothing, EntityRef(Of SystemUser))
		Me._CurrentArmor = CType(Nothing, EntityRef(Of Armor))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CriticalAffects"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class CriticalAffect
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _IsStunned As Boolean
	
	Private _Parry As ParryType
	
	Private _ParryNegative As Integer
	
	Private _Negative As Integer
	
	Private _TimeStart As Double
	
	Private _TimeEnd As Double
	
	Private _Actor_ID As Integer
	
	Private _CriticalActions As EntitySet(Of CriticalAction)
	
	Private _Actor As EntityRef(Of Actor)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnIsStunnedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsStunnedChanged()
    End Sub
    Partial Private Sub OnParryChanging(value As ParryType)
    End Sub
    Partial Private Sub OnParryChanged()
    End Sub
    Partial Private Sub OnParryNegativeChanging(value As Integer)
    End Sub
    Partial Private Sub OnParryNegativeChanged()
    End Sub
    Partial Private Sub OnNegativeChanging(value As Integer)
    End Sub
    Partial Private Sub OnNegativeChanged()
    End Sub
    Partial Private Sub OnTimeStartChanging(value As Double)
    End Sub
    Partial Private Sub OnTimeStartChanged()
    End Sub
    Partial Private Sub OnTimeEndChanging(value As Double)
    End Sub
    Partial Private Sub OnTimeEndChanged()
    End Sub
    Partial Private Sub OnActor_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnActor_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsStunned", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property IsStunned() As Boolean
		Get
			Return Me._IsStunned
		End Get
		Set
			If ((Me._IsStunned = value)  _
						= false) Then
				Me.OnIsStunnedChanging(value)
				Me.SendPropertyChanging
				Me._IsStunned = value
				Me.SendPropertyChanged("IsStunned")
				Me.OnIsStunnedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parry", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Parry() As ParryType
		Get
			Return Me._Parry
		End Get
		Set
			If (Object.Equals(Me._Parry, value) = false) Then
				Me.OnParryChanging(value)
				Me.SendPropertyChanging
				Me._Parry = value
				Me.SendPropertyChanged("Parry")
				Me.OnParryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParryNegative", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property ParryNegative() As Integer
		Get
			Return Me._ParryNegative
		End Get
		Set
			If ((Me._ParryNegative = value)  _
						= false) Then
				Me.OnParryNegativeChanging(value)
				Me.SendPropertyChanging
				Me._ParryNegative = value
				Me.SendPropertyChanged("ParryNegative")
				Me.OnParryNegativeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Negative", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property Negative() As Integer
		Get
			Return Me._Negative
		End Get
		Set
			If ((Me._Negative = value)  _
						= false) Then
				Me.OnNegativeChanging(value)
				Me.SendPropertyChanging
				Me._Negative = value
				Me.SendPropertyChanged("Negative")
				Me.OnNegativeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeStart", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property TimeStart() As Double
		Get
			Return Me._TimeStart
		End Get
		Set
			If ((Me._TimeStart = value)  _
						= false) Then
				Me.OnTimeStartChanging(value)
				Me.SendPropertyChanging
				Me._TimeStart = value
				Me.SendPropertyChanged("TimeStart")
				Me.OnTimeStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeEnd", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property TimeEnd() As Double
		Get
			Return Me._TimeEnd
		End Get
		Set
			If ((Me._TimeEnd = value)  _
						= false) Then
				Me.OnTimeEndChanging(value)
				Me.SendPropertyChanging
				Me._TimeEnd = value
				Me.SendPropertyChanged("TimeEnd")
				Me.OnTimeEndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Actor_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property Actor_ID() As Integer
		Get
			Return Me._Actor_ID
		End Get
		Set
			If ((Me._Actor_ID = value)  _
						= false) Then
				If Me._Actor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnActor_IDChanging(value)
				Me.SendPropertyChanging
				Me._Actor_ID = value
				Me.SendPropertyChanged("Actor_ID")
				Me.OnActor_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CriticalAffect_CriticalAction", Storage:="_CriticalActions", ThisKey:="ID", OtherKey:="Critical_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9, EmitDefaultValue:=false)>  _
	Public Property CriticalActions() As EntitySet(Of CriticalAction)
		Get
			If (Me.serializing  _
						AndAlso (Me._CriticalActions.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._CriticalActions
		End Get
		Set
			Me._CriticalActions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Actor_CriticalAffect", Storage:="_Actor", ThisKey:="Actor_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Actor() As Actor
		Get
			Return Me._Actor.Entity
		End Get
		Set
			Dim previousValue As Actor = Me._Actor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Actor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Actor.Entity = Nothing
					previousValue.CriticalAffects.Remove(Me)
				End If
				Me._Actor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CriticalAffects.Add(Me)
					Me._Actor_ID = value.ID
				Else
					Me._Actor_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Actor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CriticalActions(ByVal entity As CriticalAction)
		Me.SendPropertyChanging
		entity.CriticalAffect = Me
	End Sub
	
	Private Sub detach_CriticalActions(ByVal entity As CriticalAction)
		Me.SendPropertyChanging
		entity.CriticalAffect = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._CriticalActions = New EntitySet(Of CriticalAction)(AddressOf Me.attach_CriticalActions, AddressOf Me.detach_CriticalActions)
		Me._Actor = CType(Nothing, EntityRef(Of Actor))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActorsActions"),  _
 Global.System.Runtime.Serialization.DataContractAttribute(),  _
 Global.System.Data.Linq.Mapping.InheritanceMappingAttribute(Code:="Bleed", Type:=GetType(BleedAction)),  _
 Global.System.Data.Linq.Mapping.InheritanceMappingAttribute(Code:="Critical", Type:=GetType(CriticalAction)),  _
 Global.System.Data.Linq.Mapping.InheritanceMappingAttribute(Code:="Death", Type:=GetType(DeathAction)),  _
 Global.System.Data.Linq.Mapping.InheritanceMappingAttribute(Code:="Normal", Type:=GetType(StandardAction), IsDefault:=true),  _
 Global.System.Data.Linq.Mapping.InheritanceMappingAttribute(Code:="Prep", Type:=GetType(PrepAction)),  _
 Global.System.Data.Linq.Mapping.InheritanceMappingAttribute(Code:="Psychic", Type:=GetType(PsychicAction)),  _
 Global.System.Data.Linq.Mapping.InheritanceMappingAttribute(Code:="SpellEffect", Type:=GetType(SpellEffectAction)),  _
 Global.System.Data.Linq.Mapping.InheritanceMappingAttribute(Code:="Movement", Type:=GetType(MovementAction)),  _
 Global.System.Data.Linq.Mapping.InheritanceMappingAttribute(Code:="Attack", Type:=GetType(AttackAction)),  _
 Global.System.Data.Linq.Mapping.InheritanceMappingAttribute(Code:="Spell", Type:=GetType(SpellAction)),  _
 Global.System.Runtime.Serialization.KnownTypeAttribute(GetType(BleedAction)),  _
 Global.System.Runtime.Serialization.KnownTypeAttribute(GetType(CriticalAction)),  _
 Global.System.Runtime.Serialization.KnownTypeAttribute(GetType(DeathAction)),  _
 Global.System.Runtime.Serialization.KnownTypeAttribute(GetType(StandardAction)),  _
 Global.System.Runtime.Serialization.KnownTypeAttribute(GetType(PrepAction)),  _
 Global.System.Runtime.Serialization.KnownTypeAttribute(GetType(PsychicAction)),  _
 Global.System.Runtime.Serialization.KnownTypeAttribute(GetType(SpellEffectAction)),  _
 Global.System.Runtime.Serialization.KnownTypeAttribute(GetType(MovementAction)),  _
 Global.System.Runtime.Serialization.KnownTypeAttribute(GetType(AttackAction)),  _
 Global.System.Runtime.Serialization.KnownTypeAttribute(GetType(SpellAction))>  _
Partial Public Class Action
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Game_ID As Integer
	
	Private _WhoIsActing_ID As Integer
	
	Private _BaseAction_ID As System.Nullable(Of Integer)
	
	Private _CurrentAttack_ID As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _StartTime As Double
	
	Private _EndTime As Double
	
	Private _Type As ActorActionType
	
	Private _BasePercent As Double
	
	Private _Interrupted As Boolean
	
	Private _Note As String
	
	Private _State As ActionProblem
	
	Private _CurrentModifier As Integer
	
	Private _CriticalGiven As Boolean
	
	Private _LeftPercent As Double
	
	Private _ActionType As ActionTypeEnum
	
	Private _Base As EntityRef(Of BaseAction)
	
	Private _WhoIsActing As EntityRef(Of Actor)
	
	Private _CurrentAttack As EntityRef(Of Attack)
	
	Private _Game As EntityRef(Of Game)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnGame_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGame_IDChanged()
    End Sub
    Partial Private Sub OnWhoIsActing_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWhoIsActing_IDChanged()
    End Sub
    Partial Private Sub OnBaseAction_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBaseAction_IDChanged()
    End Sub
    Partial Private Sub OnCurrentAttack_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCurrentAttack_IDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As Double)
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As Double)
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As ActorActionType)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnBasePercentChanging(value As Double)
    End Sub
    Partial Private Sub OnBasePercentChanged()
    End Sub
    Partial Private Sub OnInterruptedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInterruptedChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As ActionProblem)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnCurrentModifierChanging(value As Integer)
    End Sub
    Partial Private Sub OnCurrentModifierChanged()
    End Sub
    Partial Private Sub OnCriticalGivenChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCriticalGivenChanged()
    End Sub
    Partial Private Sub OnLeftPercentChanging(value As Double)
    End Sub
    Partial Private Sub OnLeftPercentChanged()
    End Sub
    Partial Private Sub OnActionTypeChanging(value As ActionTypeEnum)
    End Sub
    Partial Private Sub OnActionTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Game_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Game_ID() As Integer
		Get
			Return Me._Game_ID
		End Get
		Set
			If ((Me._Game_ID = value)  _
						= false) Then
				If Me._Game.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnGame_IDChanging(value)
				Me.SendPropertyChanging
				Me._Game_ID = value
				Me.SendPropertyChanged("Game_ID")
				Me.OnGame_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WhoIsActing_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property WhoIsActing_ID() As Integer
		Get
			Return Me._WhoIsActing_ID
		End Get
		Set
			If ((Me._WhoIsActing_ID = value)  _
						= false) Then
				If Me._WhoIsActing.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWhoIsActing_IDChanging(value)
				Me.SendPropertyChanging
				Me._WhoIsActing_ID = value
				Me.SendPropertyChanged("WhoIsActing_ID")
				Me.OnWhoIsActing_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseAction_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property BaseAction_ID() As System.Nullable(Of Integer)
		Get
			Return Me._BaseAction_ID
		End Get
		Set
			If (Me._BaseAction_ID.Equals(value) = false) Then
				If Me._Base.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBaseAction_IDChanging(value)
				Me.SendPropertyChanging
				Me._BaseAction_ID = value
				Me.SendPropertyChanged("BaseAction_ID")
				Me.OnBaseAction_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentAttack_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property CurrentAttack_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CurrentAttack_ID
		End Get
		Set
			If (Me._CurrentAttack_ID.Equals(value) = false) Then
				If Me._CurrentAttack.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCurrentAttack_IDChanging(value)
				Me.SendPropertyChanging
				Me._CurrentAttack_ID = value
				Me.SendPropertyChanged("CurrentAttack_ID")
				Me.OnCurrentAttack_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property StartTime() As Double
		Get
			Return Me._StartTime
		End Get
		Set
			If ((Me._StartTime = value)  _
						= false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property EndTime() As Double
		Get
			Return Me._EndTime
		End Get
		Set
			If ((Me._EndTime = value)  _
						= false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsDiscriminator:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property Type() As ActorActionType
		Get
			Return Me._Type
		End Get
		Set
			If (Object.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BasePercent", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property BasePercent() As Double
		Get
			Return Me._BasePercent
		End Get
		Set
			If ((Me._BasePercent = value)  _
						= false) Then
				Me.OnBasePercentChanging(value)
				Me.SendPropertyChanging
				Me._BasePercent = value
				Me.SendPropertyChanged("BasePercent")
				Me.OnBasePercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Interrupted", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property Interrupted() As Boolean
		Get
			Return Me._Interrupted
		End Get
		Set
			If ((Me._Interrupted = value)  _
						= false) Then
				Me.OnInterruptedChanging(value)
				Me.SendPropertyChanging
				Me._Interrupted = value
				Me.SendPropertyChanged("Interrupted")
				Me.OnInterruptedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property State() As ActionProblem
		Get
			Return Me._State
		End Get
		Set
			If (Object.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentModifier", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14)>  _
	Public Property CurrentModifier() As Integer
		Get
			Return Me._CurrentModifier
		End Get
		Set
			If ((Me._CurrentModifier = value)  _
						= false) Then
				Me.OnCurrentModifierChanging(value)
				Me.SendPropertyChanging
				Me._CurrentModifier = value
				Me.SendPropertyChanged("CurrentModifier")
				Me.OnCurrentModifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CriticalGiven", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15)>  _
	Public Property CriticalGiven() As Boolean
		Get
			Return Me._CriticalGiven
		End Get
		Set
			If ((Me._CriticalGiven = value)  _
						= false) Then
				Me.OnCriticalGivenChanging(value)
				Me.SendPropertyChanging
				Me._CriticalGiven = value
				Me.SendPropertyChanged("CriticalGiven")
				Me.OnCriticalGivenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LeftPercent"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16)>  _
	Public Property LeftPercent() As Double
		Get
			Return Me._LeftPercent
		End Get
		Set
			If ((Me._LeftPercent = value)  _
						= false) Then
				Me.OnLeftPercentChanging(value)
				Me.SendPropertyChanging
				Me._LeftPercent = value
				Me.SendPropertyChanged("LeftPercent")
				Me.OnLeftPercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionType", DbType:="nvarchar(50)", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17)>  _
	Public Property ActionType() As ActionTypeEnum
		Get
			Return Me._ActionType
		End Get
		Set
			If (Object.Equals(Me._ActionType, value) = false) Then
				Me.OnActionTypeChanging(value)
				Me.SendPropertyChanging
				Me._ActionType = value
				Me.SendPropertyChanged("ActionType")
				Me.OnActionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BaseAction_Action", Storage:="_Base", ThisKey:="BaseAction_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Base() As BaseAction
		Get
			Return Me._Base.Entity
		End Get
		Set
			Dim previousValue As BaseAction = Me._Base.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Base.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Base.Entity = Nothing
					previousValue.Actions.Remove(Me)
				End If
				Me._Base.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actions.Add(Me)
					Me._BaseAction_ID = value.ID
				Else
					Me._BaseAction_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Base")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Actor_Action", Storage:="_WhoIsActing", ThisKey:="WhoIsActing_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property WhoIsActing() As Actor
		Get
			Return Me._WhoIsActing.Entity
		End Get
		Set
			Dim previousValue As Actor = Me._WhoIsActing.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WhoIsActing.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WhoIsActing.Entity = Nothing
					previousValue.Actions.Remove(Me)
				End If
				Me._WhoIsActing.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actions.Add(Me)
					Me._WhoIsActing_ID = value.ID
				Else
					Me._WhoIsActing_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("WhoIsActing")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Attack_Action", Storage:="_CurrentAttack", ThisKey:="CurrentAttack_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property CurrentAttack() As Attack
		Get
			Return Me._CurrentAttack.Entity
		End Get
		Set
			Dim previousValue As Attack = Me._CurrentAttack.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CurrentAttack.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CurrentAttack.Entity = Nothing
					previousValue.Actions.Remove(Me)
				End If
				Me._CurrentAttack.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actions.Add(Me)
					Me._CurrentAttack_ID = value.ID
				Else
					Me._CurrentAttack_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CurrentAttack")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Game_Action", Storage:="_Game", ThisKey:="Game_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Game() As Game
		Get
			Return Me._Game.Entity
		End Get
		Set
			Dim previousValue As Game = Me._Game.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Game.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Game.Entity = Nothing
					previousValue.GameActions.Remove(Me)
				End If
				Me._Game.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.GameActions.Add(Me)
					Me._Game_ID = value.ID
				Else
					Me._Game_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Game")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Base = CType(Nothing, EntityRef(Of BaseAction))
		Me._WhoIsActing = CType(Nothing, EntityRef(Of Actor))
		Me._CurrentAttack = CType(Nothing, EntityRef(Of Attack))
		Me._Game = CType(Nothing, EntityRef(Of Game))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class BleedAction
	Inherits Action
	
	Private _Bleeder As Integer
	
	Private _Count As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBleederChanging(value As Integer)
    End Sub
    Partial Private Sub OnBleederChanged()
    End Sub
    Partial Private Sub OnCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnCountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bleeder"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Bleeder() As Integer
		Get
			Return Me._Bleeder
		End Get
		Set
			If ((Me._Bleeder = value)  _
						= false) Then
				Me.OnBleederChanging(value)
				Me.SendPropertyChanging
				Me._Bleeder = value
				Me.SendPropertyChanged("Bleeder")
				Me.OnBleederChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Count"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Count() As Integer
		Get
			Return Me._Count
		End Get
		Set
			If ((Me._Count = value)  _
						= false) Then
				Me.OnCountChanging(value)
				Me.SendPropertyChanging
				Me._Count = value
				Me.SendPropertyChanged("Count")
				Me.OnCountChanged
			End If
		End Set
	End Property
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Shadows Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class CriticalAction
	Inherits Action
	
	Private _Critical_ID As System.Nullable(Of Integer)
	
	Private _CriticalAffect As EntityRef(Of CriticalAffect)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCritical_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCritical_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Critical_ID"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Critical_ID() As System.Nullable(Of Integer)
		Get
			Return Me._Critical_ID
		End Get
		Set
			If (Me._Critical_ID.Equals(value) = false) Then
				If Me._CriticalAffect.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCritical_IDChanging(value)
				Me.SendPropertyChanging
				Me._Critical_ID = value
				Me.SendPropertyChanged("Critical_ID")
				Me.OnCritical_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CriticalAffect_CriticalAction", Storage:="_CriticalAffect", ThisKey:="Critical_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property CriticalAffect() As CriticalAffect
		Get
			Return Me._CriticalAffect.Entity
		End Get
		Set
			Dim previousValue As CriticalAffect = Me._CriticalAffect.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CriticalAffect.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CriticalAffect.Entity = Nothing
					previousValue.CriticalActions.Remove(Me)
				End If
				Me._CriticalAffect.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CriticalActions.Add(Me)
					Me._Critical_ID = value.ID
				Else
					Me._Critical_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CriticalAffect")
			End If
		End Set
	End Property
	
	Private Sub Initialize()
		Me._CriticalAffect = CType(Nothing, EntityRef(Of CriticalAffect))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Shadows Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class DeathAction
	Inherits Action
	
	Private _Count As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnCountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Count"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Count() As Integer
		Get
			Return Me._Count
		End Get
		Set
			If ((Me._Count = value)  _
						= false) Then
				Me.OnCountChanging(value)
				Me.SendPropertyChanging
				Me._Count = value
				Me.SendPropertyChanged("Count")
				Me.OnCountChanged
			End If
		End Set
	End Property
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Shadows Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class StandardAction
	Inherits Action
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Shadows Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class PrepAction
	Inherits Action
	
	Private _CurrentRound As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCurrentRoundChanging(value As Integer)
    End Sub
    Partial Private Sub OnCurrentRoundChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Count", Storage:="_CurrentRound"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property CurrentRound() As Integer
		Get
			Return Me._CurrentRound
		End Get
		Set
			If ((Me._CurrentRound = value)  _
						= false) Then
				Me.OnCurrentRoundChanging(value)
				Me.SendPropertyChanging
				Me._CurrentRound = value
				Me.SendPropertyChanged("CurrentRound")
				Me.OnCurrentRoundChanged
			End If
		End Set
	End Property
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Shadows Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class PsychicAction
	Inherits Action
	
	Private _CurrentRound As Integer
	
	Private _TotalRounds As Integer
	
	Private _LevelDifference As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCurrentRoundChanging(value As Integer)
    End Sub
    Partial Private Sub OnCurrentRoundChanged()
    End Sub
    Partial Private Sub OnTotalRoundsChanging(value As Integer)
    End Sub
    Partial Private Sub OnTotalRoundsChanged()
    End Sub
    Partial Private Sub OnLevelDifferenceChanging(value As Integer)
    End Sub
    Partial Private Sub OnLevelDifferenceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Count", Storage:="_CurrentRound"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property CurrentRound() As Integer
		Get
			Return Me._CurrentRound
		End Get
		Set
			If ((Me._CurrentRound = value)  _
						= false) Then
				Me.OnCurrentRoundChanging(value)
				Me.SendPropertyChanging
				Me._CurrentRound = value
				Me.SendPropertyChanged("CurrentRound")
				Me.OnCurrentRoundChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalRounds"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property TotalRounds() As Integer
		Get
			Return Me._TotalRounds
		End Get
		Set
			If ((Me._TotalRounds = value)  _
						= false) Then
				Me.OnTotalRoundsChanging(value)
				Me.SendPropertyChanging
				Me._TotalRounds = value
				Me.SendPropertyChanged("TotalRounds")
				Me.OnTotalRoundsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LevelDifference"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property LevelDifference() As Integer
		Get
			Return Me._LevelDifference
		End Get
		Set
			If ((Me._LevelDifference = value)  _
						= false) Then
				Me.OnLevelDifferenceChanging(value)
				Me.SendPropertyChanging
				Me._LevelDifference = value
				Me.SendPropertyChanged("LevelDifference")
				Me.OnLevelDifferenceChanged
			End If
		End Set
	End Property
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Shadows Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class SpellEffectAction
	Inherits Action
	
	Private _IsHasted As Boolean
	
	Private _IsSlowed As Boolean
	
	Private _HastedPercent As Double
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIsHastedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsHastedChanged()
    End Sub
    Partial Private Sub OnIsSlowedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsSlowedChanged()
    End Sub
    Partial Private Sub OnHastedPercentChanging(value As Double)
    End Sub
    Partial Private Sub OnHastedPercentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHasted"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property IsHasted() As Boolean
		Get
			Return Me._IsHasted
		End Get
		Set
			If ((Me._IsHasted = value)  _
						= false) Then
				Me.OnIsHastedChanging(value)
				Me.SendPropertyChanging
				Me._IsHasted = value
				Me.SendPropertyChanged("IsHasted")
				Me.OnIsHastedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsSlowed"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property IsSlowed() As Boolean
		Get
			Return Me._IsSlowed
		End Get
		Set
			If ((Me._IsSlowed = value)  _
						= false) Then
				Me.OnIsSlowedChanging(value)
				Me.SendPropertyChanging
				Me._IsSlowed = value
				Me.SendPropertyChanged("IsSlowed")
				Me.OnIsSlowedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HastedPercent"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property HastedPercent() As Double
		Get
			Return Me._HastedPercent
		End Get
		Set
			If ((Me._HastedPercent = value)  _
						= false) Then
				Me.OnHastedPercentChanging(value)
				Me.SendPropertyChanging
				Me._HastedPercent = value
				Me.SendPropertyChanged("HastedPercent")
				Me.OnHastedPercentChanged
			End If
		End Set
	End Property
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Shadows Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class MovementAction
	Inherits Action
	
	Private _Count As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnCountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Count"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Count() As Integer
		Get
			Return Me._Count
		End Get
		Set
			If ((Me._Count = value)  _
						= false) Then
				Me.OnCountChanging(value)
				Me.SendPropertyChanging
				Me._Count = value
				Me.SendPropertyChanged("Count")
				Me.OnCountChanged
			End If
		End Set
	End Property
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Shadows Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class AttackAction
	Inherits Action
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Shadows Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class SpellAction
	Inherits Action
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Shadows Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActorsAttacks"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ActorsAttack
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Actor_ID As Integer
	
	Private _Attack_ID As Integer
	
	Private _Actor As EntityRef(Of Actor)
	
	Private _Attack As EntityRef(Of Attack)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnActor_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnActor_IDChanged()
    End Sub
    Partial Private Sub OnAttack_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAttack_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Actor_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Actor_ID() As Integer
		Get
			Return Me._Actor_ID
		End Get
		Set
			If ((Me._Actor_ID = value)  _
						= false) Then
				If Me._Actor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnActor_IDChanging(value)
				Me.SendPropertyChanging
				Me._Actor_ID = value
				Me.SendPropertyChanged("Actor_ID")
				Me.OnActor_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attack_ID", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Attack_ID() As Integer
		Get
			Return Me._Attack_ID
		End Get
		Set
			If ((Me._Attack_ID = value)  _
						= false) Then
				If Me._Attack.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAttack_IDChanging(value)
				Me.SendPropertyChanging
				Me._Attack_ID = value
				Me.SendPropertyChanged("Attack_ID")
				Me.OnAttack_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Actor_ActorsAttack", Storage:="_Actor", ThisKey:="Actor_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Actor() As Actor
		Get
			Return Me._Actor.Entity
		End Get
		Set
			Dim previousValue As Actor = Me._Actor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Actor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Actor.Entity = Nothing
					previousValue.ActorsAttacks.Remove(Me)
				End If
				Me._Actor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActorsAttacks.Add(Me)
					Me._Actor_ID = value.ID
				Else
					Me._Actor_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Actor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Attack_ActorsAttack", Storage:="_Attack", ThisKey:="Attack_ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Attack() As Attack
		Get
			Return Me._Attack.Entity
		End Get
		Set
			Dim previousValue As Attack = Me._Attack.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Attack.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Attack.Entity = Nothing
					previousValue.ActorsAttacks.Remove(Me)
				End If
				Me._Attack.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActorsAttacks.Add(Me)
					Me._Attack_ID = value.ID
				Else
					Me._Attack_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Attack")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Actor = CType(Nothing, EntityRef(Of Actor))
		Me._Attack = CType(Nothing, EntityRef(Of Attack))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Attack_WeaponTypes"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class WeaponType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Abbreviation As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbbreviationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abbreviation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Abbreviation() As String
		Get
			Return Me._Abbreviation
		End Get
		Set
			If (String.Equals(Me._Abbreviation, value) = false) Then
				Me.OnAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._Abbreviation = value
				Me.SendPropertyChanged("Abbreviation")
				Me.OnAbbreviationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class
