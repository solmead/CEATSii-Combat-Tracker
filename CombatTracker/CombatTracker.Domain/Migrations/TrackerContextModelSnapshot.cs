// <auto-generated />
using System;
using CombatTracker.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CombatTracker.Domain.Migrations
{
    [DbContext(typeof(TrackerContext))]
    partial class TrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CombatTracker.Domain.DbArmor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId")
                        .HasColumnName("TiedToID")
                        .HasColumnType("int");

                    b.Property<int>("DB")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("MovingManeuverMod")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CharacterId");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbConstitutionBonusChart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BonusExhaustion")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int>("PerLevelDifference")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Creature_ConsitutionBonusChart");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbCriticalCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Creature_CriticalCodes");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbCriticalIgnore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Creature_CriticalIgnores");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbIQ", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Creature_IQs");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbLevelChart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.HasKey("ID");

                    b.ToTable("Creature_LevelChart");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbLevelChartValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Level_ID")
                        .HasColumnType("int");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.Property<int>("Mod")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Level_ID");

                    b.ToTable("Creature_LevelChartValues");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbOutlook", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.ToTable("Creature_Outlook");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbPace", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Creature_Pace");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbSizeRating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Creature_Sizes");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbSpeedChart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AQChargeLunge")
                        .HasColumnType("int");

                    b.Property<int>("AQInitiative")
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("MSBaseDB")
                        .HasColumnType("int");

                    b.Property<int>("MSFleeEvade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ID");

                    b.ToTable("Creature_SpeedChart");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbWeapon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bonus")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnName("TiedToID")
                        .HasColumnType("int");

                    b.Property<bool>("Is2Handed")
                        .HasColumnType("bit");

                    b.Property<int>("MaxWeight")
                        .HasColumnType("int");

                    b.Property<int>("MinWeight")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("OB")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CharacterId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("CombatTracker.Domain.Models.DbActor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseCharacter_ID")
                        .HasColumnType("int");

                    b.Property<int?>("BaseCreature_ID")
                        .HasColumnType("int");

                    b.Property<int>("BaseInititive")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<int>("ConstitutionStat")
                        .HasColumnType("int");

                    b.Property<int>("CritNegatives")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentArmor_ID")
                        .HasColumnType("int");

                    b.Property<int>("ExhaustionRemaining")
                        .HasColumnType("int");

                    b.Property<int>("ExhaustionTotal")
                        .HasColumnType("int");

                    b.Property<int>("Game_ID")
                        .HasColumnType("int");

                    b.Property<int>("HitsRemaining")
                        .HasColumnType("int");

                    b.Property<int>("HitsTotal")
                        .HasColumnType("int");

                    b.Property<bool>("IsConcentrating")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMoving")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<double>("Movement")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("NextSpellTime")
                        .HasColumnType("float");

                    b.Property<double>("PercentAction")
                        .HasColumnType("float");

                    b.Property<double>("PercentRequiredAdrenalDB")
                        .HasColumnType("float");

                    b.Property<Guid?>("Player_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PowerPointsRemaining")
                        .HasColumnType("int");

                    b.Property<int>("PowerPointsTotal")
                        .HasColumnType("int");

                    b.Property<int>("RolledInititive")
                        .HasColumnType("int");

                    b.Property<int>("StrengthBonus")
                        .HasColumnType("int");

                    b.Property<bool>("Suprised")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<bool>("UsingAdrenalDB")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("BaseCharacter_ID");

                    b.HasIndex("BaseCreature_ID");

                    b.HasIndex("Game_ID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("CombatTracker.Domain.Models.DbActorsAction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("BaseAction_ID")
                        .HasColumnType("int");

                    b.Property<double>("BasePercent")
                        .HasColumnType("float");

                    b.Property<int>("Bleeder")
                        .HasColumnType("int");

                    b.Property<bool>("CharacterAction")
                        .HasColumnType("bit");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("CriticalGiven")
                        .HasColumnType("bit");

                    b.Property<int?>("Critical_ID")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentAttack_ID")
                        .HasColumnType("int");

                    b.Property<int>("CurrentModifier")
                        .HasColumnType("int");

                    b.Property<double>("EndTime")
                        .HasColumnType("float");

                    b.Property<int>("Game_ID")
                        .HasColumnType("int");

                    b.Property<double>("HastedPercent")
                        .HasColumnType("float");

                    b.Property<bool>("Interrupted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHasted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlowed")
                        .HasColumnType("bit");

                    b.Property<double>("LeftPercent")
                        .HasColumnType("float");

                    b.Property<int>("LevelDifference")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("Reoccuring")
                        .HasColumnType("bit");

                    b.Property<double>("StartTime")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TotalRounds")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("WhoIsActing_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BaseAction_ID");

                    b.HasIndex("Critical_ID");

                    b.HasIndex("CurrentAttack_ID");

                    b.HasIndex("Game_ID");

                    b.HasIndex("WhoIsActing_ID");

                    b.ToTable("ActorsActions");
                });

            modelBuilder.Entity("CombatTracker.Domain.Models.DbActorsAttack", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Actor_ID")
                        .HasColumnType("int");

                    b.Property<int>("Attack_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Actor_ID");

                    b.HasIndex("Attack_ID");

                    b.ToTable("ActorsAttacks");
                });

            modelBuilder.Entity("CombatTracker.Domain.Models.DbCriticalAffect", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Actor_ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsStunned")
                        .HasColumnType("bit");

                    b.Property<int>("Negative")
                        .HasColumnType("int");

                    b.Property<string>("Parry")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ParryNegative")
                        .HasColumnType("int");

                    b.Property<double>("TimeEnd")
                        .HasColumnType("float");

                    b.Property<double>("TimeStart")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("Actor_ID");

                    b.ToTable("CriticalAffects");
                });

            modelBuilder.Entity("CombatTracker.Domain.Models.DbGame", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CurrentTime")
                        .HasColumnType("float");

                    b.Property<Guid?>("GM_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GameType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Actions.DbActionDefinition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionGroup_ID")
                        .HasColumnType("int");

                    b.Property<double>("BasePercent")
                        .HasColumnType("float");

                    b.Property<bool>("IsAttack")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpell")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("NextAction_ID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("ActionGroup_ID");

                    b.HasIndex("NextAction_ID");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Actions.DbActionGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ID");

                    b.ToTable("ActionGroups");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Attacks.Charts.DbAttackType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("HasDB")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSize")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Attack_Types");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Attacks.Charts.DbCriticalType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Attack_CriticalTypes");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Attacks.Charts.DbWeaponType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Attack_WeaponTypes");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Attacks.DbAttack", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdditionalCritsIsOr")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatureOn_ID")
                        .HasColumnType("int");

                    b.Property<string>("CriticalLevel")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DamageMultiplier")
                        .HasColumnType("int");

                    b.Property<int>("MaxOB")
                        .HasColumnType("int");

                    b.Property<int?>("NextRoundSuccess_ID")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("OB")
                        .HasColumnType("int");

                    b.Property<int?>("ParentAttack_ID")
                        .HasColumnType("int");

                    b.Property<double>("PercentChance")
                        .HasColumnType("float");

                    b.Property<int?>("Size_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ThisRoundSuccess_ID")
                        .HasColumnType("int");

                    b.Property<int>("Type_ID")
                        .HasColumnType("int");

                    b.Property<int?>("UseCriticalInstead_ID")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponUsed_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatureOn_ID");

                    b.HasIndex("NextRoundSuccess_ID");

                    b.HasIndex("Size_ID");

                    b.HasIndex("ThisRoundSuccess_ID");

                    b.HasIndex("Type_ID");

                    b.HasIndex("UseCriticalInstead_ID");

                    b.HasIndex("WeaponUsed_ID");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Attacks.DbAttacksAddCrit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttackID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Critical_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AttackID");

                    b.HasIndex("Critical_ID");

                    b.ToTable("AttacksAddCrits");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Creatures.Charts.DbConstitutionBonusChartValues", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Chart_ID")
                        .HasColumnType("int");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.Property<int>("Mod")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Chart_ID");

                    b.ToTable("Creature_ConstitutionBonusChartValues");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Creatures.DbCreature", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AQRating_ID")
                        .HasColumnType("int");

                    b.Property<int>("AT")
                        .HasColumnType("int");

                    b.Property<int>("BaseHits")
                        .HasColumnType("int");

                    b.Property<int>("BaseLevel")
                        .HasColumnType("int");

                    b.Property<int>("BaseMove")
                        .HasColumnType("int");

                    b.Property<int>("Book_ID")
                        .HasColumnType("int");

                    b.Property<int>("CriticalsIgnore_ID")
                        .HasColumnType("int");

                    b.Property<int>("Criticals_ID")
                        .HasColumnType("int");

                    b.Property<int>("DB")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("GameType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Habitat")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("HitMod_ID")
                        .HasColumnType("int");

                    b.Property<int>("IQ_ID")
                        .HasColumnType("int");

                    b.Property<int>("LevelMod_ID")
                        .HasColumnType("int");

                    b.Property<int>("MMBonus")
                        .HasColumnType("int");

                    b.Property<int>("MSRating_ID")
                        .HasColumnType("int");

                    b.Property<int>("MaxEncountered")
                        .HasColumnType("int");

                    b.Property<int>("MaxPace_ID")
                        .HasColumnType("int");

                    b.Property<int>("MinEncountered")
                        .HasColumnType("int");

                    b.Property<int>("Outlook_ID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int>("Size_ID")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ID");

                    b.HasIndex("AQRating_ID");

                    b.HasIndex("Book_ID");

                    b.HasIndex("CriticalsIgnore_ID");

                    b.HasIndex("Criticals_ID");

                    b.HasIndex("HitMod_ID");

                    b.HasIndex("IQ_ID");

                    b.HasIndex("LevelMod_ID");

                    b.HasIndex("MSRating_ID");

                    b.HasIndex("MaxPace_ID");

                    b.HasIndex("Outlook_ID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("Size_ID");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.DbBook", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Magic.DbPsychicRefractoryPeriodEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LevelMax")
                        .HasColumnType("int");

                    b.Property<int>("LevelMin")
                        .HasColumnType("int");

                    b.Property<int>("Mod")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PsychicRefractoryPeriodMod");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Players.DbCharacter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseInititive")
                        .HasColumnType("int");

                    b.Property<int>("ExhaustionPoints")
                        .HasColumnType("int");

                    b.Property<string>("GameType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<double>("PercentRequiredAdrenalDB")
                        .HasColumnType("float");

                    b.Property<int>("PowerPoints")
                        .HasColumnType("int");

                    b.Property<int>("StrengthBonus")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("WalkSpeed")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CombatTracker.Entities.Security.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbArmor", b =>
                {
                    b.HasOne("CombatTracker.Domain.Reference.Players.DbCharacter", "Character")
                        .WithMany("Armors")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CombatTracker.Domain.DbLevelChartValue", b =>
                {
                    b.HasOne("CombatTracker.Domain.DbLevelChart", "Chart")
                        .WithMany("Values")
                        .HasForeignKey("Level_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombatTracker.Domain.DbWeapon", b =>
                {
                    b.HasOne("CombatTracker.Domain.Reference.Players.DbCharacter", "Character")
                        .WithMany("Weapons")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CombatTracker.Domain.Models.DbActor", b =>
                {
                    b.HasOne("CombatTracker.Domain.Reference.Players.DbCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("BaseCharacter_ID");

                    b.HasOne("CombatTracker.Domain.Reference.Creatures.DbCreature", "Creature")
                        .WithMany()
                        .HasForeignKey("BaseCreature_ID");

                    b.HasOne("CombatTracker.Domain.Models.DbGame", "Game")
                        .WithMany("Actors")
                        .HasForeignKey("Game_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombatTracker.Domain.Models.DbActorsAction", b =>
                {
                    b.HasOne("CombatTracker.Domain.Reference.Actions.DbActionDefinition", "Action")
                        .WithMany()
                        .HasForeignKey("BaseAction_ID");

                    b.HasOne("CombatTracker.Domain.Models.DbCriticalAffect", "CriticalAffect")
                        .WithMany()
                        .HasForeignKey("Critical_ID");

                    b.HasOne("CombatTracker.Domain.Reference.Attacks.DbAttack", "CurrentAttack")
                        .WithMany()
                        .HasForeignKey("CurrentAttack_ID");

                    b.HasOne("CombatTracker.Domain.Models.DbGame", "Game")
                        .WithMany("ActorsActions")
                        .HasForeignKey("Game_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.Models.DbActor", "Actor")
                        .WithMany("Actions")
                        .HasForeignKey("WhoIsActing_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombatTracker.Domain.Models.DbActorsAttack", b =>
                {
                    b.HasOne("CombatTracker.Domain.Models.DbActor", "Actor")
                        .WithMany("Attacks")
                        .HasForeignKey("Actor_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.Reference.Attacks.DbAttack", "Attack")
                        .WithMany()
                        .HasForeignKey("Attack_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombatTracker.Domain.Models.DbCriticalAffect", b =>
                {
                    b.HasOne("CombatTracker.Domain.Models.DbActor", "Actor")
                        .WithMany("CriticalAffects")
                        .HasForeignKey("Actor_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Actions.DbActionDefinition", b =>
                {
                    b.HasOne("CombatTracker.Domain.Reference.Actions.DbActionGroup", "ActionGroup")
                        .WithMany("Actions")
                        .HasForeignKey("ActionGroup_ID");

                    b.HasOne("CombatTracker.Domain.Reference.Actions.DbActionDefinition", "NextAction")
                        .WithMany()
                        .HasForeignKey("NextAction_ID");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Attacks.DbAttack", b =>
                {
                    b.HasOne("CombatTracker.Domain.Reference.Creatures.DbCreature", "Creature")
                        .WithMany("Attacks")
                        .HasForeignKey("CreatureOn_ID");

                    b.HasOne("CombatTracker.Domain.Reference.Attacks.DbAttack", "NextRoundSuccess")
                        .WithMany()
                        .HasForeignKey("NextRoundSuccess_ID");

                    b.HasOne("CombatTracker.Domain.DbSizeRating", "SizeRating")
                        .WithMany()
                        .HasForeignKey("Size_ID");

                    b.HasOne("CombatTracker.Domain.Reference.Attacks.DbAttack", "ThisRoundSuccess")
                        .WithMany()
                        .HasForeignKey("ThisRoundSuccess_ID");

                    b.HasOne("CombatTracker.Domain.Reference.Attacks.Charts.DbAttackType", "AttackType")
                        .WithMany()
                        .HasForeignKey("Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.Reference.Attacks.Charts.DbCriticalType", "CriticalUseInstead")
                        .WithMany()
                        .HasForeignKey("UseCriticalInstead_ID");

                    b.HasOne("CombatTracker.Domain.DbWeapon", "WeaponUsed")
                        .WithMany()
                        .HasForeignKey("WeaponUsed_ID");
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Attacks.DbAttacksAddCrit", b =>
                {
                    b.HasOne("CombatTracker.Domain.Reference.Attacks.DbAttack", "Attack")
                        .WithMany("AdditionalCrits")
                        .HasForeignKey("AttackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.Reference.Attacks.Charts.DbCriticalType", "CriticalType")
                        .WithMany()
                        .HasForeignKey("Critical_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Creatures.Charts.DbConstitutionBonusChartValues", b =>
                {
                    b.HasOne("CombatTracker.Domain.DbConstitutionBonusChart", "Chart")
                        .WithMany("Values")
                        .HasForeignKey("Chart_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombatTracker.Domain.Reference.Creatures.DbCreature", b =>
                {
                    b.HasOne("CombatTracker.Domain.DbSpeedChart", "AQRating")
                        .WithMany()
                        .HasForeignKey("AQRating_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.Reference.DbBook", "Book")
                        .WithMany("Creatures")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.DbCriticalIgnore", "CriticalIgnore")
                        .WithMany()
                        .HasForeignKey("CriticalsIgnore_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.DbCriticalCode", "Criticals")
                        .WithMany()
                        .HasForeignKey("Criticals_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.DbConstitutionBonusChart", "HitMod")
                        .WithMany()
                        .HasForeignKey("HitMod_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.DbIQ", "IQ")
                        .WithMany()
                        .HasForeignKey("IQ_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.DbLevelChart", "LevelMod")
                        .WithMany()
                        .HasForeignKey("LevelMod_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.DbSpeedChart", "MSRating")
                        .WithMany()
                        .HasForeignKey("MSRating_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.DbPace", "MaxPace")
                        .WithMany()
                        .HasForeignKey("MaxPace_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Domain.DbOutlook", "Outlook")
                        .WithMany()
                        .HasForeignKey("Outlook_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Entities.Security.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("CombatTracker.Domain.DbSizeRating", "Size")
                        .WithMany()
                        .HasForeignKey("Size_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CombatTracker.Entities.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CombatTracker.Entities.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CombatTracker.Entities.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CombatTracker.Entities.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
