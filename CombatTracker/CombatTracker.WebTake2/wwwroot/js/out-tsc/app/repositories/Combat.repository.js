var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from "rxjs";
import { catchError } from "rxjs/operators";
var CombatRepository = /** @class */ (function () {
    function CombatRepository(_httpClient) {
        var _this = this;
        this._httpClient = _httpClient;
        // delete: api/Combat/deleteArmor?id=${id}
        //public deleteArmor = (id: number, callback: (data: void)=>void) : void => {
        //	this.deleteArmorObserve(id).subscribe(response => callback(response));
        //}
        this.deleteArmorAsync = function (id) {
            return new Promise(function (resolve, reject) {
                _this.deleteArmor(id)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.deleteArmor = function (id) {
            var _Url = "api/Combat/deleteArmor?id=" + id;
            return _this._httpClient.delete(_Url)
                .pipe(catchError(_this.handleError));
        };
        // delete: api/Combat/deleteAttack?id=${id}
        //public deleteAttack = (id: number, callback: (data: void)=>void) : void => {
        //	this.deleteAttackObserve(id).subscribe(response => callback(response));
        //}
        this.deleteAttackAsync = function (id) {
            return new Promise(function (resolve, reject) {
                _this.deleteAttack(id)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.deleteAttack = function (id) {
            var _Url = "api/Combat/deleteAttack?id=" + id;
            return _this._httpClient.delete(_Url)
                .pipe(catchError(_this.handleError));
        };
        // delete: api/Combat/deleteWeapon?id=${id}
        //public deleteWeapon = (id: number, callback: (data: void)=>void) : void => {
        //	this.deleteWeaponObserve(id).subscribe(response => callback(response));
        //}
        this.deleteWeaponAsync = function (id) {
            return new Promise(function (resolve, reject) {
                _this.deleteWeapon(id)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.deleteWeapon = function (id) {
            var _Url = "api/Combat/deleteWeapon?id=" + id;
            return _this._httpClient.delete(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Combat/getArmor?id=${id}
        //public getArmor = (id: number, callback: (data: Armor)=>void) : void => {
        //	this.getArmorObserve(id).subscribe(response => callback(response));
        //}
        this.getArmorAsync = function (id) {
            return new Promise(function (resolve, reject) {
                _this.getArmor(id)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getArmor = function (id) {
            var _Url = "api/Combat/getArmor?id=" + id;
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Combat/getArmors
        //public getArmors = (, callback: (data: Armor[])=>void) : void => {
        //	this.getArmorsObserve().subscribe(response => callback(response));
        //}
        this.getArmorsAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getArmors()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getArmors = function () {
            var _Url = "api/Combat/getArmors";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Combat/getArmorsOnCharacter?characterId=${characterId}
        //public getArmorsOnCharacter = (characterId: number, callback: (data: Armor[])=>void) : void => {
        //	this.getArmorsOnCharacterObserve(characterId).subscribe(response => callback(response));
        //}
        this.getArmorsOnCharacterAsync = function (characterId) {
            return new Promise(function (resolve, reject) {
                _this.getArmorsOnCharacter(characterId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getArmorsOnCharacter = function (characterId) {
            var _Url = "api/Combat/getArmorsOnCharacter?characterId=" + characterId;
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Combat/getAttack?id=${id}
        //public getAttack = (id: number, callback: (data: Attack)=>void) : void => {
        //	this.getAttackObserve(id).subscribe(response => callback(response));
        //}
        this.getAttackAsync = function (id) {
            return new Promise(function (resolve, reject) {
                _this.getAttack(id)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getAttack = function (id) {
            var _Url = "api/Combat/getAttack?id=" + id;
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Combat/getAttacks
        //public getAttacks = (, callback: (data: Attack[])=>void) : void => {
        //	this.getAttacksObserve().subscribe(response => callback(response));
        //}
        this.getAttacksAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getAttacks()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getAttacks = function () {
            var _Url = "api/Combat/getAttacks";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Combat/getAttacksOnActor?actorId=${actorId}
        //public getAttacksOnActor = (actorId: number, callback: (data: Attack[])=>void) : void => {
        //	this.getAttacksOnActorObserve(actorId).subscribe(response => callback(response));
        //}
        this.getAttacksOnActorAsync = function (actorId) {
            return new Promise(function (resolve, reject) {
                _this.getAttacksOnActor(actorId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getAttacksOnActor = function (actorId) {
            var _Url = "api/Combat/getAttacksOnActor?actorId=" + actorId;
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Combat/getAttacksOnCreature?creatureId=${creatureId}
        //public getAttacksOnCreature = (creatureId: number, callback: (data: Attack[])=>void) : void => {
        //	this.getAttacksOnCreatureObserve(creatureId).subscribe(response => callback(response));
        //}
        this.getAttacksOnCreatureAsync = function (creatureId) {
            return new Promise(function (resolve, reject) {
                _this.getAttacksOnCreature(creatureId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getAttacksOnCreature = function (creatureId) {
            var _Url = "api/Combat/getAttacksOnCreature?creatureId=" + creatureId;
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Combat/getWeapon?id=${id}
        //public getWeapon = (id: number, callback: (data: Weapon)=>void) : void => {
        //	this.getWeaponObserve(id).subscribe(response => callback(response));
        //}
        this.getWeaponAsync = function (id) {
            return new Promise(function (resolve, reject) {
                _this.getWeapon(id)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getWeapon = function (id) {
            var _Url = "api/Combat/getWeapon?id=" + id;
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Combat/getWeapons
        //public getWeapons = (, callback: (data: Weapon[])=>void) : void => {
        //	this.getWeaponsObserve().subscribe(response => callback(response));
        //}
        this.getWeaponsAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getWeapons()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getWeapons = function () {
            var _Url = "api/Combat/getWeapons";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Combat/getWeaponsOnCharacter?characterId=${characterId}
        //public getWeaponsOnCharacter = (characterId: number, callback: (data: Weapon[])=>void) : void => {
        //	this.getWeaponsOnCharacterObserve(characterId).subscribe(response => callback(response));
        //}
        this.getWeaponsOnCharacterAsync = function (characterId) {
            return new Promise(function (resolve, reject) {
                _this.getWeaponsOnCharacter(characterId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getWeaponsOnCharacter = function (characterId) {
            var _Url = "api/Combat/getWeaponsOnCharacter?characterId=" + characterId;
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Combat/saveArmor
        //public saveArmor = (armor: Armor, callback: (data: Armor)=>void) : void => {
        //	this.saveArmorObserve(armor).subscribe(response => callback(response));
        //}
        this.saveArmorAsync = function (armor) {
            return new Promise(function (resolve, reject) {
                _this.saveArmor(armor)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.saveArmor = function (armor) {
            var _Url = "api/Combat/saveArmor";
            return _this._httpClient.post(_Url, armor)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Combat/saveAttack
        //public saveAttack = (attack: Attack, callback: (data: Attack)=>void) : void => {
        //	this.saveAttackObserve(attack).subscribe(response => callback(response));
        //}
        this.saveAttackAsync = function (attack) {
            return new Promise(function (resolve, reject) {
                _this.saveAttack(attack)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.saveAttack = function (attack) {
            var _Url = "api/Combat/saveAttack";
            return _this._httpClient.post(_Url, attack)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Combat/saveAttackOnActor?actorId=${actorId}
        //public saveAttackOnActor = (actorId: number, attack: Attack, callback: (data: Attack)=>void) : void => {
        //	this.saveAttackOnActorObserve(actorId, attack).subscribe(response => callback(response));
        //}
        this.saveAttackOnActorAsync = function (actorId, attack) {
            return new Promise(function (resolve, reject) {
                _this.saveAttackOnActor(actorId, attack)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.saveAttackOnActor = function (actorId, attack) {
            var _Url = "api/Combat/saveAttackOnActor?actorId=" + actorId;
            return _this._httpClient.post(_Url, actorId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Combat/saveWeapon
        //public saveWeapon = (weapon: Weapon, callback: (data: Weapon)=>void) : void => {
        //	this.saveWeaponObserve(weapon).subscribe(response => callback(response));
        //}
        this.saveWeaponAsync = function (weapon) {
            return new Promise(function (resolve, reject) {
                _this.saveWeapon(weapon)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.saveWeapon = function (weapon) {
            var _Url = "api/Combat/saveWeapon";
            return _this._httpClient.post(_Url, weapon)
                .pipe(catchError(_this.handleError));
        };
    }
    // Utility
    CombatRepository.prototype.handleError = function (error) {
        console.error(error);
        var customError = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText;
        }
        return Observable.throw(customError || 'Server error');
    };
    CombatRepository = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], CombatRepository);
    return CombatRepository;
}());
export { CombatRepository };
//# sourceMappingURL=Combat.repository.js.map