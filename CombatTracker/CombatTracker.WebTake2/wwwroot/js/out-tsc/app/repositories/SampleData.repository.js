var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from "rxjs";
import { catchError } from "rxjs/operators";
var SampleDataRepository = /** @class */ (function () {
    function SampleDataRepository(_httpClient) {
        var _this = this;
        this._httpClient = _httpClient;
        // get: api/SampleData/weatherForecasts
        //public weatherForecasts = (, callback: (data: WeatherForecast[])=>void) : void => {
        //	this.weatherForecastsObserve().subscribe(response => callback(response));
        //}
        this.weatherForecastsAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.weatherForecasts()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.weatherForecasts = function () {
            var _Url = "api/SampleData/weatherForecasts";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
    }
    // Utility
    SampleDataRepository.prototype.handleError = function (error) {
        console.error(error);
        var customError = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText;
        }
        return Observable.throw(customError || 'Server error');
    };
    SampleDataRepository = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], SampleDataRepository);
    return SampleDataRepository;
}());
export { SampleDataRepository };
//# sourceMappingURL=SampleData.repository.js.map