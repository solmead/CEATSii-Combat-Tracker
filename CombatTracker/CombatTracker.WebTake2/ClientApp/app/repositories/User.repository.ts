


//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import {Observable} from "rxjs";
import { map, catchError } from "rxjs/operators";

    import * as Enums from '../entities/EnumDefinitions'
    import { User } from '../entities/User';

@Injectable()
export class UserRepository {

    constructor(private _httpClient: HttpClient) { }
    
    // get: api/User/

	//public currentUser = (, callback: (data: User)=>void) : void => {
	//	this.currentUserObserve().subscribe(response => callback(response));
	//}

	public currentUserAsync = () : Promise<User> => {

        return new Promise<User>((resolve, reject) => {
            this.currentUser()
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public currentUser = () : Observable<User> => {
        var _Url = `api/User/`;
            return this._httpClient.get<User>(_Url)
                .pipe(catchError(this.handleError));
	};

    
    // Utility
    private handleError(error: HttpErrorResponse) {
        console.error(error);
        let customError: string = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText
        }
        return Observable.throw(customError || 'Server error');
    }
}



