var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from "rxjs";
import { catchError } from "rxjs/operators";
var ReferenceRepository = /** @class */ (function () {
    function ReferenceRepository(_httpClient) {
        var _this = this;
        this._httpClient = _httpClient;
        // get: api/Reference/getActionGroups
        //public getActionGroups = (, callback: (data: ActionGroup[])=>void) : void => {
        //	this.getActionGroupsObserve().subscribe(response => callback(response));
        //}
        this.getActionGroupsAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getActionGroups()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getActionGroups = function () {
            var _Url = "api/Reference/getActionGroups";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getActions?groupId=${groupId}
        //public getActions = (groupId: number, callback: (data: ActionDefinition[])=>void) : void => {
        //	this.getActionsObserve(groupId).subscribe(response => callback(response));
        //}
        this.getActionsAsync = function (groupId) {
            return new Promise(function (resolve, reject) {
                _this.getActions(groupId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getActions = function (groupId) {
            var _Url = "api/Reference/getActions?groupId=" + groupId;
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getConstitutionBonusCharts
        //public getConstitutionBonusCharts = (, callback: (data: ConstitutionBonusChart[])=>void) : void => {
        //	this.getConstitutionBonusChartsObserve().subscribe(response => callback(response));
        //}
        this.getConstitutionBonusChartsAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getConstitutionBonusCharts()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getConstitutionBonusCharts = function () {
            var _Url = "api/Reference/getConstitutionBonusCharts";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getCriticalCodes
        //public getCriticalCodes = (, callback: (data: CriticalCode[])=>void) : void => {
        //	this.getCriticalCodesObserve().subscribe(response => callback(response));
        //}
        this.getCriticalCodesAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getCriticalCodes()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getCriticalCodes = function () {
            var _Url = "api/Reference/getCriticalCodes";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getCriticalIgnores
        //public getCriticalIgnores = (, callback: (data: CriticalIgnore[])=>void) : void => {
        //	this.getCriticalIgnoresObserve().subscribe(response => callback(response));
        //}
        this.getCriticalIgnoresAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getCriticalIgnores()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getCriticalIgnores = function () {
            var _Url = "api/Reference/getCriticalIgnores";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getIQs
        //public getIQs = (, callback: (data: IQ[])=>void) : void => {
        //	this.getIQsObserve().subscribe(response => callback(response));
        //}
        this.getIQsAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getIQs()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getIQs = function () {
            var _Url = "api/Reference/getIQs";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getLevelCharts
        //public getLevelCharts = (, callback: (data: LevelChart[])=>void) : void => {
        //	this.getLevelChartsObserve().subscribe(response => callback(response));
        //}
        this.getLevelChartsAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getLevelCharts()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getLevelCharts = function () {
            var _Url = "api/Reference/getLevelCharts";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getOutlooks
        //public getOutlooks = (, callback: (data: Outlook[])=>void) : void => {
        //	this.getOutlooksObserve().subscribe(response => callback(response));
        //}
        this.getOutlooksAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getOutlooks()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getOutlooks = function () {
            var _Url = "api/Reference/getOutlooks";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getPaces
        //public getPaces = (, callback: (data: Pace[])=>void) : void => {
        //	this.getPacesObserve().subscribe(response => callback(response));
        //}
        this.getPacesAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getPaces()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getPaces = function () {
            var _Url = "api/Reference/getPaces";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getSizeRatings
        //public getSizeRatings = (, callback: (data: SizeRating[])=>void) : void => {
        //	this.getSizeRatingsObserve().subscribe(response => callback(response));
        //}
        this.getSizeRatingsAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getSizeRatings()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getSizeRatings = function () {
            var _Url = "api/Reference/getSizeRatings";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getSpeedCharts
        //public getSpeedCharts = (, callback: (data: SpeedChart[])=>void) : void => {
        //	this.getSpeedChartsObserve().subscribe(response => callback(response));
        //}
        this.getSpeedChartsAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getSpeedCharts()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getSpeedCharts = function () {
            var _Url = "api/Reference/getSpeedCharts";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getAttackTypes
        //public getAttackTypes = (, callback: (data: AttackType[])=>void) : void => {
        //	this.getAttackTypesObserve().subscribe(response => callback(response));
        //}
        this.getAttackTypesAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getAttackTypes()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getAttackTypes = function () {
            var _Url = "api/Reference/getAttackTypes";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getCriticalTypes
        //public getCriticalTypes = (, callback: (data: CriticalType[])=>void) : void => {
        //	this.getCriticalTypesObserve().subscribe(response => callback(response));
        //}
        this.getCriticalTypesAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getCriticalTypes()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getCriticalTypes = function () {
            var _Url = "api/Reference/getCriticalTypes";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getWeaponTypes
        //public getWeaponTypes = (, callback: (data: WeaponType[])=>void) : void => {
        //	this.getWeaponTypesObserve().subscribe(response => callback(response));
        //}
        this.getWeaponTypesAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getWeaponTypes()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getWeaponTypes = function () {
            var _Url = "api/Reference/getWeaponTypes";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getBooks
        //public getBooks = (, callback: (data: Book[])=>void) : void => {
        //	this.getBooksObserve().subscribe(response => callback(response));
        //}
        this.getBooksAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getBooks()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getBooks = function () {
            var _Url = "api/Reference/getBooks";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // get: api/Reference/getPsychicRefractoryPeriodEntries
        //public getPsychicRefractoryPeriodEntries = (, callback: (data: PsychicRefractoryPeriodEntry[])=>void) : void => {
        //	this.getPsychicRefractoryPeriodEntriesObserve().subscribe(response => callback(response));
        //}
        this.getPsychicRefractoryPeriodEntriesAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getPsychicRefractoryPeriodEntries()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getPsychicRefractoryPeriodEntries = function () {
            var _Url = "api/Reference/getPsychicRefractoryPeriodEntries";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
    }
    // Utility
    ReferenceRepository.prototype.handleError = function (error) {
        console.error(error);
        var customError = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText;
        }
        return Observable.throw(customError || 'Server error');
    };
    ReferenceRepository = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], ReferenceRepository);
    return ReferenceRepository;
}());
export { ReferenceRepository };
//# sourceMappingURL=Reference.repository.js.map