var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from "rxjs";
import { catchError } from "rxjs/operators";
var EncounterRepository = /** @class */ (function () {
    function EncounterRepository(_httpClient) {
        var _this = this;
        this._httpClient = _httpClient;
        // get: api/Encounter/getCurrentGame
        //public getCurrentGame = (, callback: (data: Game)=>void) : void => {
        //	this.getCurrentGameObserve().subscribe(response => callback(response));
        //}
        this.getCurrentGameAsync = function () {
            return new Promise(function (resolve, reject) {
                _this.getCurrentGame()
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.getCurrentGame = function () {
            var _Url = "api/Encounter/getCurrentGame";
            return _this._httpClient.get(_Url)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/setCurrentGame?gameId=${gameId}
        //public setCurrentGame = (gameId: number, callback: (data: Game)=>void) : void => {
        //	this.setCurrentGameObserve(gameId).subscribe(response => callback(response));
        //}
        this.setCurrentGameAsync = function (gameId) {
            return new Promise(function (resolve, reject) {
                _this.setCurrentGame(gameId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.setCurrentGame = function (gameId) {
            var _Url = "api/Encounter/setCurrentGame?gameId=" + gameId;
            return _this._httpClient.post(_Url, gameId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/createActorFromCreature?creatureId=${creatureId}
        //public createActorFromCreature = (creatureId: number, callback: (data: Actor)=>void) : void => {
        //	this.createActorFromCreatureObserve(creatureId).subscribe(response => callback(response));
        //}
        this.createActorFromCreatureAsync = function (creatureId) {
            return new Promise(function (resolve, reject) {
                _this.createActorFromCreature(creatureId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.createActorFromCreature = function (creatureId) {
            var _Url = "api/Encounter/createActorFromCreature?creatureId=" + creatureId;
            return _this._httpClient.post(_Url, creatureId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/createActorFromCharacter?characterId=${characterId}&rolledInit=${rolledInit}
        //public createActorFromCharacter = (characterId: number, rolledInit: number, callback: (data: Actor)=>void) : void => {
        //	this.createActorFromCharacterObserve(characterId, rolledInit).subscribe(response => callback(response));
        //}
        this.createActorFromCharacterAsync = function (characterId, rolledInit) {
            return new Promise(function (resolve, reject) {
                _this.createActorFromCharacter(characterId, rolledInit)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.createActorFromCharacter = function (characterId, rolledInit) {
            var _Url = "api/Encounter/createActorFromCharacter?characterId=" + characterId + "&rolledInit=" + rolledInit;
            return _this._httpClient.post(_Url, characterId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/moveToNext?none=${none}
        //public moveToNext = (none: boolean, callback: (data: MoveNextResult)=>void) : void => {
        //	this.moveToNextObserve(none).subscribe(response => callback(response));
        //}
        this.moveToNextAsync = function (none) {
            return new Promise(function (resolve, reject) {
                _this.moveToNext(none)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.moveToNext = function (none) {
            var _Url = "api/Encounter/moveToNext?none=" + none;
            return _this._httpClient.post(_Url, none)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/proposeActionUnconscious?actorId=${actorId}
        //public proposeActionUnconscious = (actorId: number, callback: (data: BaseAction)=>void) : void => {
        //	this.proposeActionUnconsciousObserve(actorId).subscribe(response => callback(response));
        //}
        this.proposeActionUnconsciousAsync = function (actorId) {
            return new Promise(function (resolve, reject) {
                _this.proposeActionUnconscious(actorId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.proposeActionUnconscious = function (actorId) {
            var _Url = "api/Encounter/proposeActionUnconscious?actorId=" + actorId;
            return _this._httpClient.post(_Url, actorId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/proposeAction?actionDefId=${actionDefId}&whomId=${whomId}&modifier=${modifier}&attackId=${attackId}
        //public proposeAction = (actionDefId: number, whomId: number, modifier: number, attackId: number, callback: (data: BaseAction)=>void) : void => {
        //	this.proposeActionObserve(actionDefId, whomId, modifier, attackId).subscribe(response => callback(response));
        //}
        this.proposeActionAsync = function (actionDefId, whomId, modifier, attackId) {
            return new Promise(function (resolve, reject) {
                _this.proposeAction(actionDefId, whomId, modifier, attackId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.proposeAction = function (actionDefId, whomId, modifier, attackId) {
            var _Url = "api/Encounter/proposeAction?actionDefId=" + actionDefId + "&whomId=" + whomId + "&modifier=" + modifier + "&attackId=" + attackId;
            return _this._httpClient.post(_Url, actionDefId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/proposeActionContinue?previousActionId=${previousActionId}&whomId=${whomId}
        //public proposeActionContinue = (previousActionId: number, whomId: number, callback: (data: BaseAction)=>void) : void => {
        //	this.proposeActionContinueObserve(previousActionId, whomId).subscribe(response => callback(response));
        //}
        this.proposeActionContinueAsync = function (previousActionId, whomId) {
            return new Promise(function (resolve, reject) {
                _this.proposeActionContinue(previousActionId, whomId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.proposeActionContinue = function (previousActionId, whomId) {
            var _Url = "api/Encounter/proposeActionContinue?previousActionId=" + previousActionId + "&whomId=" + whomId;
            return _this._httpClient.post(_Url, previousActionId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/addBleedEffect?whomId=${whomId}&bleedRate=${bleedRate}
        //public addBleedEffect = (whomId: number, bleedRate: number, callback: (data: BaseAction)=>void) : void => {
        //	this.addBleedEffectObserve(whomId, bleedRate).subscribe(response => callback(response));
        //}
        this.addBleedEffectAsync = function (whomId, bleedRate) {
            return new Promise(function (resolve, reject) {
                _this.addBleedEffect(whomId, bleedRate)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.addBleedEffect = function (whomId, bleedRate) {
            var _Url = "api/Encounter/addBleedEffect?whomId=" + whomId + "&bleedRate=" + bleedRate;
            return _this._httpClient.post(_Url, whomId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/addCriticalEffect?whomId=${whomId}&rounds=${rounds}
        //public addCriticalEffect = (whomId: number, crit: CriticalEffect, rounds: number, callback: (data: BaseAction)=>void) : void => {
        //	this.addCriticalEffectObserve(whomId, crit, rounds).subscribe(response => callback(response));
        //}
        this.addCriticalEffectAsync = function (whomId, crit, rounds) {
            return new Promise(function (resolve, reject) {
                _this.addCriticalEffect(whomId, crit, rounds)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.addCriticalEffect = function (whomId, crit, rounds) {
            var _Url = "api/Encounter/addCriticalEffect?whomId=" + whomId + "&rounds=" + rounds;
            return _this._httpClient.post(_Url, whomId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/addPsychicEffect?whomId=${whomId}&psychicLevel=${psychicLevel}
        //public addPsychicEffect = (whomId: number, psychicLevel: number, callback: (data: BaseAction)=>void) : void => {
        //	this.addPsychicEffectObserve(whomId, psychicLevel).subscribe(response => callback(response));
        //}
        this.addPsychicEffectAsync = function (whomId, psychicLevel) {
            return new Promise(function (resolve, reject) {
                _this.addPsychicEffect(whomId, psychicLevel)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.addPsychicEffect = function (whomId, psychicLevel) {
            var _Url = "api/Encounter/addPsychicEffect?whomId=" + whomId + "&psychicLevel=" + psychicLevel;
            return _this._httpClient.post(_Url, whomId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/addSpellEffect?effectedActorId=${effectedActorId}&casterId=${casterId}&spellName=${encodeURIComponent(spellName)}&rounds=${rounds}&hastePercent=${hastePercent}
        //public addSpellEffect = (effectedActorId: number, casterId: number, spellName: string, rounds: number, hastePercent: number, callback: (data: BaseAction)=>void) : void => {
        //	this.addSpellEffectObserve(effectedActorId, casterId, spellName, rounds, hastePercent).subscribe(response => callback(response));
        //}
        this.addSpellEffectAsync = function (effectedActorId, casterId, spellName, rounds, hastePercent) {
            return new Promise(function (resolve, reject) {
                _this.addSpellEffect(effectedActorId, casterId, spellName, rounds, hastePercent)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.addSpellEffect = function (effectedActorId, casterId, spellName, rounds, hastePercent) {
            var _Url = "api/Encounter/addSpellEffect?effectedActorId=" + effectedActorId + "&casterId=" + casterId + "&spellName=" + encodeURIComponent(spellName) + "&rounds=" + rounds + "&hastePercent=" + hastePercent;
            return _this._httpClient.post(_Url, effectedActorId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/removeEffect?actionId=${actionId}
        //public removeEffect = (actionId: number, callback: (data: void)=>void) : void => {
        //	this.removeEffectObserve(actionId).subscribe(response => callback(response));
        //}
        this.removeEffectAsync = function (actionId) {
            return new Promise(function (resolve, reject) {
                _this.removeEffect(actionId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.removeEffect = function (actionId) {
            var _Url = "api/Encounter/removeEffect?actionId=" + actionId;
            return _this._httpClient.post(_Url, actionId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/removeCriticalsFromActor?whomId=${whomId}&count=${count}
        //public removeCriticalsFromActor = (whomId: number, count: number, callback: (data: void)=>void) : void => {
        //	this.removeCriticalsFromActorObserve(whomId, count).subscribe(response => callback(response));
        //}
        this.removeCriticalsFromActorAsync = function (whomId, count) {
            return new Promise(function (resolve, reject) {
                _this.removeCriticalsFromActor(whomId, count)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.removeCriticalsFromActor = function (whomId, count) {
            var _Url = "api/Encounter/removeCriticalsFromActor?whomId=" + whomId + "&count=" + count;
            return _this._httpClient.post(_Url, whomId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/doProposedAction?whomId=${whomId}
        //public doProposedAction = (whomId: number, callback: (data: void)=>void) : void => {
        //	this.doProposedActionObserve(whomId).subscribe(response => callback(response));
        //}
        this.doProposedActionAsync = function (whomId) {
            return new Promise(function (resolve, reject) {
                _this.doProposedAction(whomId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.doProposedAction = function (whomId) {
            var _Url = "api/Encounter/doProposedAction?whomId=" + whomId;
            return _this._httpClient.post(_Url, whomId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/setModifierOnAction?actionId=${actionId}&modifier=${modifier}
        //public setModifierOnAction = (actionId: number, modifier: number, callback: (data: void)=>void) : void => {
        //	this.setModifierOnActionObserve(actionId, modifier).subscribe(response => callback(response));
        //}
        this.setModifierOnActionAsync = function (actionId, modifier) {
            return new Promise(function (resolve, reject) {
                _this.setModifierOnAction(actionId, modifier)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.setModifierOnAction = function (actionId, modifier) {
            var _Url = "api/Encounter/setModifierOnAction?actionId=" + actionId + "&modifier=" + modifier;
            return _this._httpClient.post(_Url, actionId)
                .pipe(catchError(_this.handleError));
        };
        // post: api/Encounter/setAttackOnAction?actionId=${actionId}&attackId=${attackId}
        //public setAttackOnAction = (actionId: number, attackId: number, callback: (data: void)=>void) : void => {
        //	this.setAttackOnActionObserve(actionId, attackId).subscribe(response => callback(response));
        //}
        this.setAttackOnActionAsync = function (actionId, attackId) {
            return new Promise(function (resolve, reject) {
                _this.setAttackOnAction(actionId, attackId)
                    .subscribe(function (res) {
                    resolve(res);
                });
            });
        };
        this.setAttackOnAction = function (actionId, attackId) {
            var _Url = "api/Encounter/setAttackOnAction?actionId=" + actionId + "&attackId=" + attackId;
            return _this._httpClient.post(_Url, actionId)
                .pipe(catchError(_this.handleError));
        };
    }
    // Utility
    EncounterRepository.prototype.handleError = function (error) {
        console.error(error);
        var customError = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText;
        }
        return Observable.throw(customError || 'Server error');
    };
    EncounterRepository = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], EncounterRepository);
    return EncounterRepository;
}());
export { EncounterRepository };
//# sourceMappingURL=Encounter.repository.js.map