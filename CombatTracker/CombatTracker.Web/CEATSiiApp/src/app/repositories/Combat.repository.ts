


//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import {Observable, throwError} from "rxjs";
import { map, catchError } from "rxjs/operators";

    import * as Enums from '@/entities/EnumDefinitions'
    import { Armor } from '@/entities';
import { Attack } from '@/entities';
import { Weapon } from '@/entities';


@Injectable({ providedIn: 'root' })
export class CombatRepository {

    constructor(private _httpClient: HttpClient) { }
    
    // delete: api/Combat/deleteArmor?id=${id}

	//public deleteArmor = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteArmorObserve(id).subscribe(response => callback(response));
	//}

	public deleteArmorAsync = (id: number) : Promise<void> => {

        return new Promise<void>((resolve, reject) => {
            this.deleteArmor(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public deleteArmor = (id: number) : Observable<void> => {
        var _Url = `api/Combat/deleteArmor?id=${id}`;
            return this._httpClient.delete<void>(_Url);
	};

    
    // delete: api/Combat/deleteAttack?id=${id}

	//public deleteAttack = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteAttackObserve(id).subscribe(response => callback(response));
	//}

	public deleteAttackAsync = (id: number) : Promise<void> => {

        return new Promise<void>((resolve, reject) => {
            this.deleteAttack(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public deleteAttack = (id: number) : Observable<void> => {
        var _Url = `api/Combat/deleteAttack?id=${id}`;
            return this._httpClient.delete<void>(_Url);
	};

    
    // delete: api/Combat/deleteWeapon?id=${id}

	//public deleteWeapon = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteWeaponObserve(id).subscribe(response => callback(response));
	//}

	public deleteWeaponAsync = (id: number) : Promise<void> => {

        return new Promise<void>((resolve, reject) => {
            this.deleteWeapon(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public deleteWeapon = (id: number) : Observable<void> => {
        var _Url = `api/Combat/deleteWeapon?id=${id}`;
            return this._httpClient.delete<void>(_Url);
	};

    
    // get: api/Combat/getArmor?id=${id}

	//public getArmor = (id: number, callback: (data: Armor)=>void) : void => {
	//	this.getArmorObserve(id).subscribe(response => callback(response));
	//}

	public getArmorAsync = (id: number) : Promise<Armor> => {

        return new Promise<Armor>((resolve, reject) => {
            this.getArmor(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getArmor = (id: number) : Observable<Armor> => {
        var _Url = `api/Combat/getArmor?id=${id}`;
            return this._httpClient.get<Armor>(_Url);
	};

    
    // get: api/Combat/getArmors

	//public getArmors = (, callback: (data: Armor[])=>void) : void => {
	//	this.getArmorsObserve().subscribe(response => callback(response));
	//}

	public getArmorsAsync = () : Promise<Armor[]> => {

        return new Promise<Armor[]>((resolve, reject) => {
            this.getArmors()
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getArmors = () : Observable<Armor[]> => {
        var _Url = `api/Combat/getArmors`;
            return this._httpClient.get<Armor[]>(_Url);
	};

    
    // get: api/Combat/getArmorsOnCharacter?characterId=${characterId}

	//public getArmorsOnCharacter = (characterId: number, callback: (data: Armor[])=>void) : void => {
	//	this.getArmorsOnCharacterObserve(characterId).subscribe(response => callback(response));
	//}

	public getArmorsOnCharacterAsync = (characterId: number) : Promise<Armor[]> => {

        return new Promise<Armor[]>((resolve, reject) => {
            this.getArmorsOnCharacter(characterId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getArmorsOnCharacter = (characterId: number) : Observable<Armor[]> => {
        var _Url = `api/Combat/getArmorsOnCharacter?characterId=${characterId}`;
            return this._httpClient.get<Armor[]>(_Url);
	};

    
    // get: api/Combat/getAttack?id=${id}

	//public getAttack = (id: number, callback: (data: Attack)=>void) : void => {
	//	this.getAttackObserve(id).subscribe(response => callback(response));
	//}

	public getAttackAsync = (id: number) : Promise<Attack> => {

        return new Promise<Attack>((resolve, reject) => {
            this.getAttack(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getAttack = (id: number) : Observable<Attack> => {
        var _Url = `api/Combat/getAttack?id=${id}`;
            return this._httpClient.get<Attack>(_Url);
	};

    
    // get: api/Combat/getAttacks

	//public getAttacks = (, callback: (data: Attack[])=>void) : void => {
	//	this.getAttacksObserve().subscribe(response => callback(response));
	//}

	public getAttacksAsync = () : Promise<Attack[]> => {

        return new Promise<Attack[]>((resolve, reject) => {
            this.getAttacks()
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getAttacks = () : Observable<Attack[]> => {
        var _Url = `api/Combat/getAttacks`;
            return this._httpClient.get<Attack[]>(_Url);
	};

    
    // get: api/Combat/getAttacksOnActor?actorId=${actorId}

	//public getAttacksOnActor = (actorId: number, callback: (data: Attack[])=>void) : void => {
	//	this.getAttacksOnActorObserve(actorId).subscribe(response => callback(response));
	//}

	public getAttacksOnActorAsync = (actorId: number) : Promise<Attack[]> => {

        return new Promise<Attack[]>((resolve, reject) => {
            this.getAttacksOnActor(actorId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getAttacksOnActor = (actorId: number) : Observable<Attack[]> => {
        var _Url = `api/Combat/getAttacksOnActor?actorId=${actorId}`;
            return this._httpClient.get<Attack[]>(_Url);
	};

    
    // get: api/Combat/getAttacksOnCreature?creatureId=${creatureId}

	//public getAttacksOnCreature = (creatureId: number, callback: (data: Attack[])=>void) : void => {
	//	this.getAttacksOnCreatureObserve(creatureId).subscribe(response => callback(response));
	//}

	public getAttacksOnCreatureAsync = (creatureId: number) : Promise<Attack[]> => {

        return new Promise<Attack[]>((resolve, reject) => {
            this.getAttacksOnCreature(creatureId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getAttacksOnCreature = (creatureId: number) : Observable<Attack[]> => {
        var _Url = `api/Combat/getAttacksOnCreature?creatureId=${creatureId}`;
            return this._httpClient.get<Attack[]>(_Url);
	};

    
    // get: api/Combat/getWeapon?id=${id}

	//public getWeapon = (id: number, callback: (data: Weapon)=>void) : void => {
	//	this.getWeaponObserve(id).subscribe(response => callback(response));
	//}

	public getWeaponAsync = (id: number) : Promise<Weapon> => {

        return new Promise<Weapon>((resolve, reject) => {
            this.getWeapon(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getWeapon = (id: number) : Observable<Weapon> => {
        var _Url = `api/Combat/getWeapon?id=${id}`;
            return this._httpClient.get<Weapon>(_Url);
	};

    
    // get: api/Combat/getWeapons

	//public getWeapons = (, callback: (data: Weapon[])=>void) : void => {
	//	this.getWeaponsObserve().subscribe(response => callback(response));
	//}

	public getWeaponsAsync = () : Promise<Weapon[]> => {

        return new Promise<Weapon[]>((resolve, reject) => {
            this.getWeapons()
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getWeapons = () : Observable<Weapon[]> => {
        var _Url = `api/Combat/getWeapons`;
            return this._httpClient.get<Weapon[]>(_Url);
	};

    
    // get: api/Combat/getWeaponsOnCharacter?characterId=${characterId}

	//public getWeaponsOnCharacter = (characterId: number, callback: (data: Weapon[])=>void) : void => {
	//	this.getWeaponsOnCharacterObserve(characterId).subscribe(response => callback(response));
	//}

	public getWeaponsOnCharacterAsync = (characterId: number) : Promise<Weapon[]> => {

        return new Promise<Weapon[]>((resolve, reject) => {
            this.getWeaponsOnCharacter(characterId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getWeaponsOnCharacter = (characterId: number) : Observable<Weapon[]> => {
        var _Url = `api/Combat/getWeaponsOnCharacter?characterId=${characterId}`;
            return this._httpClient.get<Weapon[]>(_Url);
	};

    
    // post: api/Combat/saveArmor

	//public saveArmor = (armor: Armor, callback: (data: Armor)=>void) : void => {
	//	this.saveArmorObserve(armor).subscribe(response => callback(response));
	//}

	public saveArmorAsync = (armor: Armor) : Promise<Armor> => {

        return new Promise<Armor>((resolve, reject) => {
            this.saveArmor(armor)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public saveArmor = (armor: Armor) : Observable<Armor> => {
        var _Url = `api/Combat/saveArmor`;
            return this._httpClient.post<Armor>(_Url, armor);
	};

    
    // post: api/Combat/saveAttack

	//public saveAttack = (attack: Attack, callback: (data: Attack)=>void) : void => {
	//	this.saveAttackObserve(attack).subscribe(response => callback(response));
	//}

	public saveAttackAsync = (attack: Attack) : Promise<Attack> => {

        return new Promise<Attack>((resolve, reject) => {
            this.saveAttack(attack)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public saveAttack = (attack: Attack) : Observable<Attack> => {
        var _Url = `api/Combat/saveAttack`;
            return this._httpClient.post<Attack>(_Url, attack);
	};

    
    // post: api/Combat/saveAttackOnActor?actorId=${actorId}

	//public saveAttackOnActor = (actorId: number, attack: Attack, callback: (data: Attack)=>void) : void => {
	//	this.saveAttackOnActorObserve(actorId, attack).subscribe(response => callback(response));
	//}

	public saveAttackOnActorAsync = (actorId: number, attack: Attack) : Promise<Attack> => {

        return new Promise<Attack>((resolve, reject) => {
            this.saveAttackOnActor(actorId, attack)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public saveAttackOnActor = (actorId: number, attack: Attack) : Observable<Attack> => {
        var _Url = `api/Combat/saveAttackOnActor?actorId=${actorId}`;
            return this._httpClient.post<Attack>(_Url, actorId);
	};

    
    // post: api/Combat/saveWeapon

	//public saveWeapon = (weapon: Weapon, callback: (data: Weapon)=>void) : void => {
	//	this.saveWeaponObserve(weapon).subscribe(response => callback(response));
	//}

	public saveWeaponAsync = (weapon: Weapon) : Promise<Weapon> => {

        return new Promise<Weapon>((resolve, reject) => {
            this.saveWeapon(weapon)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public saveWeapon = (weapon: Weapon) : Observable<Weapon> => {
        var _Url = `api/Combat/saveWeapon`;
            return this._httpClient.post<Weapon>(_Url, weapon);
	};

    
}




