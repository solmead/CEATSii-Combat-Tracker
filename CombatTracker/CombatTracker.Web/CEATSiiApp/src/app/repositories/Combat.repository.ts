


//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import {Observable, throwError} from "rxjs";
import { map, catchError } from "rxjs/operators";
import { AlertService } from '@/services/Alert.service';

    import * as Enums from '@/entities/EnumDefinitions'
    import { Armor } from '@/entities';
import { Attack } from '@/entities';
import { Weapon } from '@/entities';

var version = "1";

@Injectable({ providedIn: 'root' })
export class CombatRepository {

    constructor(private _httpClient: HttpClient, private _alertService: AlertService) { }
    
    // delete: api/v${version}/Combat/deleteArmor/${id}

	//public deleteArmor = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteArmorObserve(id).subscribe(response => callback(response));
	//}

	public deleteArmorAsync = (id: number) : Promise<void> => {

        return new Promise<void>((resolve, reject) => {
            this.deleteArmor(id)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public deleteArmor = (id: number) : Observable<void> => {
        id = (id == null ? <number><any>"" : id);
        
            var _Url = `api/v${version}/Combat/deleteArmor/${id}`;

            return this._httpClient.delete<void>(_Url)
                .pipe(
                        map((data) => {
                            
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // delete: api/v${version}/Combat/deleteAttack/${id}

	//public deleteAttack = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteAttackObserve(id).subscribe(response => callback(response));
	//}

	public deleteAttackAsync = (id: number) : Promise<void> => {

        return new Promise<void>((resolve, reject) => {
            this.deleteAttack(id)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public deleteAttack = (id: number) : Observable<void> => {
        id = (id == null ? <number><any>"" : id);
        
            var _Url = `api/v${version}/Combat/deleteAttack/${id}`;

            return this._httpClient.delete<void>(_Url)
                .pipe(
                        map((data) => {
                            
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // delete: api/v${version}/Combat/deleteWeapon/${id}

	//public deleteWeapon = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteWeaponObserve(id).subscribe(response => callback(response));
	//}

	public deleteWeaponAsync = (id: number) : Promise<void> => {

        return new Promise<void>((resolve, reject) => {
            this.deleteWeapon(id)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public deleteWeapon = (id: number) : Observable<void> => {
        id = (id == null ? <number><any>"" : id);
        
            var _Url = `api/v${version}/Combat/deleteWeapon/${id}`;

            return this._httpClient.delete<void>(_Url)
                .pipe(
                        map((data) => {
                            
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Combat/getArmor/${id}

	//public getArmor = (id: number, callback: (data: Armor)=>void) : void => {
	//	this.getArmorObserve(id).subscribe(response => callback(response));
	//}

	public getArmorAsync = (id: number) : Promise<Armor> => {

        return new Promise<Armor>((resolve, reject) => {
            this.getArmor(id)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public getArmor = (id: number) : Observable<Armor> => {
        id = (id == null ? <number><any>"" : id);
        
            var _Url = `api/v${version}/Combat/getArmor/${id}`;

            return this._httpClient.get<Armor>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new Armor(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Combat/getArmors

	//public getArmors = (, callback: (data: Armor[])=>void) : void => {
	//	this.getArmorsObserve().subscribe(response => callback(response));
	//}

	public getArmorsAsync = () : Promise<Armor[]> => {

        return new Promise<Armor[]>((resolve, reject) => {
            this.getArmors()
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public getArmors = () : Observable<Armor[]> => {
        
            var _Url = `api/v${version}/Combat/getArmors`;

            return this._httpClient.get<Armor[]>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = data.map((dt) => Object.assign(new Armor(), dt));
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Combat/getArmorsOnCharacter/${characterId}

	//public getArmorsOnCharacter = (characterId: number, callback: (data: Armor[])=>void) : void => {
	//	this.getArmorsOnCharacterObserve(characterId).subscribe(response => callback(response));
	//}

	public getArmorsOnCharacterAsync = (characterId: number) : Promise<Armor[]> => {

        return new Promise<Armor[]>((resolve, reject) => {
            this.getArmorsOnCharacter(characterId)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public getArmorsOnCharacter = (characterId: number) : Observable<Armor[]> => {
        characterId = (characterId == null ? <number><any>"" : characterId);
        
            var _Url = `api/v${version}/Combat/getArmorsOnCharacter/${characterId}`;

            return this._httpClient.get<Armor[]>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = data.map((dt) => Object.assign(new Armor(), dt));
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Combat/getAttack/${id}

	//public getAttack = (id: number, callback: (data: Attack)=>void) : void => {
	//	this.getAttackObserve(id).subscribe(response => callback(response));
	//}

	public getAttackAsync = (id: number) : Promise<Attack> => {

        return new Promise<Attack>((resolve, reject) => {
            this.getAttack(id)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public getAttack = (id: number) : Observable<Attack> => {
        id = (id == null ? <number><any>"" : id);
        
            var _Url = `api/v${version}/Combat/getAttack/${id}`;

            return this._httpClient.get<Attack>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new Attack(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Combat/getAttacks

	//public getAttacks = (, callback: (data: Attack[])=>void) : void => {
	//	this.getAttacksObserve().subscribe(response => callback(response));
	//}

	public getAttacksAsync = () : Promise<Attack[]> => {

        return new Promise<Attack[]>((resolve, reject) => {
            this.getAttacks()
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public getAttacks = () : Observable<Attack[]> => {
        
            var _Url = `api/v${version}/Combat/getAttacks`;

            return this._httpClient.get<Attack[]>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = data.map((dt) => Object.assign(new Attack(), dt));
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Combat/getAttacksOnActor/${actorId}

	//public getAttacksOnActor = (actorId: number, callback: (data: Attack[])=>void) : void => {
	//	this.getAttacksOnActorObserve(actorId).subscribe(response => callback(response));
	//}

	public getAttacksOnActorAsync = (actorId: number) : Promise<Attack[]> => {

        return new Promise<Attack[]>((resolve, reject) => {
            this.getAttacksOnActor(actorId)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public getAttacksOnActor = (actorId: number) : Observable<Attack[]> => {
        actorId = (actorId == null ? <number><any>"" : actorId);
        
            var _Url = `api/v${version}/Combat/getAttacksOnActor/${actorId}`;

            return this._httpClient.get<Attack[]>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = data.map((dt) => Object.assign(new Attack(), dt));
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Combat/getAttacksOnCreature/${creatureId}

	//public getAttacksOnCreature = (creatureId: number, callback: (data: Attack[])=>void) : void => {
	//	this.getAttacksOnCreatureObserve(creatureId).subscribe(response => callback(response));
	//}

	public getAttacksOnCreatureAsync = (creatureId: number) : Promise<Attack[]> => {

        return new Promise<Attack[]>((resolve, reject) => {
            this.getAttacksOnCreature(creatureId)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public getAttacksOnCreature = (creatureId: number) : Observable<Attack[]> => {
        creatureId = (creatureId == null ? <number><any>"" : creatureId);
        
            var _Url = `api/v${version}/Combat/getAttacksOnCreature/${creatureId}`;

            return this._httpClient.get<Attack[]>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = data.map((dt) => Object.assign(new Attack(), dt));
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Combat/getWeapon/${id}

	//public getWeapon = (id: number, callback: (data: Weapon)=>void) : void => {
	//	this.getWeaponObserve(id).subscribe(response => callback(response));
	//}

	public getWeaponAsync = (id: number) : Promise<Weapon> => {

        return new Promise<Weapon>((resolve, reject) => {
            this.getWeapon(id)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public getWeapon = (id: number) : Observable<Weapon> => {
        id = (id == null ? <number><any>"" : id);
        
            var _Url = `api/v${version}/Combat/getWeapon/${id}`;

            return this._httpClient.get<Weapon>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new Weapon(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Combat/getWeapons

	//public getWeapons = (, callback: (data: Weapon[])=>void) : void => {
	//	this.getWeaponsObserve().subscribe(response => callback(response));
	//}

	public getWeaponsAsync = () : Promise<Weapon[]> => {

        return new Promise<Weapon[]>((resolve, reject) => {
            this.getWeapons()
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public getWeapons = () : Observable<Weapon[]> => {
        
            var _Url = `api/v${version}/Combat/getWeapons`;

            return this._httpClient.get<Weapon[]>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = data.map((dt) => Object.assign(new Weapon(), dt));
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Combat/getWeaponsOnCharacter/${characterId}

	//public getWeaponsOnCharacter = (characterId: number, callback: (data: Weapon[])=>void) : void => {
	//	this.getWeaponsOnCharacterObserve(characterId).subscribe(response => callback(response));
	//}

	public getWeaponsOnCharacterAsync = (characterId: number) : Promise<Weapon[]> => {

        return new Promise<Weapon[]>((resolve, reject) => {
            this.getWeaponsOnCharacter(characterId)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public getWeaponsOnCharacter = (characterId: number) : Observable<Weapon[]> => {
        characterId = (characterId == null ? <number><any>"" : characterId);
        
            var _Url = `api/v${version}/Combat/getWeaponsOnCharacter/${characterId}`;

            return this._httpClient.get<Weapon[]>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = data.map((dt) => Object.assign(new Weapon(), dt));
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // post: api/v${version}/Combat/SaveArmor

	//public saveArmor = (armor: Armor, callback: (data: Armor)=>void) : void => {
	//	this.saveArmorObserve(armor).subscribe(response => callback(response));
	//}

	public saveArmorAsync = (armor: Armor) : Promise<Armor> => {

        return new Promise<Armor>((resolve, reject) => {
            this.saveArmor(armor)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public saveArmor = (armor: Armor) : Observable<Armor> => {
        armor = (armor == null ? <Armor><any>"" : armor);
        
            var _Url = `api/v${version}/Combat/SaveArmor`;

            return this._httpClient.post<Armor>(_Url, armor)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new Armor(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // post: api/v${version}/Combat/SaveAttack

	//public saveAttack = (attack: Attack, callback: (data: Attack)=>void) : void => {
	//	this.saveAttackObserve(attack).subscribe(response => callback(response));
	//}

	public saveAttackAsync = (attack: Attack) : Promise<Attack> => {

        return new Promise<Attack>((resolve, reject) => {
            this.saveAttack(attack)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public saveAttack = (attack: Attack) : Observable<Attack> => {
        attack = (attack == null ? <Attack><any>"" : attack);
        
            var _Url = `api/v${version}/Combat/SaveAttack`;

            return this._httpClient.post<Attack>(_Url, attack)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new Attack(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // post: api/v${version}/Combat/SaveAttackOnActor/${actorId}

	//public saveAttackOnActor = (actorId: number, attack: Attack, callback: (data: Attack)=>void) : void => {
	//	this.saveAttackOnActorObserve(actorId, attack).subscribe(response => callback(response));
	//}

	public saveAttackOnActorAsync = (actorId: number, attack: Attack) : Promise<Attack> => {

        return new Promise<Attack>((resolve, reject) => {
            this.saveAttackOnActor(actorId, attack)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public saveAttackOnActor = (actorId: number, attack: Attack) : Observable<Attack> => {
        actorId = (actorId == null ? <number><any>"" : actorId);
        attack = (attack == null ? <Attack><any>"" : attack);
        
            var _Url = `api/v${version}/Combat/SaveAttackOnActor/${actorId}`;

            return this._httpClient.post<Attack>(_Url, actorId)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new Attack(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // post: api/v${version}/Combat/SaveWeapon

	//public saveWeapon = (weapon: Weapon, callback: (data: Weapon)=>void) : void => {
	//	this.saveWeaponObserve(weapon).subscribe(response => callback(response));
	//}

	public saveWeaponAsync = (weapon: Weapon) : Promise<Weapon> => {

        return new Promise<Weapon>((resolve, reject) => {
            this.saveWeapon(weapon)
            .subscribe((res) => {
                    resolve(res);
                }, (error: string) => {
                    this._alertService.error(error);
                    resolve(null);
                });

        });
	}

	public saveWeapon = (weapon: Weapon) : Observable<Weapon> => {
        weapon = (weapon == null ? <Weapon><any>"" : weapon);
        
            var _Url = `api/v${version}/Combat/SaveWeapon`;

            return this._httpClient.post<Weapon>(_Url, weapon)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new Weapon(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // Utility
    private handleError(error: HttpErrorResponse) {
        
        //debugger;
        console.debug("handleError:" + error);
        //console.error(error);
        let customError: string = "";
        if (error.message) {
            customError = error.message; // error.status === 400 ? error.error : error.statusText
        }
        return throwError(customError || 'Server error');
        //return Observable.throw(customError || 'Server error');
    }
}






