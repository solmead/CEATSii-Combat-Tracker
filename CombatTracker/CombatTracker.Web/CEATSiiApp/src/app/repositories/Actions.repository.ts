


//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import {Observable, throwError} from "rxjs";
import { map, catchError } from "rxjs/operators";

    import * as Enums from '@/entities/EnumDefinitions'
    import { BaseAction } from '@/entities';

var version = "1";

@Injectable({ providedIn: 'root' })
export class ActionsRepository {

    constructor(private _httpClient: HttpClient) { }
    
    // get: api/v${version}/Actions/getActionsOnActor/${actorId}

	//public getActionsOnActor = (actorId: number, callback: (data: BaseAction[])=>void) : void => {
	//	this.getActionsOnActorObserve(actorId).subscribe(response => callback(response));
	//}

	public getActionsOnActorAsync = (actorId: number) : Promise<BaseAction[]> => {

        return new Promise<BaseAction[]>((resolve, reject) => {
            this.getActionsOnActor(actorId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getActionsOnActor = (actorId: number) : Observable<BaseAction[]> => {
        actorId = (actorId == null ? <number><any>"" : actorId);
        
            var _Url = `api/v${version}/Actions/getActionsOnActor/${actorId}`;

            return this._httpClient.get<BaseAction[]>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = data.map((dt) => Object.assign(new BaseAction(), dt));
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Actions/getActionsInGame/${gameId}

	//public getActionsInGame = (gameId: number, callback: (data: BaseAction[])=>void) : void => {
	//	this.getActionsInGameObserve(gameId).subscribe(response => callback(response));
	//}

	public getActionsInGameAsync = (gameId: number) : Promise<BaseAction[]> => {

        return new Promise<BaseAction[]>((resolve, reject) => {
            this.getActionsInGame(gameId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getActionsInGame = (gameId: number) : Observable<BaseAction[]> => {
        gameId = (gameId == null ? <number><any>"" : gameId);
        
            var _Url = `api/v${version}/Actions/getActionsInGame/${gameId}`;

            return this._httpClient.get<BaseAction[]>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = data.map((dt) => Object.assign(new BaseAction(), dt));
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Actions/getAction/${id}

	//public getAction = (id: number, callback: (data: BaseAction)=>void) : void => {
	//	this.getActionObserve(id).subscribe(response => callback(response));
	//}

	public getActionAsync = (id: number) : Promise<BaseAction> => {

        return new Promise<BaseAction>((resolve, reject) => {
            this.getAction(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getAction = (id: number) : Observable<BaseAction> => {
        id = (id == null ? <number><any>"" : id);
        
            var _Url = `api/v${version}/Actions/getAction/${id}`;

            return this._httpClient.get<BaseAction>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new BaseAction(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // post: api/v${version}/Actions/SaveAction

	//public saveAction = (action: BaseAction, callback: (data: BaseAction)=>void) : void => {
	//	this.saveActionObserve(action).subscribe(response => callback(response));
	//}

	public saveActionAsync = (action: BaseAction) : Promise<BaseAction> => {

        return new Promise<BaseAction>((resolve, reject) => {
            this.saveAction(action)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public saveAction = (action: BaseAction) : Observable<BaseAction> => {
        action = (action == null ? <BaseAction><any>"" : action);
        
            var _Url = `api/v${version}/Actions/SaveAction`;

            return this._httpClient.post<BaseAction>(_Url, action)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new BaseAction(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // delete: api/v${version}/Actions/deleteAction/${id}

	//public deleteAction = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteActionObserve(id).subscribe(response => callback(response));
	//}

	public deleteActionAsync = (id: number) : Promise<void> => {

        return new Promise<void>((resolve, reject) => {
            this.deleteAction(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public deleteAction = (id: number) : Observable<void> => {
        id = (id == null ? <number><any>"" : id);
        
            var _Url = `api/v${version}/Actions/deleteAction/${id}`;

            return this._httpClient.delete<void>(_Url)
                .pipe(
                        map((data) => {
                            
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // Utility
    private handleError(error: HttpErrorResponse) {
        console.error(error);
        let customError: string = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText
        }
        return Observable.throw(customError || 'Server error');
    }
}




