


//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import {Observable, throwError} from "rxjs";
import { map, catchError } from "rxjs/operators";

    import * as Enums from '@/entities/EnumDefinitions'
    import { Actor } from '@/entities';

var version = "1";

@Injectable({ providedIn: 'root' })
export class ActorsRepository {

    constructor(private _httpClient: HttpClient) { }
    
    // get: api/v${version}/Actors/getActorsInGame/${gameId}

	//public getActorsInGame = (gameId: number, callback: (data: Actor[])=>void) : void => {
	//	this.getActorsInGameObserve(gameId).subscribe(response => callback(response));
	//}

	public getActorsInGameAsync = (gameId: number) : Promise<Actor[]> => {

        return new Promise<Actor[]>((resolve, reject) => {
            this.getActorsInGame(gameId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getActorsInGame = (gameId: number) : Observable<Actor[]> => {
        gameId = (gameId == null ? <number><any>"" : gameId);
        
            var _Url = `api/v${version}/Actors/getActorsInGame/${gameId}`;

            return this._httpClient.get<Actor[]>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = data.map((dt) => Object.assign(new Actor(), dt));
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // get: api/v${version}/Actors/getActor/${id}

	//public getActor = (id: number, callback: (data: Actor)=>void) : void => {
	//	this.getActorObserve(id).subscribe(response => callback(response));
	//}

	public getActorAsync = (id: number) : Promise<Actor> => {

        return new Promise<Actor>((resolve, reject) => {
            this.getActor(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public getActor = (id: number) : Observable<Actor> => {
        id = (id == null ? <number><any>"" : id);
        
            var _Url = `api/v${version}/Actors/getActor/${id}`;

            return this._httpClient.get<Actor>(_Url)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new Actor(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // post: api/v${version}/Actors/SaveActor

	//public saveActor = (actor: Actor, callback: (data: Actor)=>void) : void => {
	//	this.saveActorObserve(actor).subscribe(response => callback(response));
	//}

	public saveActorAsync = (actor: Actor) : Promise<Actor> => {

        return new Promise<Actor>((resolve, reject) => {
            this.saveActor(actor)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public saveActor = (actor: Actor) : Observable<Actor> => {
        actor = (actor == null ? <Actor><any>"" : actor);
        
            var _Url = `api/v${version}/Actors/SaveActor`;

            return this._httpClient.post<Actor>(_Url, actor)
                .pipe(
                        map((data) => {
                            if (data != null) data = Object.assign(new Actor(), data);
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // delete: api/v${version}/Actors/deleteActor/${id}

	//public deleteActor = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteActorObserve(id).subscribe(response => callback(response));
	//}

	public deleteActorAsync = (id: number) : Promise<void> => {

        return new Promise<void>((resolve, reject) => {
            this.deleteActor(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}

	public deleteActor = (id: number) : Observable<void> => {
        id = (id == null ? <number><any>"" : id);
        
            var _Url = `api/v${version}/Actors/deleteActor/${id}`;

            return this._httpClient.delete<void>(_Url)
                .pipe(
                        map((data) => {
                            
                            return data;
                        }), 
                        catchError(this.handleError)
                );
	};

    
    // Utility
    private handleError(error: HttpErrorResponse) {
        console.error(error);
        let customError: string = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText
        }
        return Observable.throw(customError || 'Server error');
    }
}




