


////*************************DO NOT MODIFY**************************
////
////THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
////PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
////
////*************************DO NOT MODIFY**************************
//import { Injectable } from '@angular/core';
//import { HttpClient, HttpErrorResponse } from '@angular/common/http'; 
//import {Observable} from "rxjs";
//import { map, catchError } from "rxjs/operators";

//    import * as Enums from '../entities/EnumDefinitions'
//    import { IActionResult } from '../entities/IActionResult';

//@Injectable()
//export class HomeRepository {

//    constructor(private _httpClient: HttpClient) { }        
    
//    // post: api/Home/   

//	//public index = (, callback: (data: void)=>void) : void => {
//	//	this.indexObserve().subscribe(response => callback(response));
//	//}

//	public indexAsync = () : Promise<void> => {
        
//        return new Promise<void>((resolve, reject) => {
//            this.index()
//            .subscribe((res) => {
//                    resolve(res);
//                });

//        });
//	}  

//	public index = () : Observable<void> => {
//        var _Url = `api/Home/`;
//            return this._httpClient.post<IActionResult>(_Url, )
//                .pipe(catchError(this.handleError));
//	};

    
//    // post: api/Home/   

//	//public error = (, callback: (data: void)=>void) : void => {
//	//	this.errorObserve().subscribe(response => callback(response));
//	//}

//	public errorAsync = () : Promise<void> => {
        
//        return new Promise<void>((resolve, reject) => {
//            this.error()
//            .subscribe((res) => {
//                    resolve(res);
//                });

//        });
//	}  

//	public error = () : Observable<void> => {
//        var _Url = `api/Home/`;
//            return this._httpClient.post<IActionResult>(_Url, )
//                .pipe(catchError(this.handleError));
//	};

    
//    // Utility
//    private handleError(error: HttpErrorResponse) {
//        console.error(error);
//        let customError: string = "";
//        if (error.error) {
//            customError = error.status === 400 ? error.error : error.statusText
//        }
//        return Observable.throw(customError || 'Server error');
//    }
//}


	