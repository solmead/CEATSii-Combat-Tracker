

//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http'; 
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import "rxjs/add/operator/toPromise";

    import * as Enums from '../entities/EnumDefinitions'
    import { BaseAction } from '../entities/BaseAction';

@Injectable()
export class ActionsRepository {

    constructor(private _httpClient: HttpClient) { }        
    
    // get: api/Actions/getActionsOnActor?actorId=${actorId}   

	//public getActionsOnActor = (actorId: number, callback: (data: BaseAction[])=>void) : void => {
	//	this.getActionsOnActorObserve(actorId).subscribe(response => callback(response));
	//}

	public getActionsOnActorAsync = (actorId: number) : Promise<BaseAction[]> => {
        
        return new Promise<BaseAction[]>((resolve, reject) => {
            this.getActionsOnActor(actorId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public getActionsOnActor = (actorId: number) : Observable<BaseAction[]> => {
        var _Url = `api/Actions/getActionsOnActor?actorId=${actorId}`;
            return this._httpClient.get<BaseAction[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Actions/getActionsInGame?gameId=${gameId}   

	//public getActionsInGame = (gameId: number, callback: (data: BaseAction[])=>void) : void => {
	//	this.getActionsInGameObserve(gameId).subscribe(response => callback(response));
	//}

	public getActionsInGameAsync = (gameId: number) : Promise<BaseAction[]> => {
        
        return new Promise<BaseAction[]>((resolve, reject) => {
            this.getActionsInGame(gameId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public getActionsInGame = (gameId: number) : Observable<BaseAction[]> => {
        var _Url = `api/Actions/getActionsInGame?gameId=${gameId}`;
            return this._httpClient.get<BaseAction[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Actions/getAction?id=${id}   

	//public getAction = (id: number, callback: (data: BaseAction)=>void) : void => {
	//	this.getActionObserve(id).subscribe(response => callback(response));
	//}

	public getActionAsync = (id: number) : Promise<BaseAction> => {
        
        return new Promise<BaseAction>((resolve, reject) => {
            this.getAction(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public getAction = (id: number) : Observable<BaseAction> => {
        var _Url = `api/Actions/getAction?id=${id}`;
            return this._httpClient.get<BaseAction>(_Url)
                .catch(this.handleError);
	};

    
    // post: api/Actions/[action]   

	//public saveAction = (action: BaseAction, callback: (data: BaseAction)=>void) : void => {
	//	this.saveActionObserve(action).subscribe(response => callback(response));
	//}

	public saveActionAsync = (action: BaseAction) : Promise<BaseAction> => {
        
        return new Promise<BaseAction>((resolve, reject) => {
            this.saveAction(action)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public saveAction = (action: BaseAction) : Observable<BaseAction> => {
        var _Url = `api/Actions/[action]`;
            return this._httpClient.post(_Url, action)
                .catch(this.handleError);
	};

    
    // delete: api/Actions/deleteAction?id=${id}   

	//public deleteAction = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteActionObserve(id).subscribe(response => callback(response));
	//}

	public deleteActionAsync = (id: number) : Promise<void> => {
        
        return new Promise<void>((resolve, reject) => {
            this.deleteAction(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public deleteAction = (id: number) : Observable<void> => {
        var _Url = `api/Actions/deleteAction?id=${id}`;
            return this._httpClient.delete(_Url)
                .catch(this.handleError);
	};

    
    // Utility
    private handleError(error: HttpErrorResponse) {
        console.error(error);
        let customError: string = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText
        }
        return Observable.throw(customError || 'Server error');
    }
}


	