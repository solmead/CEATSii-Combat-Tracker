


//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http'; 
import {Observable} from "rxjs";
import { map, catchError } from "rxjs/operators";

    import * as Enums from '../entities/EnumDefinitions'
    import { WeatherForecast } from '../entities/WeatherForecast';

@Injectable()
export class SampleDataRepository {

    constructor(private _httpClient: HttpClient) { }        
    
    // get: api/SampleData/weatherForecasts   

	//public weatherForecasts = (, callback: (data: WeatherForecast[])=>void) : void => {
	//	this.weatherForecastsObserve().subscribe(response => callback(response));
	//}

	public weatherForecastsAsync = () : Promise<WeatherForecast[]> => {
        
        return new Promise<WeatherForecast[]>((resolve, reject) => {
            this.weatherForecasts()
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public weatherForecasts = () : Observable<WeatherForecast[]> => {
        var _Url = `api/SampleData/weatherForecasts`;
            return this._httpClient.get<WeatherForecast[]>(_Url)
                .pipe(catchError(this.handleError));
	};

    
    // Utility
    private handleError(error: HttpErrorResponse) {
        console.error(error);
        let customError: string = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText
        }
        return Observable.throw(customError || 'Server error');
    }
}


	