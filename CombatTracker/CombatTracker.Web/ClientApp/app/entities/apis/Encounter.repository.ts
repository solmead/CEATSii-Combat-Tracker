

//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http'; 
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import "rxjs/add/operator/toPromise";

    import * as Enums from '../classes/EnumDefinitions'
    import { Game } from '../classes/Game';
import { Actor } from '../classes/Actor';

@Injectable()
export class EncounterRepository {

    constructor(private _httpClient: HttpClient) { }        
    
    // get: api/Encounter/getCurrentGame   

	//public getCurrentGame = (, callback: (data: Game)=>void) : void => {
	//	this.getCurrentGameObserve().subscribe(response => callback(response));
	//}

	public getCurrentGameAsync = () : Promise<Game> => {
        
        return new Promise<Game>((resolve, reject) => {
            this.getCurrentGame()
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public getCurrentGame = () : Observable<Game> => {
        var _Url = `api/Encounter/getCurrentGame`;
            return this._httpClient.get<Game>(_Url)
                .catch(this.handleError);
	};

    
    // post: api/Encounter/setCurrentGame?gameId=${gameId}   

	//public setCurrentGame = (gameId: number, callback: (data: Game)=>void) : void => {
	//	this.setCurrentGameObserve(gameId).subscribe(response => callback(response));
	//}

	public setCurrentGameAsync = (gameId: number) : Promise<Game> => {
        
        return new Promise<Game>((resolve, reject) => {
            this.setCurrentGame(gameId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public setCurrentGame = (gameId: number) : Observable<Game> => {
        var _Url = `api/Encounter/setCurrentGame?gameId=${gameId}`;
            return this._httpClient.post(_Url, gameId)
                .catch(this.handleError);
	};

    
    // post: api/Encounter/createActorFromCreature?creatureId=${creatureId}   

	//public createActorFromCreature = (creatureId: number, callback: (data: Actor)=>void) : void => {
	//	this.createActorFromCreatureObserve(creatureId).subscribe(response => callback(response));
	//}

	public createActorFromCreatureAsync = (creatureId: number) : Promise<Actor> => {
        
        return new Promise<Actor>((resolve, reject) => {
            this.createActorFromCreature(creatureId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public createActorFromCreature = (creatureId: number) : Observable<Actor> => {
        var _Url = `api/Encounter/createActorFromCreature?creatureId=${creatureId}`;
            return this._httpClient.post(_Url, creatureId)
                .catch(this.handleError);
	};

    
    // post: api/Encounter/createActorFromCharacter?characterId=${characterId}&rolledInit=${rolledInit}   

	//public createActorFromCharacter = (characterId: number, rolledInit: number, callback: (data: Actor)=>void) : void => {
	//	this.createActorFromCharacterObserve(characterId, rolledInit).subscribe(response => callback(response));
	//}

	public createActorFromCharacterAsync = (characterId: number, rolledInit: number) : Promise<Actor> => {
        
        return new Promise<Actor>((resolve, reject) => {
            this.createActorFromCharacter(characterId, rolledInit)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public createActorFromCharacter = (characterId: number, rolledInit: number) : Observable<Actor> => {
        var _Url = `api/Encounter/createActorFromCharacter?characterId=${characterId}&rolledInit=${rolledInit}`;
            return this._httpClient.post(_Url, characterId)
                .catch(this.handleError);
	};

    
    // Utility
    private handleError(error: HttpErrorResponse) {
        console.error(error);
        let customError: string = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText
        }
        return Observable.throw(customError || 'Server error');
    }
}


	