

//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http'; 
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import "rxjs/add/operator/toPromise";

    import * as Enums from '../classes/EnumDefinitions'
    import { Game } from '../classes/Game';

@Injectable()
export class GameService {

    constructor(private _httpClient: HttpClient) { }        
    
    // get: api/Game/getGames   

	//public getGames = (, callback: (data: Game[])=>void) : void => {
	//	this.getGamesObserve().subscribe(response => callback(response));
	//}

	public getGamesAsync = () : Promise<Game[]> => {
		return this.getGames().first().toPromise();
	}  

	public getGames = () : Observable<Game[]> => {
        var _Url = `api/Game/getGames`;
            return this._httpClient.get<Game[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Game/getGame?id=${id}   

	//public getGame = (id: number, callback: (data: Game)=>void) : void => {
	//	this.getGameObserve(id).subscribe(response => callback(response));
	//}

	public getGameAsync = (id: number) : Promise<Game> => {
		return this.getGame(id).first().toPromise();
	}  

	public getGame = (id: number) : Observable<Game> => {
        var _Url = `api/Game/getGame?id=${id}`;
            return this._httpClient.get<Game>(_Url)
                .catch(this.handleError);
	};

    
    // post: api/Game/saveGame   

	//public saveGame = (game: Game, callback: (data: Game)=>void) : void => {
	//	this.saveGameObserve(game).subscribe(response => callback(response));
	//}

	public saveGameAsync = (game: Game) : Promise<Game> => {
		return this.saveGame(game).first().toPromise();
	}  

	public saveGame = (game: Game) : Observable<Game> => {
        var _Url = `api/Game/saveGame`;
            return this._httpClient.post(_Url, game)
                .catch(this.handleError);
	};

    
    // delete: api/Game/deleteGame?id=${id}   

	//public deleteGame = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteGameObserve(id).subscribe(response => callback(response));
	//}

	public deleteGameAsync = (id: number) : Promise<void> => {
		return this.deleteGame(id).first().toPromise();
	}  

	public deleteGame = (id: number) : Observable<void> => {
        var _Url = `api/Game/deleteGame?id=${id}`;
            return this._httpClient.delete(_Url)
                .catch(this.handleError);
	};

    
    // Utility
    private handleError(error: HttpErrorResponse) {
        console.error(error);
        let customError: string = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText
        }
        return Observable.throw(customError || 'Server error');
    }
}


	