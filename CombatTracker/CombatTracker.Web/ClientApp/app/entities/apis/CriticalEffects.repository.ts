

//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http'; 
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import "rxjs/add/operator/toPromise";

    import * as Enums from '../classes/EnumDefinitions'
    import { CriticalEffect } from '../classes/CriticalEffect';

@Injectable()
export class CriticalEffectsRepository {

    constructor(private _httpClient: HttpClient) { }        
    
    // get: api/CriticalEffects/getCriticalEffects?actorId=${actorId}   

	//public getCriticalEffects = (actorId: number, callback: (data: CriticalEffect[])=>void) : void => {
	//	this.getCriticalEffectsObserve(actorId).subscribe(response => callback(response));
	//}

	public getCriticalEffectsAsync = (actorId: number) : Promise<CriticalEffect[]> => {
        
        return new Promise<CriticalEffect[]>((resolve, reject) => {
            this.getCriticalEffects(actorId)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public getCriticalEffects = (actorId: number) : Observable<CriticalEffect[]> => {
        var _Url = `api/CriticalEffects/getCriticalEffects?actorId=${actorId}`;
            return this._httpClient.get<CriticalEffect[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/CriticalEffects/getCriticalEffect?id=${id}   

	//public getCriticalEffect = (id: number, callback: (data: CriticalEffect)=>void) : void => {
	//	this.getCriticalEffectObserve(id).subscribe(response => callback(response));
	//}

	public getCriticalEffectAsync = (id: number) : Promise<CriticalEffect> => {
        
        return new Promise<CriticalEffect>((resolve, reject) => {
            this.getCriticalEffect(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public getCriticalEffect = (id: number) : Observable<CriticalEffect> => {
        var _Url = `api/CriticalEffects/getCriticalEffect?id=${id}`;
            return this._httpClient.get<CriticalEffect>(_Url)
                .catch(this.handleError);
	};

    
    // post: api/CriticalEffects/saveCriticalEffect   

	//public saveCriticalEffect = (criticalEffect: CriticalEffect, callback: (data: CriticalEffect)=>void) : void => {
	//	this.saveCriticalEffectObserve(criticalEffect).subscribe(response => callback(response));
	//}

	public saveCriticalEffectAsync = (criticalEffect: CriticalEffect) : Promise<CriticalEffect> => {
        
        return new Promise<CriticalEffect>((resolve, reject) => {
            this.saveCriticalEffect(criticalEffect)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public saveCriticalEffect = (criticalEffect: CriticalEffect) : Observable<CriticalEffect> => {
        var _Url = `api/CriticalEffects/saveCriticalEffect`;
            return this._httpClient.post(_Url, criticalEffect)
                .catch(this.handleError);
	};

    
    // delete: api/CriticalEffects/deleteCriticalEffect?id=${id}   

	//public deleteCriticalEffect = (id: number, callback: (data: void)=>void) : void => {
	//	this.deleteCriticalEffectObserve(id).subscribe(response => callback(response));
	//}

	public deleteCriticalEffectAsync = (id: number) : Promise<void> => {
        
        return new Promise<void>((resolve, reject) => {
            this.deleteCriticalEffect(id)
            .subscribe((res) => {
                    resolve(res);
                });

        });
	}  

	public deleteCriticalEffect = (id: number) : Observable<void> => {
        var _Url = `api/CriticalEffects/deleteCriticalEffect?id=${id}`;
            return this._httpClient.delete(_Url)
                .catch(this.handleError);
	};

    
    // Utility
    private handleError(error: HttpErrorResponse) {
        console.error(error);
        let customError: string = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText
        }
        return Observable.throw(customError || 'Server error');
    }
}


	