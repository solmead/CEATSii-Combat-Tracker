

//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http'; 
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import "rxjs/add/operator/toPromise";

    import * as Enums from '../classes/EnumDefinitions'
    import { ActionGroup } from '../classes/ActionGroup';
import { ActionDefinition } from '../classes/ActionDefinition';
import { ConstitutionBonusChart } from '../classes/ConstitutionBonusChart';
import { CriticalCode } from '../classes/CriticalCode';
import { CriticalIgnore } from '../classes/CriticalIgnore';
import { IQ } from '../classes/IQ';
import { LevelChart } from '../classes/LevelChart';
import { Outlook } from '../classes/Outlook';
import { Pace } from '../classes/Pace';
import { SizeRating } from '../classes/SizeRating';
import { SpeedChart } from '../classes/SpeedChart';
import { AttackType } from '../classes/AttackType';
import { CriticalType } from '../classes/CriticalType';
import { WeaponType } from '../classes/WeaponType';
import { Book } from '../classes/Book';
import { PsychicRefractoryPeriodEntry } from '../classes/PsychicRefractoryPeriodEntry';

@Injectable()
export class ReferenceService {

    constructor(private _httpClient: HttpClient) { }        
    
    // get: api/Reference/getActionGroups   

	//public getActionGroups = (, callback: (data: ActionGroup[])=>void) : void => {
	//	this.getActionGroupsObserve().subscribe(response => callback(response));
	//}

	public getActionGroupsAsync = () : Promise<ActionGroup[]> => {
		return this.getActionGroups().first().toPromise();
	}  

	public getActionGroups = () : Observable<ActionGroup[]> => {
        var _Url = `api/Reference/getActionGroups`;
            return this._httpClient.get<ActionGroup[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getActions?groupId=${groupId}   

	//public getActions = (groupId: number, callback: (data: ActionDefinition[])=>void) : void => {
	//	this.getActionsObserve(groupId).subscribe(response => callback(response));
	//}

	public getActionsAsync = (groupId: number) : Promise<ActionDefinition[]> => {
		return this.getActions(groupId).first().toPromise();
	}  

	public getActions = (groupId: number) : Observable<ActionDefinition[]> => {
        var _Url = `api/Reference/getActions?groupId=${groupId}`;
            return this._httpClient.get<ActionDefinition[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getConstitutionBonusCharts   

	//public getConstitutionBonusCharts = (, callback: (data: ConstitutionBonusChart[])=>void) : void => {
	//	this.getConstitutionBonusChartsObserve().subscribe(response => callback(response));
	//}

	public getConstitutionBonusChartsAsync = () : Promise<ConstitutionBonusChart[]> => {
		return this.getConstitutionBonusCharts().first().toPromise();
	}  

	public getConstitutionBonusCharts = () : Observable<ConstitutionBonusChart[]> => {
        var _Url = `api/Reference/getConstitutionBonusCharts`;
            return this._httpClient.get<ConstitutionBonusChart[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getCriticalCodes   

	//public getCriticalCodes = (, callback: (data: CriticalCode[])=>void) : void => {
	//	this.getCriticalCodesObserve().subscribe(response => callback(response));
	//}

	public getCriticalCodesAsync = () : Promise<CriticalCode[]> => {
		return this.getCriticalCodes().first().toPromise();
	}  

	public getCriticalCodes = () : Observable<CriticalCode[]> => {
        var _Url = `api/Reference/getCriticalCodes`;
            return this._httpClient.get<CriticalCode[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getCriticalIgnores   

	//public getCriticalIgnores = (, callback: (data: CriticalIgnore[])=>void) : void => {
	//	this.getCriticalIgnoresObserve().subscribe(response => callback(response));
	//}

	public getCriticalIgnoresAsync = () : Promise<CriticalIgnore[]> => {
		return this.getCriticalIgnores().first().toPromise();
	}  

	public getCriticalIgnores = () : Observable<CriticalIgnore[]> => {
        var _Url = `api/Reference/getCriticalIgnores`;
            return this._httpClient.get<CriticalIgnore[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getIQs   

	//public getIQs = (, callback: (data: IQ[])=>void) : void => {
	//	this.getIQsObserve().subscribe(response => callback(response));
	//}

	public getIQsAsync = () : Promise<IQ[]> => {
		return this.getIQs().first().toPromise();
	}  

	public getIQs = () : Observable<IQ[]> => {
        var _Url = `api/Reference/getIQs`;
            return this._httpClient.get<IQ[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getLevelCharts   

	//public getLevelCharts = (, callback: (data: LevelChart[])=>void) : void => {
	//	this.getLevelChartsObserve().subscribe(response => callback(response));
	//}

	public getLevelChartsAsync = () : Promise<LevelChart[]> => {
		return this.getLevelCharts().first().toPromise();
	}  

	public getLevelCharts = () : Observable<LevelChart[]> => {
        var _Url = `api/Reference/getLevelCharts`;
            return this._httpClient.get<LevelChart[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getOutlooks   

	//public getOutlooks = (, callback: (data: Outlook[])=>void) : void => {
	//	this.getOutlooksObserve().subscribe(response => callback(response));
	//}

	public getOutlooksAsync = () : Promise<Outlook[]> => {
		return this.getOutlooks().first().toPromise();
	}  

	public getOutlooks = () : Observable<Outlook[]> => {
        var _Url = `api/Reference/getOutlooks`;
            return this._httpClient.get<Outlook[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getPaces   

	//public getPaces = (, callback: (data: Pace[])=>void) : void => {
	//	this.getPacesObserve().subscribe(response => callback(response));
	//}

	public getPacesAsync = () : Promise<Pace[]> => {
		return this.getPaces().first().toPromise();
	}  

	public getPaces = () : Observable<Pace[]> => {
        var _Url = `api/Reference/getPaces`;
            return this._httpClient.get<Pace[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getSizeRatings   

	//public getSizeRatings = (, callback: (data: SizeRating[])=>void) : void => {
	//	this.getSizeRatingsObserve().subscribe(response => callback(response));
	//}

	public getSizeRatingsAsync = () : Promise<SizeRating[]> => {
		return this.getSizeRatings().first().toPromise();
	}  

	public getSizeRatings = () : Observable<SizeRating[]> => {
        var _Url = `api/Reference/getSizeRatings`;
            return this._httpClient.get<SizeRating[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getSpeedCharts   

	//public getSpeedCharts = (, callback: (data: SpeedChart[])=>void) : void => {
	//	this.getSpeedChartsObserve().subscribe(response => callback(response));
	//}

	public getSpeedChartsAsync = () : Promise<SpeedChart[]> => {
		return this.getSpeedCharts().first().toPromise();
	}  

	public getSpeedCharts = () : Observable<SpeedChart[]> => {
        var _Url = `api/Reference/getSpeedCharts`;
            return this._httpClient.get<SpeedChart[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getAttackTypes   

	//public getAttackTypes = (, callback: (data: AttackType[])=>void) : void => {
	//	this.getAttackTypesObserve().subscribe(response => callback(response));
	//}

	public getAttackTypesAsync = () : Promise<AttackType[]> => {
		return this.getAttackTypes().first().toPromise();
	}  

	public getAttackTypes = () : Observable<AttackType[]> => {
        var _Url = `api/Reference/getAttackTypes`;
            return this._httpClient.get<AttackType[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getCriticalTypes   

	//public getCriticalTypes = (, callback: (data: CriticalType[])=>void) : void => {
	//	this.getCriticalTypesObserve().subscribe(response => callback(response));
	//}

	public getCriticalTypesAsync = () : Promise<CriticalType[]> => {
		return this.getCriticalTypes().first().toPromise();
	}  

	public getCriticalTypes = () : Observable<CriticalType[]> => {
        var _Url = `api/Reference/getCriticalTypes`;
            return this._httpClient.get<CriticalType[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getWeaponTypes   

	//public getWeaponTypes = (, callback: (data: WeaponType[])=>void) : void => {
	//	this.getWeaponTypesObserve().subscribe(response => callback(response));
	//}

	public getWeaponTypesAsync = () : Promise<WeaponType[]> => {
		return this.getWeaponTypes().first().toPromise();
	}  

	public getWeaponTypes = () : Observable<WeaponType[]> => {
        var _Url = `api/Reference/getWeaponTypes`;
            return this._httpClient.get<WeaponType[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getBooks   

	//public getBooks = (, callback: (data: Book[])=>void) : void => {
	//	this.getBooksObserve().subscribe(response => callback(response));
	//}

	public getBooksAsync = () : Promise<Book[]> => {
		return this.getBooks().first().toPromise();
	}  

	public getBooks = () : Observable<Book[]> => {
        var _Url = `api/Reference/getBooks`;
            return this._httpClient.get<Book[]>(_Url)
                .catch(this.handleError);
	};

    
    // get: api/Reference/getPsychicRefractoryPeriodEntries   

	//public getPsychicRefractoryPeriodEntries = (, callback: (data: PsychicRefractoryPeriodEntry[])=>void) : void => {
	//	this.getPsychicRefractoryPeriodEntriesObserve().subscribe(response => callback(response));
	//}

	public getPsychicRefractoryPeriodEntriesAsync = () : Promise<PsychicRefractoryPeriodEntry[]> => {
		return this.getPsychicRefractoryPeriodEntries().first().toPromise();
	}  

	public getPsychicRefractoryPeriodEntries = () : Observable<PsychicRefractoryPeriodEntry[]> => {
        var _Url = `api/Reference/getPsychicRefractoryPeriodEntries`;
            return this._httpClient.get<PsychicRefractoryPeriodEntry[]>(_Url)
                .catch(this.handleError);
	};

    
    // Utility
    private handleError(error: HttpErrorResponse) {
        console.error(error);
        let customError: string = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText
        }
        return Observable.throw(customError || 'Server error');
    }
}


	