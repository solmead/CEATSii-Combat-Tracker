//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using CombatTracker.Domain.Reference.Attacks.Charts;
using CombatTracker.Domain.Reference.Creatures;
using CombatTracker.Domain.Reference.Creatures.Charts;

namespace CombatTracker.Domain.Reference.Attacks
{
    [Table("Attack")]
    public partial class Attack
    {
        public Attack()
        {
            //this.ActorsActions = new HashSet<ActorsAction>();
            //this.ActorsAttacks = new HashSet<ActorsAttack>();
            this.ParentAttacks1 = new HashSet<Attack>();
            this.ParentAttacks2 = new HashSet<Attack>();
            this.AttacksAddCrits = new HashSet<AttacksAddCrit>();
        }
    
        public int ID { get; set; }
        public double PercentChance { get; set; }
        public int OB { get; set; }
        public int MaxOB { get; set; }
        public int Type_ID { get; set; }
        public int? Size_ID { get; set; }
        public int Number { get; set; }
        public int DamageMultiplier { get; set; }
        public CriticalLevels CriticalLevel { get; set; }
        public bool AdditionalCritsIsOr { get; set; }
        public int? UseCriticalInstead_ID { get; set; }
        public int? ThisRoundSuccess_ID { get; set; }
        public int? NextRoundSuccess_ID { get; set; }
        public int? ParentAttack_ID { get; set; }
        public int? CreatureOn_ID { get; set; }
        public int? WeaponUsed_ID { get; set; }
    
        //public virtual ICollection<ActorsAction> ActorsActions { get; set; }
        //public virtual ICollection<ActorsAttack> ActorsAttacks { get; set; }
        [Required]
        [ForeignKey("UseCriticalInstead_ID")]
        public virtual CriticalType CriticalUseInstead { get; set; }
        [Required]
        [ForeignKey("Type_ID")]
        public virtual AttackType AttackType { get; set; }
        [ForeignKey("CreatureOn_ID")]
        public virtual Creature Creature { get; set; }
        [ForeignKey("ThisRoundSuccess_ID")]
        public virtual Attack ThisRoundSuccess { get; set; }
        [InverseProperty("ThisRoundSuccess_ID")]
        public virtual ICollection<Attack> ParentAttacks1 { get; set; }
        [ForeignKey("NextRoundSuccess_ID")]
        public virtual Attack NextRoundSuccess { get; set; }
        [InverseProperty("NextRoundSuccess_ID")]
        public virtual ICollection<Attack> ParentAttacks2 { get; set; }
        [ForeignKey("Size_ID")]
        public virtual SizeRating SizeRating { get; set; }
        [ForeignKey("WeaponUsed_ID")]
        public virtual Weapon WeaponUsed { get; set; }

        public virtual ICollection<AttacksAddCrit> AttacksAddCrits { get; set; }


        public Attack ParentAttack
        {
            get
            {
                var l = ParentAttacks1.Union(ParentAttacks2).ToList();
                return l.FirstOrDefault();
            }
        }

        public void ModifyOB(int levelDiff)
        {
            OB = OB + levelDiff*5;

            if (ThisRoundSuccess != null)
            {
                ThisRoundSuccess.ModifyOB(levelDiff);
            }
            
            if (NextRoundSuccess != null)
            {
                NextRoundSuccess.ModifyOB(levelDiff);
            }
        }

    }
    
}
